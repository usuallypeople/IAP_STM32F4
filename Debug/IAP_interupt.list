
IAP_interupt.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004244  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000004c0  080043cc  080043cc  000143cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800488c  0800488c  00020010  2**0
                  CONTENTS
  4 .ARM          00000008  0800488c  0800488c  0001488c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004894  08004894  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004894  08004894  00014894  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004898  08004898  00014898  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  0800489c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000004e0  20000010  080048ac  00020010  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200004f0  080048ac  000204f0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .debug_info   00009dba  00000000  00000000  00020040  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001f93  00000000  00000000  00029dfa  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000008c0  00000000  00000000  0002bd90  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000007b8  00000000  00000000  0002c650  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00020302  00000000  00000000  0002ce08  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00008b02  00000000  00000000  0004d10a  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000c1a8f  00000000  00000000  00055c0c  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0011769b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002198  00000000  00000000  00117718  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000010 	.word	0x20000010
 80001a4:	00000000 	.word	0x00000000
 80001a8:	080043b4 	.word	0x080043b4

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000014 	.word	0x20000014
 80001c4:	080043b4 	.word	0x080043b4

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b972 	b.w	80004c4 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9e08      	ldr	r6, [sp, #32]
 80001fe:	4604      	mov	r4, r0
 8000200:	4688      	mov	r8, r1
 8000202:	2b00      	cmp	r3, #0
 8000204:	d14b      	bne.n	800029e <__udivmoddi4+0xa6>
 8000206:	428a      	cmp	r2, r1
 8000208:	4615      	mov	r5, r2
 800020a:	d967      	bls.n	80002dc <__udivmoddi4+0xe4>
 800020c:	fab2 f282 	clz	r2, r2
 8000210:	b14a      	cbz	r2, 8000226 <__udivmoddi4+0x2e>
 8000212:	f1c2 0720 	rsb	r7, r2, #32
 8000216:	fa01 f302 	lsl.w	r3, r1, r2
 800021a:	fa20 f707 	lsr.w	r7, r0, r7
 800021e:	4095      	lsls	r5, r2
 8000220:	ea47 0803 	orr.w	r8, r7, r3
 8000224:	4094      	lsls	r4, r2
 8000226:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800022a:	0c23      	lsrs	r3, r4, #16
 800022c:	fbb8 f7fe 	udiv	r7, r8, lr
 8000230:	fa1f fc85 	uxth.w	ip, r5
 8000234:	fb0e 8817 	mls	r8, lr, r7, r8
 8000238:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800023c:	fb07 f10c 	mul.w	r1, r7, ip
 8000240:	4299      	cmp	r1, r3
 8000242:	d909      	bls.n	8000258 <__udivmoddi4+0x60>
 8000244:	18eb      	adds	r3, r5, r3
 8000246:	f107 30ff 	add.w	r0, r7, #4294967295
 800024a:	f080 811b 	bcs.w	8000484 <__udivmoddi4+0x28c>
 800024e:	4299      	cmp	r1, r3
 8000250:	f240 8118 	bls.w	8000484 <__udivmoddi4+0x28c>
 8000254:	3f02      	subs	r7, #2
 8000256:	442b      	add	r3, r5
 8000258:	1a5b      	subs	r3, r3, r1
 800025a:	b2a4      	uxth	r4, r4
 800025c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000260:	fb0e 3310 	mls	r3, lr, r0, r3
 8000264:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000268:	fb00 fc0c 	mul.w	ip, r0, ip
 800026c:	45a4      	cmp	ip, r4
 800026e:	d909      	bls.n	8000284 <__udivmoddi4+0x8c>
 8000270:	192c      	adds	r4, r5, r4
 8000272:	f100 33ff 	add.w	r3, r0, #4294967295
 8000276:	f080 8107 	bcs.w	8000488 <__udivmoddi4+0x290>
 800027a:	45a4      	cmp	ip, r4
 800027c:	f240 8104 	bls.w	8000488 <__udivmoddi4+0x290>
 8000280:	3802      	subs	r0, #2
 8000282:	442c      	add	r4, r5
 8000284:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000288:	eba4 040c 	sub.w	r4, r4, ip
 800028c:	2700      	movs	r7, #0
 800028e:	b11e      	cbz	r6, 8000298 <__udivmoddi4+0xa0>
 8000290:	40d4      	lsrs	r4, r2
 8000292:	2300      	movs	r3, #0
 8000294:	e9c6 4300 	strd	r4, r3, [r6]
 8000298:	4639      	mov	r1, r7
 800029a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800029e:	428b      	cmp	r3, r1
 80002a0:	d909      	bls.n	80002b6 <__udivmoddi4+0xbe>
 80002a2:	2e00      	cmp	r6, #0
 80002a4:	f000 80eb 	beq.w	800047e <__udivmoddi4+0x286>
 80002a8:	2700      	movs	r7, #0
 80002aa:	e9c6 0100 	strd	r0, r1, [r6]
 80002ae:	4638      	mov	r0, r7
 80002b0:	4639      	mov	r1, r7
 80002b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b6:	fab3 f783 	clz	r7, r3
 80002ba:	2f00      	cmp	r7, #0
 80002bc:	d147      	bne.n	800034e <__udivmoddi4+0x156>
 80002be:	428b      	cmp	r3, r1
 80002c0:	d302      	bcc.n	80002c8 <__udivmoddi4+0xd0>
 80002c2:	4282      	cmp	r2, r0
 80002c4:	f200 80fa 	bhi.w	80004bc <__udivmoddi4+0x2c4>
 80002c8:	1a84      	subs	r4, r0, r2
 80002ca:	eb61 0303 	sbc.w	r3, r1, r3
 80002ce:	2001      	movs	r0, #1
 80002d0:	4698      	mov	r8, r3
 80002d2:	2e00      	cmp	r6, #0
 80002d4:	d0e0      	beq.n	8000298 <__udivmoddi4+0xa0>
 80002d6:	e9c6 4800 	strd	r4, r8, [r6]
 80002da:	e7dd      	b.n	8000298 <__udivmoddi4+0xa0>
 80002dc:	b902      	cbnz	r2, 80002e0 <__udivmoddi4+0xe8>
 80002de:	deff      	udf	#255	; 0xff
 80002e0:	fab2 f282 	clz	r2, r2
 80002e4:	2a00      	cmp	r2, #0
 80002e6:	f040 808f 	bne.w	8000408 <__udivmoddi4+0x210>
 80002ea:	1b49      	subs	r1, r1, r5
 80002ec:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80002f0:	fa1f f885 	uxth.w	r8, r5
 80002f4:	2701      	movs	r7, #1
 80002f6:	fbb1 fcfe 	udiv	ip, r1, lr
 80002fa:	0c23      	lsrs	r3, r4, #16
 80002fc:	fb0e 111c 	mls	r1, lr, ip, r1
 8000300:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000304:	fb08 f10c 	mul.w	r1, r8, ip
 8000308:	4299      	cmp	r1, r3
 800030a:	d907      	bls.n	800031c <__udivmoddi4+0x124>
 800030c:	18eb      	adds	r3, r5, r3
 800030e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000312:	d202      	bcs.n	800031a <__udivmoddi4+0x122>
 8000314:	4299      	cmp	r1, r3
 8000316:	f200 80cd 	bhi.w	80004b4 <__udivmoddi4+0x2bc>
 800031a:	4684      	mov	ip, r0
 800031c:	1a59      	subs	r1, r3, r1
 800031e:	b2a3      	uxth	r3, r4
 8000320:	fbb1 f0fe 	udiv	r0, r1, lr
 8000324:	fb0e 1410 	mls	r4, lr, r0, r1
 8000328:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 800032c:	fb08 f800 	mul.w	r8, r8, r0
 8000330:	45a0      	cmp	r8, r4
 8000332:	d907      	bls.n	8000344 <__udivmoddi4+0x14c>
 8000334:	192c      	adds	r4, r5, r4
 8000336:	f100 33ff 	add.w	r3, r0, #4294967295
 800033a:	d202      	bcs.n	8000342 <__udivmoddi4+0x14a>
 800033c:	45a0      	cmp	r8, r4
 800033e:	f200 80b6 	bhi.w	80004ae <__udivmoddi4+0x2b6>
 8000342:	4618      	mov	r0, r3
 8000344:	eba4 0408 	sub.w	r4, r4, r8
 8000348:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800034c:	e79f      	b.n	800028e <__udivmoddi4+0x96>
 800034e:	f1c7 0c20 	rsb	ip, r7, #32
 8000352:	40bb      	lsls	r3, r7
 8000354:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000358:	ea4e 0e03 	orr.w	lr, lr, r3
 800035c:	fa01 f407 	lsl.w	r4, r1, r7
 8000360:	fa20 f50c 	lsr.w	r5, r0, ip
 8000364:	fa21 f30c 	lsr.w	r3, r1, ip
 8000368:	ea4f 481e 	mov.w	r8, lr, lsr #16
 800036c:	4325      	orrs	r5, r4
 800036e:	fbb3 f9f8 	udiv	r9, r3, r8
 8000372:	0c2c      	lsrs	r4, r5, #16
 8000374:	fb08 3319 	mls	r3, r8, r9, r3
 8000378:	fa1f fa8e 	uxth.w	sl, lr
 800037c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000380:	fb09 f40a 	mul.w	r4, r9, sl
 8000384:	429c      	cmp	r4, r3
 8000386:	fa02 f207 	lsl.w	r2, r2, r7
 800038a:	fa00 f107 	lsl.w	r1, r0, r7
 800038e:	d90b      	bls.n	80003a8 <__udivmoddi4+0x1b0>
 8000390:	eb1e 0303 	adds.w	r3, lr, r3
 8000394:	f109 30ff 	add.w	r0, r9, #4294967295
 8000398:	f080 8087 	bcs.w	80004aa <__udivmoddi4+0x2b2>
 800039c:	429c      	cmp	r4, r3
 800039e:	f240 8084 	bls.w	80004aa <__udivmoddi4+0x2b2>
 80003a2:	f1a9 0902 	sub.w	r9, r9, #2
 80003a6:	4473      	add	r3, lr
 80003a8:	1b1b      	subs	r3, r3, r4
 80003aa:	b2ad      	uxth	r5, r5
 80003ac:	fbb3 f0f8 	udiv	r0, r3, r8
 80003b0:	fb08 3310 	mls	r3, r8, r0, r3
 80003b4:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80003b8:	fb00 fa0a 	mul.w	sl, r0, sl
 80003bc:	45a2      	cmp	sl, r4
 80003be:	d908      	bls.n	80003d2 <__udivmoddi4+0x1da>
 80003c0:	eb1e 0404 	adds.w	r4, lr, r4
 80003c4:	f100 33ff 	add.w	r3, r0, #4294967295
 80003c8:	d26b      	bcs.n	80004a2 <__udivmoddi4+0x2aa>
 80003ca:	45a2      	cmp	sl, r4
 80003cc:	d969      	bls.n	80004a2 <__udivmoddi4+0x2aa>
 80003ce:	3802      	subs	r0, #2
 80003d0:	4474      	add	r4, lr
 80003d2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80003d6:	fba0 8902 	umull	r8, r9, r0, r2
 80003da:	eba4 040a 	sub.w	r4, r4, sl
 80003de:	454c      	cmp	r4, r9
 80003e0:	46c2      	mov	sl, r8
 80003e2:	464b      	mov	r3, r9
 80003e4:	d354      	bcc.n	8000490 <__udivmoddi4+0x298>
 80003e6:	d051      	beq.n	800048c <__udivmoddi4+0x294>
 80003e8:	2e00      	cmp	r6, #0
 80003ea:	d069      	beq.n	80004c0 <__udivmoddi4+0x2c8>
 80003ec:	ebb1 050a 	subs.w	r5, r1, sl
 80003f0:	eb64 0403 	sbc.w	r4, r4, r3
 80003f4:	fa04 fc0c 	lsl.w	ip, r4, ip
 80003f8:	40fd      	lsrs	r5, r7
 80003fa:	40fc      	lsrs	r4, r7
 80003fc:	ea4c 0505 	orr.w	r5, ip, r5
 8000400:	e9c6 5400 	strd	r5, r4, [r6]
 8000404:	2700      	movs	r7, #0
 8000406:	e747      	b.n	8000298 <__udivmoddi4+0xa0>
 8000408:	f1c2 0320 	rsb	r3, r2, #32
 800040c:	fa20 f703 	lsr.w	r7, r0, r3
 8000410:	4095      	lsls	r5, r2
 8000412:	fa01 f002 	lsl.w	r0, r1, r2
 8000416:	fa21 f303 	lsr.w	r3, r1, r3
 800041a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800041e:	4338      	orrs	r0, r7
 8000420:	0c01      	lsrs	r1, r0, #16
 8000422:	fbb3 f7fe 	udiv	r7, r3, lr
 8000426:	fa1f f885 	uxth.w	r8, r5
 800042a:	fb0e 3317 	mls	r3, lr, r7, r3
 800042e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000432:	fb07 f308 	mul.w	r3, r7, r8
 8000436:	428b      	cmp	r3, r1
 8000438:	fa04 f402 	lsl.w	r4, r4, r2
 800043c:	d907      	bls.n	800044e <__udivmoddi4+0x256>
 800043e:	1869      	adds	r1, r5, r1
 8000440:	f107 3cff 	add.w	ip, r7, #4294967295
 8000444:	d22f      	bcs.n	80004a6 <__udivmoddi4+0x2ae>
 8000446:	428b      	cmp	r3, r1
 8000448:	d92d      	bls.n	80004a6 <__udivmoddi4+0x2ae>
 800044a:	3f02      	subs	r7, #2
 800044c:	4429      	add	r1, r5
 800044e:	1acb      	subs	r3, r1, r3
 8000450:	b281      	uxth	r1, r0
 8000452:	fbb3 f0fe 	udiv	r0, r3, lr
 8000456:	fb0e 3310 	mls	r3, lr, r0, r3
 800045a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800045e:	fb00 f308 	mul.w	r3, r0, r8
 8000462:	428b      	cmp	r3, r1
 8000464:	d907      	bls.n	8000476 <__udivmoddi4+0x27e>
 8000466:	1869      	adds	r1, r5, r1
 8000468:	f100 3cff 	add.w	ip, r0, #4294967295
 800046c:	d217      	bcs.n	800049e <__udivmoddi4+0x2a6>
 800046e:	428b      	cmp	r3, r1
 8000470:	d915      	bls.n	800049e <__udivmoddi4+0x2a6>
 8000472:	3802      	subs	r0, #2
 8000474:	4429      	add	r1, r5
 8000476:	1ac9      	subs	r1, r1, r3
 8000478:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 800047c:	e73b      	b.n	80002f6 <__udivmoddi4+0xfe>
 800047e:	4637      	mov	r7, r6
 8000480:	4630      	mov	r0, r6
 8000482:	e709      	b.n	8000298 <__udivmoddi4+0xa0>
 8000484:	4607      	mov	r7, r0
 8000486:	e6e7      	b.n	8000258 <__udivmoddi4+0x60>
 8000488:	4618      	mov	r0, r3
 800048a:	e6fb      	b.n	8000284 <__udivmoddi4+0x8c>
 800048c:	4541      	cmp	r1, r8
 800048e:	d2ab      	bcs.n	80003e8 <__udivmoddi4+0x1f0>
 8000490:	ebb8 0a02 	subs.w	sl, r8, r2
 8000494:	eb69 020e 	sbc.w	r2, r9, lr
 8000498:	3801      	subs	r0, #1
 800049a:	4613      	mov	r3, r2
 800049c:	e7a4      	b.n	80003e8 <__udivmoddi4+0x1f0>
 800049e:	4660      	mov	r0, ip
 80004a0:	e7e9      	b.n	8000476 <__udivmoddi4+0x27e>
 80004a2:	4618      	mov	r0, r3
 80004a4:	e795      	b.n	80003d2 <__udivmoddi4+0x1da>
 80004a6:	4667      	mov	r7, ip
 80004a8:	e7d1      	b.n	800044e <__udivmoddi4+0x256>
 80004aa:	4681      	mov	r9, r0
 80004ac:	e77c      	b.n	80003a8 <__udivmoddi4+0x1b0>
 80004ae:	3802      	subs	r0, #2
 80004b0:	442c      	add	r4, r5
 80004b2:	e747      	b.n	8000344 <__udivmoddi4+0x14c>
 80004b4:	f1ac 0c02 	sub.w	ip, ip, #2
 80004b8:	442b      	add	r3, r5
 80004ba:	e72f      	b.n	800031c <__udivmoddi4+0x124>
 80004bc:	4638      	mov	r0, r7
 80004be:	e708      	b.n	80002d2 <__udivmoddi4+0xda>
 80004c0:	4637      	mov	r7, r6
 80004c2:	e6e9      	b.n	8000298 <__udivmoddi4+0xa0>

080004c4 <__aeabi_idiv0>:
 80004c4:	4770      	bx	lr
 80004c6:	bf00      	nop

080004c8 <Int2Str>:
  * @param  p_str: The string output pointer
  * @param  intnum: The integer to be converted
  * @retval None
  */
void Int2Str(uint8_t *p_str, uint32_t intnum)
{
 80004c8:	b480      	push	{r7}
 80004ca:	b087      	sub	sp, #28
 80004cc:	af00      	add	r7, sp, #0
 80004ce:	6078      	str	r0, [r7, #4]
 80004d0:	6039      	str	r1, [r7, #0]
  uint32_t i, divider = 1000000000, pos = 0, status = 0;
 80004d2:	4b25      	ldr	r3, [pc, #148]	; (8000568 <Int2Str+0xa0>)
 80004d4:	613b      	str	r3, [r7, #16]
 80004d6:	2300      	movs	r3, #0
 80004d8:	60fb      	str	r3, [r7, #12]
 80004da:	2300      	movs	r3, #0
 80004dc:	60bb      	str	r3, [r7, #8]

  for (i = 0; i < 10; i++)
 80004de:	2300      	movs	r3, #0
 80004e0:	617b      	str	r3, [r7, #20]
 80004e2:	e038      	b.n	8000556 <Int2Str+0x8e>
  {
    p_str[pos++] = (intnum / divider) + 48;
 80004e4:	683a      	ldr	r2, [r7, #0]
 80004e6:	693b      	ldr	r3, [r7, #16]
 80004e8:	fbb2 f3f3 	udiv	r3, r2, r3
 80004ec:	b2da      	uxtb	r2, r3
 80004ee:	68fb      	ldr	r3, [r7, #12]
 80004f0:	1c59      	adds	r1, r3, #1
 80004f2:	60f9      	str	r1, [r7, #12]
 80004f4:	6879      	ldr	r1, [r7, #4]
 80004f6:	440b      	add	r3, r1
 80004f8:	3230      	adds	r2, #48	; 0x30
 80004fa:	b2d2      	uxtb	r2, r2
 80004fc:	701a      	strb	r2, [r3, #0]

    intnum = intnum % divider;
 80004fe:	683b      	ldr	r3, [r7, #0]
 8000500:	693a      	ldr	r2, [r7, #16]
 8000502:	fbb3 f2f2 	udiv	r2, r3, r2
 8000506:	6939      	ldr	r1, [r7, #16]
 8000508:	fb01 f202 	mul.w	r2, r1, r2
 800050c:	1a9b      	subs	r3, r3, r2
 800050e:	603b      	str	r3, [r7, #0]
    divider /= 10;
 8000510:	693b      	ldr	r3, [r7, #16]
 8000512:	4a16      	ldr	r2, [pc, #88]	; (800056c <Int2Str+0xa4>)
 8000514:	fba2 2303 	umull	r2, r3, r2, r3
 8000518:	08db      	lsrs	r3, r3, #3
 800051a:	613b      	str	r3, [r7, #16]
    if ((p_str[pos-1] == '0') & (status == 0))
 800051c:	68fb      	ldr	r3, [r7, #12]
 800051e:	3b01      	subs	r3, #1
 8000520:	687a      	ldr	r2, [r7, #4]
 8000522:	4413      	add	r3, r2
 8000524:	781b      	ldrb	r3, [r3, #0]
 8000526:	2b30      	cmp	r3, #48	; 0x30
 8000528:	bf0c      	ite	eq
 800052a:	2301      	moveq	r3, #1
 800052c:	2300      	movne	r3, #0
 800052e:	b2da      	uxtb	r2, r3
 8000530:	68bb      	ldr	r3, [r7, #8]
 8000532:	2b00      	cmp	r3, #0
 8000534:	bf0c      	ite	eq
 8000536:	2301      	moveq	r3, #1
 8000538:	2300      	movne	r3, #0
 800053a:	b2db      	uxtb	r3, r3
 800053c:	4013      	ands	r3, r2
 800053e:	b2db      	uxtb	r3, r3
 8000540:	2b00      	cmp	r3, #0
 8000542:	d002      	beq.n	800054a <Int2Str+0x82>
    {
      pos = 0;
 8000544:	2300      	movs	r3, #0
 8000546:	60fb      	str	r3, [r7, #12]
 8000548:	e002      	b.n	8000550 <Int2Str+0x88>
    }
    else
    {
      status++;
 800054a:	68bb      	ldr	r3, [r7, #8]
 800054c:	3301      	adds	r3, #1
 800054e:	60bb      	str	r3, [r7, #8]
  for (i = 0; i < 10; i++)
 8000550:	697b      	ldr	r3, [r7, #20]
 8000552:	3301      	adds	r3, #1
 8000554:	617b      	str	r3, [r7, #20]
 8000556:	697b      	ldr	r3, [r7, #20]
 8000558:	2b09      	cmp	r3, #9
 800055a:	d9c3      	bls.n	80004e4 <Int2Str+0x1c>
    }
  }
}
 800055c:	bf00      	nop
 800055e:	371c      	adds	r7, #28
 8000560:	46bd      	mov	sp, r7
 8000562:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000566:	4770      	bx	lr
 8000568:	3b9aca00 	.word	0x3b9aca00
 800056c:	cccccccd 	.word	0xcccccccd

08000570 <Str2Int>:
  * @param  p_intnum: The integer value
  * @retval 1: Correct
  *         0: Error
  */
uint32_t Str2Int(uint8_t *p_inputstr, uint32_t *p_intnum)
{
 8000570:	b480      	push	{r7}
 8000572:	b087      	sub	sp, #28
 8000574:	af00      	add	r7, sp, #0
 8000576:	6078      	str	r0, [r7, #4]
 8000578:	6039      	str	r1, [r7, #0]
  uint32_t i = 0, res = 0;
 800057a:	2300      	movs	r3, #0
 800057c:	617b      	str	r3, [r7, #20]
 800057e:	2300      	movs	r3, #0
 8000580:	613b      	str	r3, [r7, #16]
  uint32_t val = 0;
 8000582:	2300      	movs	r3, #0
 8000584:	60fb      	str	r3, [r7, #12]

  if ((p_inputstr[0] == '0') && ((p_inputstr[1] == 'x') || (p_inputstr[1] == 'X')))
 8000586:	687b      	ldr	r3, [r7, #4]
 8000588:	781b      	ldrb	r3, [r3, #0]
 800058a:	2b30      	cmp	r3, #48	; 0x30
 800058c:	f040 80d7 	bne.w	800073e <Str2Int+0x1ce>
 8000590:	687b      	ldr	r3, [r7, #4]
 8000592:	3301      	adds	r3, #1
 8000594:	781b      	ldrb	r3, [r3, #0]
 8000596:	2b78      	cmp	r3, #120	; 0x78
 8000598:	d005      	beq.n	80005a6 <Str2Int+0x36>
 800059a:	687b      	ldr	r3, [r7, #4]
 800059c:	3301      	adds	r3, #1
 800059e:	781b      	ldrb	r3, [r3, #0]
 80005a0:	2b58      	cmp	r3, #88	; 0x58
 80005a2:	f040 80cc 	bne.w	800073e <Str2Int+0x1ce>
  {
    i = 2;
 80005a6:	2302      	movs	r3, #2
 80005a8:	617b      	str	r3, [r7, #20]
    while ( ( i < 11 ) && ( p_inputstr[i] != '\0' ) )
 80005aa:	e057      	b.n	800065c <Str2Int+0xec>
    {
      if (ISVALIDHEX(p_inputstr[i]))
 80005ac:	687a      	ldr	r2, [r7, #4]
 80005ae:	697b      	ldr	r3, [r7, #20]
 80005b0:	4413      	add	r3, r2
 80005b2:	781b      	ldrb	r3, [r3, #0]
 80005b4:	2b40      	cmp	r3, #64	; 0x40
 80005b6:	d905      	bls.n	80005c4 <Str2Int+0x54>
 80005b8:	687a      	ldr	r2, [r7, #4]
 80005ba:	697b      	ldr	r3, [r7, #20]
 80005bc:	4413      	add	r3, r2
 80005be:	781b      	ldrb	r3, [r3, #0]
 80005c0:	2b46      	cmp	r3, #70	; 0x46
 80005c2:	d917      	bls.n	80005f4 <Str2Int+0x84>
 80005c4:	687a      	ldr	r2, [r7, #4]
 80005c6:	697b      	ldr	r3, [r7, #20]
 80005c8:	4413      	add	r3, r2
 80005ca:	781b      	ldrb	r3, [r3, #0]
 80005cc:	2b60      	cmp	r3, #96	; 0x60
 80005ce:	d905      	bls.n	80005dc <Str2Int+0x6c>
 80005d0:	687a      	ldr	r2, [r7, #4]
 80005d2:	697b      	ldr	r3, [r7, #20]
 80005d4:	4413      	add	r3, r2
 80005d6:	781b      	ldrb	r3, [r3, #0]
 80005d8:	2b66      	cmp	r3, #102	; 0x66
 80005da:	d90b      	bls.n	80005f4 <Str2Int+0x84>
 80005dc:	687a      	ldr	r2, [r7, #4]
 80005de:	697b      	ldr	r3, [r7, #20]
 80005e0:	4413      	add	r3, r2
 80005e2:	781b      	ldrb	r3, [r3, #0]
 80005e4:	2b2f      	cmp	r3, #47	; 0x2f
 80005e6:	d936      	bls.n	8000656 <Str2Int+0xe6>
 80005e8:	687a      	ldr	r2, [r7, #4]
 80005ea:	697b      	ldr	r3, [r7, #20]
 80005ec:	4413      	add	r3, r2
 80005ee:	781b      	ldrb	r3, [r3, #0]
 80005f0:	2b39      	cmp	r3, #57	; 0x39
 80005f2:	d830      	bhi.n	8000656 <Str2Int+0xe6>
      {
        val = (val << 4) + CONVERTHEX(p_inputstr[i]);
 80005f4:	68fb      	ldr	r3, [r7, #12]
 80005f6:	011b      	lsls	r3, r3, #4
 80005f8:	6879      	ldr	r1, [r7, #4]
 80005fa:	697a      	ldr	r2, [r7, #20]
 80005fc:	440a      	add	r2, r1
 80005fe:	7812      	ldrb	r2, [r2, #0]
 8000600:	2a2f      	cmp	r2, #47	; 0x2f
 8000602:	d90b      	bls.n	800061c <Str2Int+0xac>
 8000604:	6879      	ldr	r1, [r7, #4]
 8000606:	697a      	ldr	r2, [r7, #20]
 8000608:	440a      	add	r2, r1
 800060a:	7812      	ldrb	r2, [r2, #0]
 800060c:	2a39      	cmp	r2, #57	; 0x39
 800060e:	d805      	bhi.n	800061c <Str2Int+0xac>
 8000610:	6879      	ldr	r1, [r7, #4]
 8000612:	697a      	ldr	r2, [r7, #20]
 8000614:	440a      	add	r2, r1
 8000616:	7812      	ldrb	r2, [r2, #0]
 8000618:	3a30      	subs	r2, #48	; 0x30
 800061a:	e016      	b.n	800064a <Str2Int+0xda>
 800061c:	6879      	ldr	r1, [r7, #4]
 800061e:	697a      	ldr	r2, [r7, #20]
 8000620:	440a      	add	r2, r1
 8000622:	7812      	ldrb	r2, [r2, #0]
 8000624:	2a40      	cmp	r2, #64	; 0x40
 8000626:	d90b      	bls.n	8000640 <Str2Int+0xd0>
 8000628:	6879      	ldr	r1, [r7, #4]
 800062a:	697a      	ldr	r2, [r7, #20]
 800062c:	440a      	add	r2, r1
 800062e:	7812      	ldrb	r2, [r2, #0]
 8000630:	2a46      	cmp	r2, #70	; 0x46
 8000632:	d805      	bhi.n	8000640 <Str2Int+0xd0>
 8000634:	6879      	ldr	r1, [r7, #4]
 8000636:	697a      	ldr	r2, [r7, #20]
 8000638:	440a      	add	r2, r1
 800063a:	7812      	ldrb	r2, [r2, #0]
 800063c:	3a37      	subs	r2, #55	; 0x37
 800063e:	e004      	b.n	800064a <Str2Int+0xda>
 8000640:	6879      	ldr	r1, [r7, #4]
 8000642:	697a      	ldr	r2, [r7, #20]
 8000644:	440a      	add	r2, r1
 8000646:	7812      	ldrb	r2, [r2, #0]
 8000648:	3a57      	subs	r2, #87	; 0x57
 800064a:	4413      	add	r3, r2
 800064c:	60fb      	str	r3, [r7, #12]
      {
        /* Return 0, Invalid input */
        res = 0;
        break;
      }
      i++;
 800064e:	697b      	ldr	r3, [r7, #20]
 8000650:	3301      	adds	r3, #1
 8000652:	617b      	str	r3, [r7, #20]
 8000654:	e002      	b.n	800065c <Str2Int+0xec>
        res = 0;
 8000656:	2300      	movs	r3, #0
 8000658:	613b      	str	r3, [r7, #16]
        break;
 800065a:	e008      	b.n	800066e <Str2Int+0xfe>
    while ( ( i < 11 ) && ( p_inputstr[i] != '\0' ) )
 800065c:	697b      	ldr	r3, [r7, #20]
 800065e:	2b0a      	cmp	r3, #10
 8000660:	d805      	bhi.n	800066e <Str2Int+0xfe>
 8000662:	687a      	ldr	r2, [r7, #4]
 8000664:	697b      	ldr	r3, [r7, #20]
 8000666:	4413      	add	r3, r2
 8000668:	781b      	ldrb	r3, [r3, #0]
 800066a:	2b00      	cmp	r3, #0
 800066c:	d19e      	bne.n	80005ac <Str2Int+0x3c>
    }

    /* valid result */
    if (p_inputstr[i] == '\0')
 800066e:	687a      	ldr	r2, [r7, #4]
 8000670:	697b      	ldr	r3, [r7, #20]
 8000672:	4413      	add	r3, r2
 8000674:	781b      	ldrb	r3, [r3, #0]
 8000676:	2b00      	cmp	r3, #0
 8000678:	d167      	bne.n	800074a <Str2Int+0x1da>
    {
      *p_intnum = val;
 800067a:	683b      	ldr	r3, [r7, #0]
 800067c:	68fa      	ldr	r2, [r7, #12]
 800067e:	601a      	str	r2, [r3, #0]
      res = 1;
 8000680:	2301      	movs	r3, #1
 8000682:	613b      	str	r3, [r7, #16]
    if (p_inputstr[i] == '\0')
 8000684:	e061      	b.n	800074a <Str2Int+0x1da>
  }
  else /* max 10-digit decimal input */
  {
    while ( ( i < 11 ) && ( res != 1 ) )
    {
      if (p_inputstr[i] == '\0')
 8000686:	687a      	ldr	r2, [r7, #4]
 8000688:	697b      	ldr	r3, [r7, #20]
 800068a:	4413      	add	r3, r2
 800068c:	781b      	ldrb	r3, [r3, #0]
 800068e:	2b00      	cmp	r3, #0
 8000690:	d105      	bne.n	800069e <Str2Int+0x12e>
      {
        *p_intnum = val;
 8000692:	683b      	ldr	r3, [r7, #0]
 8000694:	68fa      	ldr	r2, [r7, #12]
 8000696:	601a      	str	r2, [r3, #0]
        /* return 1 */
        res = 1;
 8000698:	2301      	movs	r3, #1
 800069a:	613b      	str	r3, [r7, #16]
 800069c:	e04c      	b.n	8000738 <Str2Int+0x1c8>
      }
      else if (((p_inputstr[i] == 'k') || (p_inputstr[i] == 'K')) && (i > 0))
 800069e:	687a      	ldr	r2, [r7, #4]
 80006a0:	697b      	ldr	r3, [r7, #20]
 80006a2:	4413      	add	r3, r2
 80006a4:	781b      	ldrb	r3, [r3, #0]
 80006a6:	2b6b      	cmp	r3, #107	; 0x6b
 80006a8:	d005      	beq.n	80006b6 <Str2Int+0x146>
 80006aa:	687a      	ldr	r2, [r7, #4]
 80006ac:	697b      	ldr	r3, [r7, #20]
 80006ae:	4413      	add	r3, r2
 80006b0:	781b      	ldrb	r3, [r3, #0]
 80006b2:	2b4b      	cmp	r3, #75	; 0x4b
 80006b4:	d10b      	bne.n	80006ce <Str2Int+0x15e>
 80006b6:	697b      	ldr	r3, [r7, #20]
 80006b8:	2b00      	cmp	r3, #0
 80006ba:	d008      	beq.n	80006ce <Str2Int+0x15e>
      {
        val = val << 10;
 80006bc:	68fb      	ldr	r3, [r7, #12]
 80006be:	029b      	lsls	r3, r3, #10
 80006c0:	60fb      	str	r3, [r7, #12]
        *p_intnum = val;
 80006c2:	683b      	ldr	r3, [r7, #0]
 80006c4:	68fa      	ldr	r2, [r7, #12]
 80006c6:	601a      	str	r2, [r3, #0]
        res = 1;
 80006c8:	2301      	movs	r3, #1
 80006ca:	613b      	str	r3, [r7, #16]
 80006cc:	e034      	b.n	8000738 <Str2Int+0x1c8>
      }
      else if (((p_inputstr[i] == 'm') || (p_inputstr[i] == 'M')) && (i > 0))
 80006ce:	687a      	ldr	r2, [r7, #4]
 80006d0:	697b      	ldr	r3, [r7, #20]
 80006d2:	4413      	add	r3, r2
 80006d4:	781b      	ldrb	r3, [r3, #0]
 80006d6:	2b6d      	cmp	r3, #109	; 0x6d
 80006d8:	d005      	beq.n	80006e6 <Str2Int+0x176>
 80006da:	687a      	ldr	r2, [r7, #4]
 80006dc:	697b      	ldr	r3, [r7, #20]
 80006de:	4413      	add	r3, r2
 80006e0:	781b      	ldrb	r3, [r3, #0]
 80006e2:	2b4d      	cmp	r3, #77	; 0x4d
 80006e4:	d10b      	bne.n	80006fe <Str2Int+0x18e>
 80006e6:	697b      	ldr	r3, [r7, #20]
 80006e8:	2b00      	cmp	r3, #0
 80006ea:	d008      	beq.n	80006fe <Str2Int+0x18e>
      {
        val = val << 20;
 80006ec:	68fb      	ldr	r3, [r7, #12]
 80006ee:	051b      	lsls	r3, r3, #20
 80006f0:	60fb      	str	r3, [r7, #12]
        *p_intnum = val;
 80006f2:	683b      	ldr	r3, [r7, #0]
 80006f4:	68fa      	ldr	r2, [r7, #12]
 80006f6:	601a      	str	r2, [r3, #0]
        res = 1;
 80006f8:	2301      	movs	r3, #1
 80006fa:	613b      	str	r3, [r7, #16]
 80006fc:	e01c      	b.n	8000738 <Str2Int+0x1c8>
      }
      else if (ISVALIDDEC(p_inputstr[i]))
 80006fe:	687a      	ldr	r2, [r7, #4]
 8000700:	697b      	ldr	r3, [r7, #20]
 8000702:	4413      	add	r3, r2
 8000704:	781b      	ldrb	r3, [r3, #0]
 8000706:	2b2f      	cmp	r3, #47	; 0x2f
 8000708:	d913      	bls.n	8000732 <Str2Int+0x1c2>
 800070a:	687a      	ldr	r2, [r7, #4]
 800070c:	697b      	ldr	r3, [r7, #20]
 800070e:	4413      	add	r3, r2
 8000710:	781b      	ldrb	r3, [r3, #0]
 8000712:	2b39      	cmp	r3, #57	; 0x39
 8000714:	d80d      	bhi.n	8000732 <Str2Int+0x1c2>
      {
        val = val * 10 + CONVERTDEC(p_inputstr[i]);
 8000716:	68fa      	ldr	r2, [r7, #12]
 8000718:	4613      	mov	r3, r2
 800071a:	009b      	lsls	r3, r3, #2
 800071c:	4413      	add	r3, r2
 800071e:	005b      	lsls	r3, r3, #1
 8000720:	4619      	mov	r1, r3
 8000722:	687a      	ldr	r2, [r7, #4]
 8000724:	697b      	ldr	r3, [r7, #20]
 8000726:	4413      	add	r3, r2
 8000728:	781b      	ldrb	r3, [r3, #0]
 800072a:	440b      	add	r3, r1
 800072c:	3b30      	subs	r3, #48	; 0x30
 800072e:	60fb      	str	r3, [r7, #12]
 8000730:	e002      	b.n	8000738 <Str2Int+0x1c8>
      }
      else
      {
        /* return 0, Invalid input */
        res = 0;
 8000732:	2300      	movs	r3, #0
 8000734:	613b      	str	r3, [r7, #16]
        break;
 8000736:	e008      	b.n	800074a <Str2Int+0x1da>
      }
      i++;
 8000738:	697b      	ldr	r3, [r7, #20]
 800073a:	3301      	adds	r3, #1
 800073c:	617b      	str	r3, [r7, #20]
    while ( ( i < 11 ) && ( res != 1 ) )
 800073e:	697b      	ldr	r3, [r7, #20]
 8000740:	2b0a      	cmp	r3, #10
 8000742:	d802      	bhi.n	800074a <Str2Int+0x1da>
 8000744:	693b      	ldr	r3, [r7, #16]
 8000746:	2b01      	cmp	r3, #1
 8000748:	d19d      	bne.n	8000686 <Str2Int+0x116>
    }
  }

  return res;
 800074a:	693b      	ldr	r3, [r7, #16]
}
 800074c:	4618      	mov	r0, r3
 800074e:	371c      	adds	r7, #28
 8000750:	46bd      	mov	sp, r7
 8000752:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000756:	4770      	bx	lr

08000758 <Serial_PutString>:
  * @brief  Print a string on the HyperTerminal
  * @param  p_string: The string to be printed
  * @retval None
  */
void Serial_PutString(uint8_t *p_string)
{
 8000758:	b580      	push	{r7, lr}
 800075a:	b084      	sub	sp, #16
 800075c:	af00      	add	r7, sp, #0
 800075e:	6078      	str	r0, [r7, #4]
  uint16_t length = 0;
 8000760:	2300      	movs	r3, #0
 8000762:	81fb      	strh	r3, [r7, #14]

  while (p_string[length] != '\0')
 8000764:	e002      	b.n	800076c <Serial_PutString+0x14>
  {
    length++;
 8000766:	89fb      	ldrh	r3, [r7, #14]
 8000768:	3301      	adds	r3, #1
 800076a:	81fb      	strh	r3, [r7, #14]
  while (p_string[length] != '\0')
 800076c:	89fb      	ldrh	r3, [r7, #14]
 800076e:	687a      	ldr	r2, [r7, #4]
 8000770:	4413      	add	r3, r2
 8000772:	781b      	ldrb	r3, [r3, #0]
 8000774:	2b00      	cmp	r3, #0
 8000776:	d1f6      	bne.n	8000766 <Serial_PutString+0xe>
  }
  HAL_UART_Transmit(&UartHandle, p_string, length, TX_TIMEOUT);
 8000778:	89fa      	ldrh	r2, [r7, #14]
 800077a:	2364      	movs	r3, #100	; 0x64
 800077c:	6879      	ldr	r1, [r7, #4]
 800077e:	4805      	ldr	r0, [pc, #20]	; (8000794 <Serial_PutString+0x3c>)
 8000780:	f002 fe5b 	bl	800343a <HAL_UART_Transmit>
  HAL_Delay(100);
 8000784:	2064      	movs	r0, #100	; 0x64
 8000786:	f001 fa1d 	bl	8001bc4 <HAL_Delay>
}
 800078a:	bf00      	nop
 800078c:	3710      	adds	r7, #16
 800078e:	46bd      	mov	sp, r7
 8000790:	bd80      	pop	{r7, pc}
 8000792:	bf00      	nop
 8000794:	20000030 	.word	0x20000030

08000798 <Serial_PutByte>:
  * @brief  Transmit a byte to the HyperTerminal
  * @param  param The byte to be sent
  * @retval HAL_StatusTypeDef HAL_OK if OK
  */
HAL_StatusTypeDef Serial_PutByte( uint8_t param )
{
 8000798:	b580      	push	{r7, lr}
 800079a:	b082      	sub	sp, #8
 800079c:	af00      	add	r7, sp, #0
 800079e:	4603      	mov	r3, r0
 80007a0:	71fb      	strb	r3, [r7, #7]
  /* May be timeouted... */
  if ( UartHandle.gState == HAL_UART_STATE_TIMEOUT )
 80007a2:	4b0a      	ldr	r3, [pc, #40]	; (80007cc <Serial_PutByte+0x34>)
 80007a4:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80007a8:	b2db      	uxtb	r3, r3
 80007aa:	2ba0      	cmp	r3, #160	; 0xa0
 80007ac:	d103      	bne.n	80007b6 <Serial_PutByte+0x1e>
  {
    UartHandle.gState = HAL_UART_STATE_READY;
 80007ae:	4b07      	ldr	r3, [pc, #28]	; (80007cc <Serial_PutByte+0x34>)
 80007b0:	2220      	movs	r2, #32
 80007b2:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  }
  return HAL_UART_Transmit(&UartHandle, &param, 1, TX_TIMEOUT);
 80007b6:	1df9      	adds	r1, r7, #7
 80007b8:	2364      	movs	r3, #100	; 0x64
 80007ba:	2201      	movs	r2, #1
 80007bc:	4803      	ldr	r0, [pc, #12]	; (80007cc <Serial_PutByte+0x34>)
 80007be:	f002 fe3c 	bl	800343a <HAL_UART_Transmit>
 80007c2:	4603      	mov	r3, r0
}
 80007c4:	4618      	mov	r0, r3
 80007c6:	3708      	adds	r7, #8
 80007c8:	46bd      	mov	sp, r7
 80007ca:	bd80      	pop	{r7, pc}
 80007cc:	20000030 	.word	0x20000030

080007d0 <FLASH_If_Init>:
  * @brief  Unlocks Flash for write access
  * @param  None
  * @retval None
  */
void FLASH_If_Init(void)
{ 
 80007d0:	b580      	push	{r7, lr}
 80007d2:	af00      	add	r7, sp, #0
  HAL_FLASH_Unlock(); 
 80007d4:	f001 fba0 	bl	8001f18 <HAL_FLASH_Unlock>

  /* Clear pending flags (if any) */  
  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP | FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | 
 80007d8:	4b02      	ldr	r3, [pc, #8]	; (80007e4 <FLASH_If_Init+0x14>)
 80007da:	22f3      	movs	r2, #243	; 0xf3
 80007dc:	60da      	str	r2, [r3, #12]
                         FLASH_FLAG_PGAERR | FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR);
}
 80007de:	bf00      	nop
 80007e0:	bd80      	pop	{r7, pc}
 80007e2:	bf00      	nop
 80007e4:	40023c00 	.word	0x40023c00

080007e8 <FLASH_If_Erase>:
  * @param  StartSector: start of user flash area
  * @retval 0: user flash area successfully erased
  *         1: error occurred
  */
uint32_t FLASH_If_Erase(uint32_t StartSector)
{
 80007e8:	b580      	push	{r7, lr}
 80007ea:	b08a      	sub	sp, #40	; 0x28
 80007ec:	af00      	add	r7, sp, #0
 80007ee:	6078      	str	r0, [r7, #4]
  uint32_t UserStartSector;
  uint32_t SectorError;
  FLASH_EraseInitTypeDef pEraseInit;

  /* Unlock the Flash to enable the flash control register access *************/ 
  FLASH_If_Init();
 80007f0:	f7ff ffee 	bl	80007d0 <FLASH_If_Init>
  
  /* Get the sector where start the user flash area */
  UserStartSector = GetSector(APPLICATION_ADDRESS);
 80007f4:	480e      	ldr	r0, [pc, #56]	; (8000830 <FLASH_If_Erase+0x48>)
 80007f6:	f000 f879 	bl	80008ec <GetSector>
 80007fa:	6278      	str	r0, [r7, #36]	; 0x24
  
  pEraseInit.TypeErase = TYPEERASE_SECTORS;
 80007fc:	2300      	movs	r3, #0
 80007fe:	60fb      	str	r3, [r7, #12]
  pEraseInit.Sector = UserStartSector;
 8000800:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000802:	617b      	str	r3, [r7, #20]
  pEraseInit.NbSectors = 10;
 8000804:	230a      	movs	r3, #10
 8000806:	61bb      	str	r3, [r7, #24]
  pEraseInit.VoltageRange = VOLTAGE_RANGE_3;
 8000808:	2302      	movs	r3, #2
 800080a:	61fb      	str	r3, [r7, #28]
    
  if (HAL_FLASHEx_Erase(&pEraseInit, &SectorError) != HAL_OK)
 800080c:	f107 0220 	add.w	r2, r7, #32
 8000810:	f107 030c 	add.w	r3, r7, #12
 8000814:	4611      	mov	r1, r2
 8000816:	4618      	mov	r0, r3
 8000818:	f001 fd0e 	bl	8002238 <HAL_FLASHEx_Erase>
 800081c:	4603      	mov	r3, r0
 800081e:	2b00      	cmp	r3, #0
 8000820:	d001      	beq.n	8000826 <FLASH_If_Erase+0x3e>
  {
     /* Error occurred while page erase */
     return (1);
 8000822:	2301      	movs	r3, #1
 8000824:	e000      	b.n	8000828 <FLASH_If_Erase+0x40>
  }
  
  return (0);
 8000826:	2300      	movs	r3, #0
}
 8000828:	4618      	mov	r0, r3
 800082a:	3728      	adds	r7, #40	; 0x28
 800082c:	46bd      	mov	sp, r7
 800082e:	bd80      	pop	{r7, pc}
 8000830:	08010000 	.word	0x08010000

08000834 <FLASH_If_Write>:
  * @retval 0: Data successfully written to Flash memory
  *         1: Error occurred while writing data in Flash memory
  *         2: Written Data in flash memory is different from expected one
  */
uint32_t FLASH_If_Write(uint32_t FlashAddress, uint32_t* Data ,uint32_t DataLength)
{
 8000834:	b590      	push	{r4, r7, lr}
 8000836:	b087      	sub	sp, #28
 8000838:	af00      	add	r7, sp, #0
 800083a:	60f8      	str	r0, [r7, #12]
 800083c:	60b9      	str	r1, [r7, #8]
 800083e:	607a      	str	r2, [r7, #4]
  uint32_t i = 0;
 8000840:	2300      	movs	r3, #0
 8000842:	617b      	str	r3, [r7, #20]

  for (i = 0; (i < DataLength) && (FlashAddress <= (USER_FLASH_END_ADDRESS-4)); i++)
 8000844:	2300      	movs	r3, #0
 8000846:	617b      	str	r3, [r7, #20]
 8000848:	e023      	b.n	8000892 <FLASH_If_Write+0x5e>
  {
    /* Device voltage range supposed to be [2.7V to 3.6V], the operation will
       be done by word */ 
    if (HAL_FLASH_Program(TYPEPROGRAM_WORD, FlashAddress, *(uint32_t*)(Data+i)) == HAL_OK)      
 800084a:	697b      	ldr	r3, [r7, #20]
 800084c:	009b      	lsls	r3, r3, #2
 800084e:	68ba      	ldr	r2, [r7, #8]
 8000850:	4413      	add	r3, r2
 8000852:	681b      	ldr	r3, [r3, #0]
 8000854:	f04f 0400 	mov.w	r4, #0
 8000858:	461a      	mov	r2, r3
 800085a:	4623      	mov	r3, r4
 800085c:	68f9      	ldr	r1, [r7, #12]
 800085e:	2002      	movs	r0, #2
 8000860:	f001 fb06 	bl	8001e70 <HAL_FLASH_Program>
 8000864:	4603      	mov	r3, r0
 8000866:	2b00      	cmp	r3, #0
 8000868:	d10e      	bne.n	8000888 <FLASH_If_Write+0x54>
    {
     /* Check the written value */
      if (*(uint32_t*)FlashAddress != *(uint32_t*)(Data+i))
 800086a:	68fb      	ldr	r3, [r7, #12]
 800086c:	681a      	ldr	r2, [r3, #0]
 800086e:	697b      	ldr	r3, [r7, #20]
 8000870:	009b      	lsls	r3, r3, #2
 8000872:	68b9      	ldr	r1, [r7, #8]
 8000874:	440b      	add	r3, r1
 8000876:	681b      	ldr	r3, [r3, #0]
 8000878:	429a      	cmp	r2, r3
 800087a:	d001      	beq.n	8000880 <FLASH_If_Write+0x4c>
      {
        /* Flash content doesn't match SRAM content */
        return(FLASHIF_WRITINGCTRL_ERROR);
 800087c:	2302      	movs	r3, #2
 800087e:	e011      	b.n	80008a4 <FLASH_If_Write+0x70>
      }
      /* Increment FLASH destination address */
      FlashAddress += 4;
 8000880:	68fb      	ldr	r3, [r7, #12]
 8000882:	3304      	adds	r3, #4
 8000884:	60fb      	str	r3, [r7, #12]
 8000886:	e001      	b.n	800088c <FLASH_If_Write+0x58>
    }
    else
    {
      /* Error occurred while writing data in Flash memory */
      return (FLASHIF_WRITING_ERROR);
 8000888:	2303      	movs	r3, #3
 800088a:	e00b      	b.n	80008a4 <FLASH_If_Write+0x70>
  for (i = 0; (i < DataLength) && (FlashAddress <= (USER_FLASH_END_ADDRESS-4)); i++)
 800088c:	697b      	ldr	r3, [r7, #20]
 800088e:	3301      	adds	r3, #1
 8000890:	617b      	str	r3, [r7, #20]
 8000892:	697a      	ldr	r2, [r7, #20]
 8000894:	687b      	ldr	r3, [r7, #4]
 8000896:	429a      	cmp	r2, r3
 8000898:	d203      	bcs.n	80008a2 <FLASH_If_Write+0x6e>
 800089a:	68fb      	ldr	r3, [r7, #12]
 800089c:	4a03      	ldr	r2, [pc, #12]	; (80008ac <FLASH_If_Write+0x78>)
 800089e:	4293      	cmp	r3, r2
 80008a0:	d9d3      	bls.n	800084a <FLASH_If_Write+0x16>
    }
  }

  return (FLASHIF_OK);
 80008a2:	2300      	movs	r3, #0
}
 80008a4:	4618      	mov	r0, r3
 80008a6:	371c      	adds	r7, #28
 80008a8:	46bd      	mov	sp, r7
 80008aa:	bd90      	pop	{r4, r7, pc}
 80008ac:	080ffffb 	.word	0x080ffffb

080008b0 <FLASH_If_GetWriteProtectionStatus>:
  * @param  None
  * @retval 0: No write protected sectors inside the user flash area
  *         1: Some sectors inside the user flash area are write protected
  */
uint16_t FLASH_If_GetWriteProtectionStatus(void)
{
 80008b0:	b580      	push	{r7, lr}
 80008b2:	b088      	sub	sp, #32
 80008b4:	af00      	add	r7, sp, #0
  uint32_t ProtectedSECTOR = 0xFFF;
 80008b6:	f640 73ff 	movw	r3, #4095	; 0xfff
 80008ba:	61fb      	str	r3, [r7, #28]
  FLASH_OBProgramInitTypeDef OptionsBytesStruct;

  /* Unlock the Flash to enable the flash control register access *************/
  HAL_FLASH_Unlock();
 80008bc:	f001 fb2c 	bl	8001f18 <HAL_FLASH_Unlock>

  /* Check if there are write protected sectors inside the user flash area ****/
  HAL_FLASHEx_OBGetConfig(&OptionsBytesStruct);
 80008c0:	463b      	mov	r3, r7
 80008c2:	4618      	mov	r0, r3
 80008c4:	f001 fd96 	bl	80023f4 <HAL_FLASHEx_OBGetConfig>

  /* Lock the Flash to disable the flash control register access (recommended
     to protect the FLASH memory against possible unwanted operation) *********/
  HAL_FLASH_Lock();
 80008c8:	f001 fb48 	bl	8001f5c <HAL_FLASH_Lock>

  /* Get pages already write protected ****************************************/
  ProtectedSECTOR = ~(OptionsBytesStruct.WRPSector) & FLASH_SECTOR_TO_BE_PROTECTED;
 80008cc:	68bb      	ldr	r3, [r7, #8]
 80008ce:	43db      	mvns	r3, r3
 80008d0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80008d4:	61fb      	str	r3, [r7, #28]

  /* Check if desired pages are already write protected ***********************/
  if(ProtectedSECTOR != 0)
 80008d6:	69fb      	ldr	r3, [r7, #28]
 80008d8:	2b00      	cmp	r3, #0
 80008da:	d001      	beq.n	80008e0 <FLASH_If_GetWriteProtectionStatus+0x30>
  {
    /* Some sectors inside the user flash area are write protected */
    return FLASHIF_PROTECTION_WRPENABLED;
 80008dc:	2302      	movs	r3, #2
 80008de:	e000      	b.n	80008e2 <FLASH_If_GetWriteProtectionStatus+0x32>
  }
  else
  { 
    /* No write protected sectors inside the user flash area */
    return FLASHIF_PROTECTION_NONE;
 80008e0:	2300      	movs	r3, #0
  }
}
 80008e2:	4618      	mov	r0, r3
 80008e4:	3720      	adds	r7, #32
 80008e6:	46bd      	mov	sp, r7
 80008e8:	bd80      	pop	{r7, pc}
	...

080008ec <GetSector>:
  * @brief  Gets the sector of a given address
  * @param  Address: Flash address
  * @retval The sector of a given address
  */
static uint32_t GetSector(uint32_t Address)
{
 80008ec:	b480      	push	{r7}
 80008ee:	b085      	sub	sp, #20
 80008f0:	af00      	add	r7, sp, #0
 80008f2:	6078      	str	r0, [r7, #4]
  uint32_t sector = 0;
 80008f4:	2300      	movs	r3, #0
 80008f6:	60fb      	str	r3, [r7, #12]
  
  if((Address < ADDR_FLASH_SECTOR_1) && (Address >= ADDR_FLASH_SECTOR_0))
 80008f8:	687b      	ldr	r3, [r7, #4]
 80008fa:	4a40      	ldr	r2, [pc, #256]	; (80009fc <GetSector+0x110>)
 80008fc:	4293      	cmp	r3, r2
 80008fe:	d806      	bhi.n	800090e <GetSector+0x22>
 8000900:	687b      	ldr	r3, [r7, #4]
 8000902:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8000906:	d302      	bcc.n	800090e <GetSector+0x22>
  {
    sector = FLASH_SECTOR_0;  
 8000908:	2300      	movs	r3, #0
 800090a:	60fb      	str	r3, [r7, #12]
 800090c:	e06f      	b.n	80009ee <GetSector+0x102>
  }
  else if((Address < ADDR_FLASH_SECTOR_2) && (Address >= ADDR_FLASH_SECTOR_1))
 800090e:	687b      	ldr	r3, [r7, #4]
 8000910:	4a3b      	ldr	r2, [pc, #236]	; (8000a00 <GetSector+0x114>)
 8000912:	4293      	cmp	r3, r2
 8000914:	d806      	bhi.n	8000924 <GetSector+0x38>
 8000916:	687b      	ldr	r3, [r7, #4]
 8000918:	4a38      	ldr	r2, [pc, #224]	; (80009fc <GetSector+0x110>)
 800091a:	4293      	cmp	r3, r2
 800091c:	d902      	bls.n	8000924 <GetSector+0x38>
  {
    sector = FLASH_SECTOR_1;  
 800091e:	2301      	movs	r3, #1
 8000920:	60fb      	str	r3, [r7, #12]
 8000922:	e064      	b.n	80009ee <GetSector+0x102>
  }
  else if((Address < ADDR_FLASH_SECTOR_3) && (Address >= ADDR_FLASH_SECTOR_2))
 8000924:	687b      	ldr	r3, [r7, #4]
 8000926:	4a37      	ldr	r2, [pc, #220]	; (8000a04 <GetSector+0x118>)
 8000928:	4293      	cmp	r3, r2
 800092a:	d806      	bhi.n	800093a <GetSector+0x4e>
 800092c:	687b      	ldr	r3, [r7, #4]
 800092e:	4a34      	ldr	r2, [pc, #208]	; (8000a00 <GetSector+0x114>)
 8000930:	4293      	cmp	r3, r2
 8000932:	d902      	bls.n	800093a <GetSector+0x4e>
  {
    sector = FLASH_SECTOR_2;  
 8000934:	2302      	movs	r3, #2
 8000936:	60fb      	str	r3, [r7, #12]
 8000938:	e059      	b.n	80009ee <GetSector+0x102>
  }
  else if((Address < ADDR_FLASH_SECTOR_4) && (Address >= ADDR_FLASH_SECTOR_3))
 800093a:	687b      	ldr	r3, [r7, #4]
 800093c:	4a32      	ldr	r2, [pc, #200]	; (8000a08 <GetSector+0x11c>)
 800093e:	4293      	cmp	r3, r2
 8000940:	d806      	bhi.n	8000950 <GetSector+0x64>
 8000942:	687b      	ldr	r3, [r7, #4]
 8000944:	4a2f      	ldr	r2, [pc, #188]	; (8000a04 <GetSector+0x118>)
 8000946:	4293      	cmp	r3, r2
 8000948:	d902      	bls.n	8000950 <GetSector+0x64>
  {
    sector = FLASH_SECTOR_3;  
 800094a:	2303      	movs	r3, #3
 800094c:	60fb      	str	r3, [r7, #12]
 800094e:	e04e      	b.n	80009ee <GetSector+0x102>
  }
  else if((Address < ADDR_FLASH_SECTOR_5) && (Address >= ADDR_FLASH_SECTOR_4))
 8000950:	687b      	ldr	r3, [r7, #4]
 8000952:	4a2e      	ldr	r2, [pc, #184]	; (8000a0c <GetSector+0x120>)
 8000954:	4293      	cmp	r3, r2
 8000956:	d806      	bhi.n	8000966 <GetSector+0x7a>
 8000958:	687b      	ldr	r3, [r7, #4]
 800095a:	4a2b      	ldr	r2, [pc, #172]	; (8000a08 <GetSector+0x11c>)
 800095c:	4293      	cmp	r3, r2
 800095e:	d902      	bls.n	8000966 <GetSector+0x7a>
  {
    sector = FLASH_SECTOR_4;  
 8000960:	2304      	movs	r3, #4
 8000962:	60fb      	str	r3, [r7, #12]
 8000964:	e043      	b.n	80009ee <GetSector+0x102>
  }
  else if((Address < ADDR_FLASH_SECTOR_6) && (Address >= ADDR_FLASH_SECTOR_5))
 8000966:	687b      	ldr	r3, [r7, #4]
 8000968:	4a29      	ldr	r2, [pc, #164]	; (8000a10 <GetSector+0x124>)
 800096a:	4293      	cmp	r3, r2
 800096c:	d806      	bhi.n	800097c <GetSector+0x90>
 800096e:	687b      	ldr	r3, [r7, #4]
 8000970:	4a26      	ldr	r2, [pc, #152]	; (8000a0c <GetSector+0x120>)
 8000972:	4293      	cmp	r3, r2
 8000974:	d902      	bls.n	800097c <GetSector+0x90>
  {
    sector = FLASH_SECTOR_5;  
 8000976:	2305      	movs	r3, #5
 8000978:	60fb      	str	r3, [r7, #12]
 800097a:	e038      	b.n	80009ee <GetSector+0x102>
  }
  else if((Address < ADDR_FLASH_SECTOR_7) && (Address >= ADDR_FLASH_SECTOR_6))
 800097c:	687b      	ldr	r3, [r7, #4]
 800097e:	4a25      	ldr	r2, [pc, #148]	; (8000a14 <GetSector+0x128>)
 8000980:	4293      	cmp	r3, r2
 8000982:	d806      	bhi.n	8000992 <GetSector+0xa6>
 8000984:	687b      	ldr	r3, [r7, #4]
 8000986:	4a22      	ldr	r2, [pc, #136]	; (8000a10 <GetSector+0x124>)
 8000988:	4293      	cmp	r3, r2
 800098a:	d902      	bls.n	8000992 <GetSector+0xa6>
  {
    sector = FLASH_SECTOR_6;  
 800098c:	2306      	movs	r3, #6
 800098e:	60fb      	str	r3, [r7, #12]
 8000990:	e02d      	b.n	80009ee <GetSector+0x102>
  }
  else if((Address < ADDR_FLASH_SECTOR_8) && (Address >= ADDR_FLASH_SECTOR_7))
 8000992:	687b      	ldr	r3, [r7, #4]
 8000994:	4a20      	ldr	r2, [pc, #128]	; (8000a18 <GetSector+0x12c>)
 8000996:	4293      	cmp	r3, r2
 8000998:	d806      	bhi.n	80009a8 <GetSector+0xbc>
 800099a:	687b      	ldr	r3, [r7, #4]
 800099c:	4a1d      	ldr	r2, [pc, #116]	; (8000a14 <GetSector+0x128>)
 800099e:	4293      	cmp	r3, r2
 80009a0:	d902      	bls.n	80009a8 <GetSector+0xbc>
  {
    sector = FLASH_SECTOR_7;  
 80009a2:	2307      	movs	r3, #7
 80009a4:	60fb      	str	r3, [r7, #12]
 80009a6:	e022      	b.n	80009ee <GetSector+0x102>
  }
  else if((Address < ADDR_FLASH_SECTOR_9) && (Address >= ADDR_FLASH_SECTOR_8))
 80009a8:	687b      	ldr	r3, [r7, #4]
 80009aa:	4a1c      	ldr	r2, [pc, #112]	; (8000a1c <GetSector+0x130>)
 80009ac:	4293      	cmp	r3, r2
 80009ae:	d806      	bhi.n	80009be <GetSector+0xd2>
 80009b0:	687b      	ldr	r3, [r7, #4]
 80009b2:	4a19      	ldr	r2, [pc, #100]	; (8000a18 <GetSector+0x12c>)
 80009b4:	4293      	cmp	r3, r2
 80009b6:	d902      	bls.n	80009be <GetSector+0xd2>
  {
    sector = FLASH_SECTOR_8;  
 80009b8:	2308      	movs	r3, #8
 80009ba:	60fb      	str	r3, [r7, #12]
 80009bc:	e017      	b.n	80009ee <GetSector+0x102>
  }
  else if((Address < ADDR_FLASH_SECTOR_10) && (Address >= ADDR_FLASH_SECTOR_9))
 80009be:	687b      	ldr	r3, [r7, #4]
 80009c0:	4a17      	ldr	r2, [pc, #92]	; (8000a20 <GetSector+0x134>)
 80009c2:	4293      	cmp	r3, r2
 80009c4:	d806      	bhi.n	80009d4 <GetSector+0xe8>
 80009c6:	687b      	ldr	r3, [r7, #4]
 80009c8:	4a14      	ldr	r2, [pc, #80]	; (8000a1c <GetSector+0x130>)
 80009ca:	4293      	cmp	r3, r2
 80009cc:	d902      	bls.n	80009d4 <GetSector+0xe8>
  {
    sector = FLASH_SECTOR_9;  
 80009ce:	2309      	movs	r3, #9
 80009d0:	60fb      	str	r3, [r7, #12]
 80009d2:	e00c      	b.n	80009ee <GetSector+0x102>
  }
  else if((Address < ADDR_FLASH_SECTOR_11) && (Address >= ADDR_FLASH_SECTOR_10))
 80009d4:	687b      	ldr	r3, [r7, #4]
 80009d6:	4a13      	ldr	r2, [pc, #76]	; (8000a24 <GetSector+0x138>)
 80009d8:	4293      	cmp	r3, r2
 80009da:	d806      	bhi.n	80009ea <GetSector+0xfe>
 80009dc:	687b      	ldr	r3, [r7, #4]
 80009de:	4a10      	ldr	r2, [pc, #64]	; (8000a20 <GetSector+0x134>)
 80009e0:	4293      	cmp	r3, r2
 80009e2:	d902      	bls.n	80009ea <GetSector+0xfe>
  {
    sector = FLASH_SECTOR_10;  
 80009e4:	230a      	movs	r3, #10
 80009e6:	60fb      	str	r3, [r7, #12]
 80009e8:	e001      	b.n	80009ee <GetSector+0x102>
  }
  else /*(Address < FLASH_END_ADDR) && (Address >= ADDR_FLASH_SECTOR_11))*/
  {
    sector = FLASH_SECTOR_11;  
 80009ea:	230b      	movs	r3, #11
 80009ec:	60fb      	str	r3, [r7, #12]
  }
  return sector;
 80009ee:	68fb      	ldr	r3, [r7, #12]
}
 80009f0:	4618      	mov	r0, r3
 80009f2:	3714      	adds	r7, #20
 80009f4:	46bd      	mov	sp, r7
 80009f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009fa:	4770      	bx	lr
 80009fc:	08003fff 	.word	0x08003fff
 8000a00:	08007fff 	.word	0x08007fff
 8000a04:	0800bfff 	.word	0x0800bfff
 8000a08:	0800ffff 	.word	0x0800ffff
 8000a0c:	0801ffff 	.word	0x0801ffff
 8000a10:	0803ffff 	.word	0x0803ffff
 8000a14:	0805ffff 	.word	0x0805ffff
 8000a18:	0807ffff 	.word	0x0807ffff
 8000a1c:	0809ffff 	.word	0x0809ffff
 8000a20:	080bffff 	.word	0x080bffff
 8000a24:	080dffff 	.word	0x080dffff

08000a28 <FLASH_If_WriteProtectionConfig>:
  * @brief  Configure the write protection status of user flash area.
  * @param  modifier DISABLE or ENABLE the protection
  * @retval HAL_StatusTypeDef HAL_OK if change is applied.
  */
HAL_StatusTypeDef FLASH_If_WriteProtectionConfig(uint32_t modifier)
{
 8000a28:	b580      	push	{r7, lr}
 8000a2a:	b092      	sub	sp, #72	; 0x48
 8000a2c:	af00      	add	r7, sp, #0
 8000a2e:	6078      	str	r0, [r7, #4]
  uint32_t ProtectedSECTOR = 0xFFF;
 8000a30:	f640 73ff 	movw	r3, #4095	; 0xfff
 8000a34:	647b      	str	r3, [r7, #68]	; 0x44
  FLASH_OBProgramInitTypeDef config_new, config_old;
  HAL_StatusTypeDef result = HAL_OK;
 8000a36:	2300      	movs	r3, #0
 8000a38:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
  
  /* Get pages write protection status ****************************************/
  HAL_FLASHEx_OBGetConfig(&config_old);
 8000a3c:	f107 0308 	add.w	r3, r7, #8
 8000a40:	4618      	mov	r0, r3
 8000a42:	f001 fcd7 	bl	80023f4 <HAL_FLASHEx_OBGetConfig>

  /* The parameter says whether we turn the protection on or off */
  config_new.WRPState = modifier;
 8000a46:	687b      	ldr	r3, [r7, #4]
 8000a48:	62bb      	str	r3, [r7, #40]	; 0x28

  /* We want to modify only the Write protection */
  config_new.OptionType = OPTIONBYTE_WRP;
 8000a4a:	2301      	movs	r3, #1
 8000a4c:	627b      	str	r3, [r7, #36]	; 0x24
  
  /* No read protection, keep BOR and reset settings */
  config_new.RDPLevel = OB_RDP_LEVEL_0;
 8000a4e:	23aa      	movs	r3, #170	; 0xaa
 8000a50:	637b      	str	r3, [r7, #52]	; 0x34
  config_new.USERConfig = config_old.USERConfig;  
 8000a52:	f897 3020 	ldrb.w	r3, [r7, #32]
 8000a56:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
  /* Get pages already write protected ****************************************/
  ProtectedSECTOR = config_old.WRPSector | FLASH_SECTOR_TO_BE_PROTECTED;
 8000a5a:	693b      	ldr	r3, [r7, #16]
 8000a5c:	ea6f 3313 	mvn.w	r3, r3, lsr #12
 8000a60:	ea6f 3303 	mvn.w	r3, r3, lsl #12
 8000a64:	647b      	str	r3, [r7, #68]	; 0x44

  /* Unlock the Flash to enable the flash control register access *************/ 
  HAL_FLASH_Unlock();
 8000a66:	f001 fa57 	bl	8001f18 <HAL_FLASH_Unlock>

  /* Unlock the Options Bytes *************************************************/
  HAL_FLASH_OB_Unlock();
 8000a6a:	f001 fa87 	bl	8001f7c <HAL_FLASH_OB_Unlock>
  
  config_new.WRPSector    = ProtectedSECTOR;
 8000a6e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8000a70:	62fb      	str	r3, [r7, #44]	; 0x2c
  result = HAL_FLASHEx_OBProgram(&config_new);
 8000a72:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a76:	4618      	mov	r0, r3
 8000a78:	f001 fc4e 	bl	8002318 <HAL_FLASHEx_OBProgram>
 8000a7c:	4603      	mov	r3, r0
 8000a7e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
  
  return result;
 8000a82:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
}
 8000a86:	4618      	mov	r0, r3
 8000a88:	3748      	adds	r7, #72	; 0x48
 8000a8a:	46bd      	mov	sp, r7
 8000a8c:	bd80      	pop	{r7, pc}
	...

08000a90 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000a90:	b580      	push	{r7, lr}
 8000a92:	b082      	sub	sp, #8
 8000a94:	af00      	add	r7, sp, #0
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000a96:	f001 f823 	bl	8001ae0 <HAL_Init>

  /* USER CODE BEGIN Init */
  flag = 0;
 8000a9a:	4b1d      	ldr	r3, [pc, #116]	; (8000b10 <main+0x80>)
 8000a9c:	2200      	movs	r2, #0
 8000a9e:	701a      	strb	r2, [r3, #0]
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000aa0:	f000 f846 	bl	8000b30 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000aa4:	f000 f8cc 	bl	8000c40 <MX_GPIO_Init>
  MX_USART6_UART_Init();
 8000aa8:	f000 f8a0 	bl	8000bec <MX_USART6_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_UART_Receive_IT(&huart6, (uint8_t *)aRxBuffer, 7);
 8000aac:	2207      	movs	r2, #7
 8000aae:	4919      	ldr	r1, [pc, #100]	; (8000b14 <main+0x84>)
 8000ab0:	4819      	ldr	r0, [pc, #100]	; (8000b18 <main+0x88>)
 8000ab2:	f002 fe01 	bl	80036b8 <HAL_UART_Receive_IT>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  HAL_Delay(10000);
 8000ab6:	f242 7010 	movw	r0, #10000	; 0x2710
 8000aba:	f001 f883 	bl	8001bc4 <HAL_Delay>
	  if (flag==0)
 8000abe:	4b14      	ldr	r3, [pc, #80]	; (8000b10 <main+0x80>)
 8000ac0:	781b      	ldrb	r3, [r3, #0]
 8000ac2:	f083 0301 	eor.w	r3, r3, #1
 8000ac6:	b2db      	uxtb	r3, r3
 8000ac8:	2b00      	cmp	r3, #0
 8000aca:	d011      	beq.n	8000af0 <main+0x60>
	  {
		  JumpAddress = *(__IO uint32_t*) (APPLICATION_ADDRESS + 4);
 8000acc:	4b13      	ldr	r3, [pc, #76]	; (8000b1c <main+0x8c>)
 8000ace:	681b      	ldr	r3, [r3, #0]
 8000ad0:	4a13      	ldr	r2, [pc, #76]	; (8000b20 <main+0x90>)
 8000ad2:	6013      	str	r3, [r2, #0]
		  JumpToApplication = (pFunction) JumpAddress;
 8000ad4:	4b12      	ldr	r3, [pc, #72]	; (8000b20 <main+0x90>)
 8000ad6:	681b      	ldr	r3, [r3, #0]
 8000ad8:	461a      	mov	r2, r3
 8000ada:	4b12      	ldr	r3, [pc, #72]	; (8000b24 <main+0x94>)
 8000adc:	601a      	str	r2, [r3, #0]
		  /* Initialize user application's Stack Pointer */
		  __set_MSP(*(__IO uint32_t*) APPLICATION_ADDRESS);
 8000ade:	4b12      	ldr	r3, [pc, #72]	; (8000b28 <main+0x98>)
 8000ae0:	681b      	ldr	r3, [r3, #0]
 8000ae2:	607b      	str	r3, [r7, #4]
  \details Assigns the given value to the Main Stack Pointer (MSP).
  \param [in]    topOfMainStack  Main Stack Pointer value to set
 */
__STATIC_FORCEINLINE void __set_MSP(uint32_t topOfMainStack)
{
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
 8000ae4:	687b      	ldr	r3, [r7, #4]
 8000ae6:	f383 8808 	msr	MSP, r3
		  JumpToApplication();
 8000aea:	4b0e      	ldr	r3, [pc, #56]	; (8000b24 <main+0x94>)
 8000aec:	681b      	ldr	r3, [r3, #0]
 8000aee:	4798      	blx	r3
	  }

	  HAL_GPIO_TogglePin(GPIOD,GPIO_PIN_14);
 8000af0:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000af4:	480d      	ldr	r0, [pc, #52]	; (8000b2c <main+0x9c>)
 8000af6:	f001 fffc 	bl	8002af2 <HAL_GPIO_TogglePin>
	  if (flag ==1)
 8000afa:	4b05      	ldr	r3, [pc, #20]	; (8000b10 <main+0x80>)
 8000afc:	781b      	ldrb	r3, [r3, #0]
 8000afe:	2b00      	cmp	r3, #0
 8000b00:	d0d9      	beq.n	8000ab6 <main+0x26>
	  {
		  Main_Menu();
 8000b02:	f000 f9b3 	bl	8000e6c <Main_Menu>
		  flag = 0;
 8000b06:	4b02      	ldr	r3, [pc, #8]	; (8000b10 <main+0x80>)
 8000b08:	2200      	movs	r2, #0
 8000b0a:	701a      	strb	r2, [r3, #0]
	  HAL_Delay(10000);
 8000b0c:	e7d3      	b.n	8000ab6 <main+0x26>
 8000b0e:	bf00      	nop
 8000b10:	20000000 	.word	0x20000000
 8000b14:	20000070 	.word	0x20000070
 8000b18:	20000030 	.word	0x20000030
 8000b1c:	08010004 	.word	0x08010004
 8000b20:	20000078 	.word	0x20000078
 8000b24:	2000007c 	.word	0x2000007c
 8000b28:	08010000 	.word	0x08010000
 8000b2c:	40020c00 	.word	0x40020c00

08000b30 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000b30:	b580      	push	{r7, lr}
 8000b32:	b094      	sub	sp, #80	; 0x50
 8000b34:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000b36:	f107 0320 	add.w	r3, r7, #32
 8000b3a:	2230      	movs	r2, #48	; 0x30
 8000b3c:	2100      	movs	r1, #0
 8000b3e:	4618      	mov	r0, r3
 8000b40:	f003 fc30 	bl	80043a4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000b44:	f107 030c 	add.w	r3, r7, #12
 8000b48:	2200      	movs	r2, #0
 8000b4a:	601a      	str	r2, [r3, #0]
 8000b4c:	605a      	str	r2, [r3, #4]
 8000b4e:	609a      	str	r2, [r3, #8]
 8000b50:	60da      	str	r2, [r3, #12]
 8000b52:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b54:	2300      	movs	r3, #0
 8000b56:	60bb      	str	r3, [r7, #8]
 8000b58:	4b22      	ldr	r3, [pc, #136]	; (8000be4 <SystemClock_Config+0xb4>)
 8000b5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b5c:	4a21      	ldr	r2, [pc, #132]	; (8000be4 <SystemClock_Config+0xb4>)
 8000b5e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000b62:	6413      	str	r3, [r2, #64]	; 0x40
 8000b64:	4b1f      	ldr	r3, [pc, #124]	; (8000be4 <SystemClock_Config+0xb4>)
 8000b66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b68:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b6c:	60bb      	str	r3, [r7, #8]
 8000b6e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000b70:	2300      	movs	r3, #0
 8000b72:	607b      	str	r3, [r7, #4]
 8000b74:	4b1c      	ldr	r3, [pc, #112]	; (8000be8 <SystemClock_Config+0xb8>)
 8000b76:	681b      	ldr	r3, [r3, #0]
 8000b78:	4a1b      	ldr	r2, [pc, #108]	; (8000be8 <SystemClock_Config+0xb8>)
 8000b7a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000b7e:	6013      	str	r3, [r2, #0]
 8000b80:	4b19      	ldr	r3, [pc, #100]	; (8000be8 <SystemClock_Config+0xb8>)
 8000b82:	681b      	ldr	r3, [r3, #0]
 8000b84:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000b88:	607b      	str	r3, [r7, #4]
 8000b8a:	687b      	ldr	r3, [r7, #4]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000b8c:	2302      	movs	r3, #2
 8000b8e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000b90:	2301      	movs	r3, #1
 8000b92:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000b94:	2310      	movs	r3, #16
 8000b96:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000b98:	2300      	movs	r3, #0
 8000b9a:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000b9c:	f107 0320 	add.w	r3, r7, #32
 8000ba0:	4618      	mov	r0, r3
 8000ba2:	f001 ffc1 	bl	8002b28 <HAL_RCC_OscConfig>
 8000ba6:	4603      	mov	r3, r0
 8000ba8:	2b00      	cmp	r3, #0
 8000baa:	d001      	beq.n	8000bb0 <SystemClock_Config+0x80>
  {
    Error_Handler();
 8000bac:	f000 f8c0 	bl	8000d30 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000bb0:	230f      	movs	r3, #15
 8000bb2:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000bb4:	2300      	movs	r3, #0
 8000bb6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000bb8:	2300      	movs	r3, #0
 8000bba:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000bbc:	2300      	movs	r3, #0
 8000bbe:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000bc0:	2300      	movs	r3, #0
 8000bc2:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000bc4:	f107 030c 	add.w	r3, r7, #12
 8000bc8:	2100      	movs	r1, #0
 8000bca:	4618      	mov	r0, r3
 8000bcc:	f002 fa1c 	bl	8003008 <HAL_RCC_ClockConfig>
 8000bd0:	4603      	mov	r3, r0
 8000bd2:	2b00      	cmp	r3, #0
 8000bd4:	d001      	beq.n	8000bda <SystemClock_Config+0xaa>
  {
    Error_Handler();
 8000bd6:	f000 f8ab 	bl	8000d30 <Error_Handler>
  }
}
 8000bda:	bf00      	nop
 8000bdc:	3750      	adds	r7, #80	; 0x50
 8000bde:	46bd      	mov	sp, r7
 8000be0:	bd80      	pop	{r7, pc}
 8000be2:	bf00      	nop
 8000be4:	40023800 	.word	0x40023800
 8000be8:	40007000 	.word	0x40007000

08000bec <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 8000bec:	b580      	push	{r7, lr}
 8000bee:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 8000bf0:	4b11      	ldr	r3, [pc, #68]	; (8000c38 <MX_USART6_UART_Init+0x4c>)
 8000bf2:	4a12      	ldr	r2, [pc, #72]	; (8000c3c <MX_USART6_UART_Init+0x50>)
 8000bf4:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 8000bf6:	4b10      	ldr	r3, [pc, #64]	; (8000c38 <MX_USART6_UART_Init+0x4c>)
 8000bf8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000bfc:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 8000bfe:	4b0e      	ldr	r3, [pc, #56]	; (8000c38 <MX_USART6_UART_Init+0x4c>)
 8000c00:	2200      	movs	r2, #0
 8000c02:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8000c04:	4b0c      	ldr	r3, [pc, #48]	; (8000c38 <MX_USART6_UART_Init+0x4c>)
 8000c06:	2200      	movs	r2, #0
 8000c08:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 8000c0a:	4b0b      	ldr	r3, [pc, #44]	; (8000c38 <MX_USART6_UART_Init+0x4c>)
 8000c0c:	2200      	movs	r2, #0
 8000c0e:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8000c10:	4b09      	ldr	r3, [pc, #36]	; (8000c38 <MX_USART6_UART_Init+0x4c>)
 8000c12:	220c      	movs	r2, #12
 8000c14:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000c16:	4b08      	ldr	r3, [pc, #32]	; (8000c38 <MX_USART6_UART_Init+0x4c>)
 8000c18:	2200      	movs	r2, #0
 8000c1a:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8000c1c:	4b06      	ldr	r3, [pc, #24]	; (8000c38 <MX_USART6_UART_Init+0x4c>)
 8000c1e:	2200      	movs	r2, #0
 8000c20:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 8000c22:	4805      	ldr	r0, [pc, #20]	; (8000c38 <MX_USART6_UART_Init+0x4c>)
 8000c24:	f002 fbbc 	bl	80033a0 <HAL_UART_Init>
 8000c28:	4603      	mov	r3, r0
 8000c2a:	2b00      	cmp	r3, #0
 8000c2c:	d001      	beq.n	8000c32 <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 8000c2e:	f000 f87f 	bl	8000d30 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 8000c32:	bf00      	nop
 8000c34:	bd80      	pop	{r7, pc}
 8000c36:	bf00      	nop
 8000c38:	20000030 	.word	0x20000030
 8000c3c:	40011400 	.word	0x40011400

08000c40 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000c40:	b580      	push	{r7, lr}
 8000c42:	b088      	sub	sp, #32
 8000c44:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c46:	f107 030c 	add.w	r3, r7, #12
 8000c4a:	2200      	movs	r2, #0
 8000c4c:	601a      	str	r2, [r3, #0]
 8000c4e:	605a      	str	r2, [r3, #4]
 8000c50:	609a      	str	r2, [r3, #8]
 8000c52:	60da      	str	r2, [r3, #12]
 8000c54:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c56:	2300      	movs	r3, #0
 8000c58:	60bb      	str	r3, [r7, #8]
 8000c5a:	4b26      	ldr	r3, [pc, #152]	; (8000cf4 <MX_GPIO_Init+0xb4>)
 8000c5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c5e:	4a25      	ldr	r2, [pc, #148]	; (8000cf4 <MX_GPIO_Init+0xb4>)
 8000c60:	f043 0301 	orr.w	r3, r3, #1
 8000c64:	6313      	str	r3, [r2, #48]	; 0x30
 8000c66:	4b23      	ldr	r3, [pc, #140]	; (8000cf4 <MX_GPIO_Init+0xb4>)
 8000c68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c6a:	f003 0301 	and.w	r3, r3, #1
 8000c6e:	60bb      	str	r3, [r7, #8]
 8000c70:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000c72:	2300      	movs	r3, #0
 8000c74:	607b      	str	r3, [r7, #4]
 8000c76:	4b1f      	ldr	r3, [pc, #124]	; (8000cf4 <MX_GPIO_Init+0xb4>)
 8000c78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c7a:	4a1e      	ldr	r2, [pc, #120]	; (8000cf4 <MX_GPIO_Init+0xb4>)
 8000c7c:	f043 0308 	orr.w	r3, r3, #8
 8000c80:	6313      	str	r3, [r2, #48]	; 0x30
 8000c82:	4b1c      	ldr	r3, [pc, #112]	; (8000cf4 <MX_GPIO_Init+0xb4>)
 8000c84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c86:	f003 0308 	and.w	r3, r3, #8
 8000c8a:	607b      	str	r3, [r7, #4]
 8000c8c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000c8e:	2300      	movs	r3, #0
 8000c90:	603b      	str	r3, [r7, #0]
 8000c92:	4b18      	ldr	r3, [pc, #96]	; (8000cf4 <MX_GPIO_Init+0xb4>)
 8000c94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c96:	4a17      	ldr	r2, [pc, #92]	; (8000cf4 <MX_GPIO_Init+0xb4>)
 8000c98:	f043 0304 	orr.w	r3, r3, #4
 8000c9c:	6313      	str	r3, [r2, #48]	; 0x30
 8000c9e:	4b15      	ldr	r3, [pc, #84]	; (8000cf4 <MX_GPIO_Init+0xb4>)
 8000ca0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ca2:	f003 0304 	and.w	r3, r3, #4
 8000ca6:	603b      	str	r3, [r7, #0]
 8000ca8:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);
 8000caa:	2200      	movs	r2, #0
 8000cac:	f44f 4140 	mov.w	r1, #49152	; 0xc000
 8000cb0:	4811      	ldr	r0, [pc, #68]	; (8000cf8 <MX_GPIO_Init+0xb8>)
 8000cb2:	f001 ff05 	bl	8002ac0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000cb6:	2301      	movs	r3, #1
 8000cb8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000cba:	2300      	movs	r3, #0
 8000cbc:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cbe:	2300      	movs	r3, #0
 8000cc0:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000cc2:	f107 030c 	add.w	r3, r7, #12
 8000cc6:	4619      	mov	r1, r3
 8000cc8:	480c      	ldr	r0, [pc, #48]	; (8000cfc <MX_GPIO_Init+0xbc>)
 8000cca:	f001 fd5f 	bl	800278c <HAL_GPIO_Init>

  /*Configure GPIO pins : PD14 PD15 */
  GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 8000cce:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8000cd2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000cd4:	2301      	movs	r3, #1
 8000cd6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cd8:	2300      	movs	r3, #0
 8000cda:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cdc:	2300      	movs	r3, #0
 8000cde:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000ce0:	f107 030c 	add.w	r3, r7, #12
 8000ce4:	4619      	mov	r1, r3
 8000ce6:	4804      	ldr	r0, [pc, #16]	; (8000cf8 <MX_GPIO_Init+0xb8>)
 8000ce8:	f001 fd50 	bl	800278c <HAL_GPIO_Init>

}
 8000cec:	bf00      	nop
 8000cee:	3720      	adds	r7, #32
 8000cf0:	46bd      	mov	sp, r7
 8000cf2:	bd80      	pop	{r7, pc}
 8000cf4:	40023800 	.word	0x40023800
 8000cf8:	40020c00 	.word	0x40020c00
 8000cfc:	40020000 	.word	0x40020000

08000d00 <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8000d00:	b580      	push	{r7, lr}
 8000d02:	b082      	sub	sp, #8
 8000d04:	af00      	add	r7, sp, #0
 8000d06:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file
   */
  HAL_UART_Transmit(&huart6, "IAP START", 9,0x2710);
 8000d08:	f242 7310 	movw	r3, #10000	; 0x2710
 8000d0c:	2209      	movs	r2, #9
 8000d0e:	4905      	ldr	r1, [pc, #20]	; (8000d24 <HAL_UART_RxCpltCallback+0x24>)
 8000d10:	4805      	ldr	r0, [pc, #20]	; (8000d28 <HAL_UART_RxCpltCallback+0x28>)
 8000d12:	f002 fb92 	bl	800343a <HAL_UART_Transmit>
  flag=1;
 8000d16:	4b05      	ldr	r3, [pc, #20]	; (8000d2c <HAL_UART_RxCpltCallback+0x2c>)
 8000d18:	2201      	movs	r2, #1
 8000d1a:	701a      	strb	r2, [r3, #0]

}
 8000d1c:	bf00      	nop
 8000d1e:	3708      	adds	r7, #8
 8000d20:	46bd      	mov	sp, r7
 8000d22:	bd80      	pop	{r7, pc}
 8000d24:	080043cc 	.word	0x080043cc
 8000d28:	20000030 	.word	0x20000030
 8000d2c:	20000000 	.word	0x20000000

08000d30 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000d30:	b480      	push	{r7}
 8000d32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000d34:	bf00      	nop
 8000d36:	46bd      	mov	sp, r7
 8000d38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d3c:	4770      	bx	lr
	...

08000d40 <SerialDownload>:
  * @brief  Download a file via serial port
  * @param  None
  * @retval None
  */
void SerialDownload(void)
{
 8000d40:	b580      	push	{r7, lr}
 8000d42:	b084      	sub	sp, #16
 8000d44:	af00      	add	r7, sp, #0
  uint8_t number[11] = {0};
 8000d46:	1d3b      	adds	r3, r7, #4
 8000d48:	2200      	movs	r2, #0
 8000d4a:	601a      	str	r2, [r3, #0]
 8000d4c:	605a      	str	r2, [r3, #4]
 8000d4e:	f8c3 2007 	str.w	r2, [r3, #7]
  uint32_t size = 0;
 8000d52:	2300      	movs	r3, #0
 8000d54:	603b      	str	r3, [r7, #0]
  COM_StatusTypeDef result;

  Serial_PutString((uint8_t *)"IAP processing");
 8000d56:	4821      	ldr	r0, [pc, #132]	; (8000ddc <SerialDownload+0x9c>)
 8000d58:	f7ff fcfe 	bl	8000758 <Serial_PutString>
  result = Ymodem_Receive( &size );
 8000d5c:	463b      	mov	r3, r7
 8000d5e:	4618      	mov	r0, r3
 8000d60:	f000 fbdc 	bl	800151c <Ymodem_Receive>
 8000d64:	4603      	mov	r3, r0
 8000d66:	73fb      	strb	r3, [r7, #15]
  if (result == COM_OK)
 8000d68:	7bfb      	ldrb	r3, [r7, #15]
 8000d6a:	2b00      	cmp	r3, #0
 8000d6c:	d119      	bne.n	8000da2 <SerialDownload+0x62>
  {
    Serial_PutString((uint8_t *)"\n\n\r Programming Completed Successfully!\n\r--------------------------------\r\n Name: ");
 8000d6e:	481c      	ldr	r0, [pc, #112]	; (8000de0 <SerialDownload+0xa0>)
 8000d70:	f7ff fcf2 	bl	8000758 <Serial_PutString>
    Serial_PutString(aFileName);
 8000d74:	481b      	ldr	r0, [pc, #108]	; (8000de4 <SerialDownload+0xa4>)
 8000d76:	f7ff fcef 	bl	8000758 <Serial_PutString>
    Int2Str(number, size);
 8000d7a:	683a      	ldr	r2, [r7, #0]
 8000d7c:	1d3b      	adds	r3, r7, #4
 8000d7e:	4611      	mov	r1, r2
 8000d80:	4618      	mov	r0, r3
 8000d82:	f7ff fba1 	bl	80004c8 <Int2Str>
    Serial_PutString((uint8_t *)"\n\r Size: ");
 8000d86:	4818      	ldr	r0, [pc, #96]	; (8000de8 <SerialDownload+0xa8>)
 8000d88:	f7ff fce6 	bl	8000758 <Serial_PutString>
    Serial_PutString(number);
 8000d8c:	1d3b      	adds	r3, r7, #4
 8000d8e:	4618      	mov	r0, r3
 8000d90:	f7ff fce2 	bl	8000758 <Serial_PutString>
    Serial_PutString((uint8_t *)" Bytes\r\n");
 8000d94:	4815      	ldr	r0, [pc, #84]	; (8000dec <SerialDownload+0xac>)
 8000d96:	f7ff fcdf 	bl	8000758 <Serial_PutString>
    Serial_PutString((uint8_t *)"-------------------\n");
 8000d9a:	4815      	ldr	r0, [pc, #84]	; (8000df0 <SerialDownload+0xb0>)
 8000d9c:	f7ff fcdc 	bl	8000758 <Serial_PutString>
  }
  else
  {
    Serial_PutString((uint8_t *)"\n\rFailed to receive the file!\n\r");
  }
}
 8000da0:	e017      	b.n	8000dd2 <SerialDownload+0x92>
  else if (result == COM_LIMIT)
 8000da2:	7bfb      	ldrb	r3, [r7, #15]
 8000da4:	2b05      	cmp	r3, #5
 8000da6:	d103      	bne.n	8000db0 <SerialDownload+0x70>
    Serial_PutString((uint8_t *)"\n\n\rThe image size is higher than the allowed space memory!\n\r");
 8000da8:	4812      	ldr	r0, [pc, #72]	; (8000df4 <SerialDownload+0xb4>)
 8000daa:	f7ff fcd5 	bl	8000758 <Serial_PutString>
}
 8000dae:	e010      	b.n	8000dd2 <SerialDownload+0x92>
  else if (result == COM_DATA)
 8000db0:	7bfb      	ldrb	r3, [r7, #15]
 8000db2:	2b04      	cmp	r3, #4
 8000db4:	d103      	bne.n	8000dbe <SerialDownload+0x7e>
    Serial_PutString((uint8_t *)"\n\n\rVerification failed!\n\r");
 8000db6:	4810      	ldr	r0, [pc, #64]	; (8000df8 <SerialDownload+0xb8>)
 8000db8:	f7ff fcce 	bl	8000758 <Serial_PutString>
}
 8000dbc:	e009      	b.n	8000dd2 <SerialDownload+0x92>
  else if (result == COM_ABORT)
 8000dbe:	7bfb      	ldrb	r3, [r7, #15]
 8000dc0:	2b02      	cmp	r3, #2
 8000dc2:	d103      	bne.n	8000dcc <SerialDownload+0x8c>
    Serial_PutString((uint8_t *)"\r\n\nAborted by user.\n\r");
 8000dc4:	480d      	ldr	r0, [pc, #52]	; (8000dfc <SerialDownload+0xbc>)
 8000dc6:	f7ff fcc7 	bl	8000758 <Serial_PutString>
}
 8000dca:	e002      	b.n	8000dd2 <SerialDownload+0x92>
    Serial_PutString((uint8_t *)"\n\rFailed to receive the file!\n\r");
 8000dcc:	480c      	ldr	r0, [pc, #48]	; (8000e00 <SerialDownload+0xc0>)
 8000dce:	f7ff fcc3 	bl	8000758 <Serial_PutString>
}
 8000dd2:	bf00      	nop
 8000dd4:	3710      	adds	r7, #16
 8000dd6:	46bd      	mov	sp, r7
 8000dd8:	bd80      	pop	{r7, pc}
 8000dda:	bf00      	nop
 8000ddc:	080043d8 	.word	0x080043d8
 8000de0:	080043e8 	.word	0x080043e8
 8000de4:	20000080 	.word	0x20000080
 8000de8:	0800443c 	.word	0x0800443c
 8000dec:	08004448 	.word	0x08004448
 8000df0:	08004454 	.word	0x08004454
 8000df4:	0800446c 	.word	0x0800446c
 8000df8:	080044ac 	.word	0x080044ac
 8000dfc:	080044c8 	.word	0x080044c8
 8000e00:	080044e0 	.word	0x080044e0

08000e04 <SerialUpload>:
  * @brief  Upload a file via serial port.
  * @param  None
  * @retval None
  */
void SerialUpload(void)
{
 8000e04:	b580      	push	{r7, lr}
 8000e06:	b082      	sub	sp, #8
 8000e08:	af00      	add	r7, sp, #0
  uint8_t status = 0;
 8000e0a:	2300      	movs	r3, #0
 8000e0c:	71fb      	strb	r3, [r7, #7]

  Serial_PutString((uint8_t *)"\n\n\rSelect Receive File\n\r");
 8000e0e:	4811      	ldr	r0, [pc, #68]	; (8000e54 <SerialUpload+0x50>)
 8000e10:	f7ff fca2 	bl	8000758 <Serial_PutString>

  HAL_UART_Receive(&UartHandle, &status, 1, RX_TIMEOUT);
 8000e14:	1df9      	adds	r1, r7, #7
 8000e16:	f04f 33ff 	mov.w	r3, #4294967295
 8000e1a:	2201      	movs	r2, #1
 8000e1c:	480e      	ldr	r0, [pc, #56]	; (8000e58 <SerialUpload+0x54>)
 8000e1e:	f002 fba5 	bl	800356c <HAL_UART_Receive>
  if ( status == CRC16)
 8000e22:	79fb      	ldrb	r3, [r7, #7]
 8000e24:	2b43      	cmp	r3, #67	; 0x43
 8000e26:	d111      	bne.n	8000e4c <SerialUpload+0x48>
  {
    /* Transmit the flash image through ymodem protocol */
    status = Ymodem_Transmit((uint8_t*)APPLICATION_ADDRESS, (const uint8_t*)"UploadedFlashImage.bin", USER_FLASH_SIZE);
 8000e28:	f44f 2270 	mov.w	r2, #983040	; 0xf0000
 8000e2c:	490b      	ldr	r1, [pc, #44]	; (8000e5c <SerialUpload+0x58>)
 8000e2e:	480c      	ldr	r0, [pc, #48]	; (8000e60 <SerialUpload+0x5c>)
 8000e30:	f000 fc9c 	bl	800176c <Ymodem_Transmit>
 8000e34:	4603      	mov	r3, r0
 8000e36:	71fb      	strb	r3, [r7, #7]

    if (status != 0)
 8000e38:	79fb      	ldrb	r3, [r7, #7]
 8000e3a:	2b00      	cmp	r3, #0
 8000e3c:	d003      	beq.n	8000e46 <SerialUpload+0x42>
    {
      Serial_PutString((uint8_t *)"\n\rError Occurred while Transmitting File\n\r");
 8000e3e:	4809      	ldr	r0, [pc, #36]	; (8000e64 <SerialUpload+0x60>)
 8000e40:	f7ff fc8a 	bl	8000758 <Serial_PutString>
    else
    {
      Serial_PutString((uint8_t *)"\n\rFile uploaded successfully \n\r");
    }
  }
}
 8000e44:	e002      	b.n	8000e4c <SerialUpload+0x48>
      Serial_PutString((uint8_t *)"\n\rFile uploaded successfully \n\r");
 8000e46:	4808      	ldr	r0, [pc, #32]	; (8000e68 <SerialUpload+0x64>)
 8000e48:	f7ff fc86 	bl	8000758 <Serial_PutString>
}
 8000e4c:	bf00      	nop
 8000e4e:	3708      	adds	r7, #8
 8000e50:	46bd      	mov	sp, r7
 8000e52:	bd80      	pop	{r7, pc}
 8000e54:	08004500 	.word	0x08004500
 8000e58:	20000030 	.word	0x20000030
 8000e5c:	0800451c 	.word	0x0800451c
 8000e60:	08010000 	.word	0x08010000
 8000e64:	08004534 	.word	0x08004534
 8000e68:	08004560 	.word	0x08004560

08000e6c <Main_Menu>:
  * @brief  Display the Main Menu on HyperTerminal
  * @param  None
  * @retval None
  */
void Main_Menu(void)
{
 8000e6c:	b580      	push	{r7, lr}
 8000e6e:	b082      	sub	sp, #8
 8000e70:	af00      	add	r7, sp, #0

  uint8_t key = 0;
 8000e72:	2300      	movs	r3, #0
 8000e74:	70fb      	strb	r3, [r7, #3]
  HAL_Delay(500);
 8000e76:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000e7a:	f000 fea3 	bl	8001bc4 <HAL_Delay>
  while (1)
  {

    /* Test if any sector of Flash memory where user application will be loaded is write protected */

    FlashProtection = FLASH_If_GetWriteProtectionStatus();
 8000e7e:	f7ff fd17 	bl	80008b0 <FLASH_If_GetWriteProtectionStatus>
 8000e82:	4603      	mov	r3, r0
 8000e84:	461a      	mov	r2, r3
 8000e86:	4b4b      	ldr	r3, [pc, #300]	; (8000fb4 <Main_Menu+0x148>)
 8000e88:	601a      	str	r2, [r3, #0]
    
    Serial_PutString((uint8_t *)"\r\n=================== Main Menu ============================\r\n");
 8000e8a:	484b      	ldr	r0, [pc, #300]	; (8000fb8 <Main_Menu+0x14c>)
 8000e8c:	f7ff fc64 	bl	8000758 <Serial_PutString>
    Serial_PutString((uint8_t *)"  Download image to the internal Flash ----------------- 1\r\n");
 8000e90:	484a      	ldr	r0, [pc, #296]	; (8000fbc <Main_Menu+0x150>)
 8000e92:	f7ff fc61 	bl	8000758 <Serial_PutString>
    Serial_PutString((uint8_t *)"  Upload image from the internal Flash ----------------- 2\r\n");
 8000e96:	484a      	ldr	r0, [pc, #296]	; (8000fc0 <Main_Menu+0x154>)
 8000e98:	f7ff fc5e 	bl	8000758 <Serial_PutString>
    Serial_PutString((uint8_t *)"  Execute the loaded application ----------------------- 3\r\n");
 8000e9c:	4849      	ldr	r0, [pc, #292]	; (8000fc4 <Main_Menu+0x158>)
 8000e9e:	f7ff fc5b 	bl	8000758 <Serial_PutString>

    if(FlashProtection != FLASHIF_PROTECTION_NONE)
 8000ea2:	4b44      	ldr	r3, [pc, #272]	; (8000fb4 <Main_Menu+0x148>)
 8000ea4:	681b      	ldr	r3, [r3, #0]
 8000ea6:	2b00      	cmp	r3, #0
 8000ea8:	d003      	beq.n	8000eb2 <Main_Menu+0x46>
    {
      Serial_PutString((uint8_t *)"  Disable the write protection ------------------------- 4\r\n");
 8000eaa:	4847      	ldr	r0, [pc, #284]	; (8000fc8 <Main_Menu+0x15c>)
 8000eac:	f7ff fc54 	bl	8000758 <Serial_PutString>
 8000eb0:	e002      	b.n	8000eb8 <Main_Menu+0x4c>
    }
    else
    {
      Serial_PutString((uint8_t *)"  Enable the write protection -------------------------- 4\r\n");
 8000eb2:	4846      	ldr	r0, [pc, #280]	; (8000fcc <Main_Menu+0x160>)
 8000eb4:	f7ff fc50 	bl	8000758 <Serial_PutString>
    }
    Serial_PutString((uint8_t *)"==========================================================\r\n");
 8000eb8:	4845      	ldr	r0, [pc, #276]	; (8000fd0 <Main_Menu+0x164>)
 8000eba:	f7ff fc4d 	bl	8000758 <Serial_PutString>
    Serial_PutString((uint8_t *)"okay");
 8000ebe:	4845      	ldr	r0, [pc, #276]	; (8000fd4 <Main_Menu+0x168>)
 8000ec0:	f7ff fc4a 	bl	8000758 <Serial_PutString>

    /* Clean the input path */
    __HAL_UART_FLUSH_DRREGISTER(&UartHandle);
 8000ec4:	4b44      	ldr	r3, [pc, #272]	; (8000fd8 <Main_Menu+0x16c>)
 8000ec6:	681b      	ldr	r3, [r3, #0]
 8000ec8:	685b      	ldr	r3, [r3, #4]
	
    /* Receive key */
    //char aa = HAL_UART_Receive(&UartHandle, &key, 1, RX_TIMEOUT);
    //0x7530); //time out 30s
    if (HAL_UART_Receive(&UartHandle, &key, 1,0x2710) == HAL_TIMEOUT)
 8000eca:	1cf9      	adds	r1, r7, #3
 8000ecc:	f242 7310 	movw	r3, #10000	; 0x2710
 8000ed0:	2201      	movs	r2, #1
 8000ed2:	4841      	ldr	r0, [pc, #260]	; (8000fd8 <Main_Menu+0x16c>)
 8000ed4:	f002 fb4a 	bl	800356c <HAL_UART_Receive>
 8000ed8:	4603      	mov	r3, r0
 8000eda:	2b03      	cmp	r3, #3
 8000edc:	d108      	bne.n	8000ef0 <Main_Menu+0x84>
    {
    	Serial_PutString((uint8_t *)"  Time out \r\n\n");
 8000ede:	483f      	ldr	r0, [pc, #252]	; (8000fdc <Main_Menu+0x170>)
 8000ee0:	f7ff fc3a 	bl	8000758 <Serial_PutString>
    	HAL_UART_Receive_IT(&huart6, (uint8_t *)aRxBuffer, 1);
 8000ee4:	2201      	movs	r2, #1
 8000ee6:	493e      	ldr	r1, [pc, #248]	; (8000fe0 <Main_Menu+0x174>)
 8000ee8:	483b      	ldr	r0, [pc, #236]	; (8000fd8 <Main_Menu+0x16c>)
 8000eea:	f002 fbe5 	bl	80036b8 <HAL_UART_Receive_IT>
    	break;
 8000eee:	e05c      	b.n	8000faa <Main_Menu+0x13e>
    }
    switch (key)
 8000ef0:	78fb      	ldrb	r3, [r7, #3]
 8000ef2:	3b31      	subs	r3, #49	; 0x31
 8000ef4:	2b03      	cmp	r3, #3
 8000ef6:	d853      	bhi.n	8000fa0 <Main_Menu+0x134>
 8000ef8:	a201      	add	r2, pc, #4	; (adr r2, 8000f00 <Main_Menu+0x94>)
 8000efa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000efe:	bf00      	nop
 8000f00:	08000f11 	.word	0x08000f11
 8000f04:	08000f17 	.word	0x08000f17
 8000f08:	08000f1d 	.word	0x08000f1d
 8000f0c:	08000f49 	.word	0x08000f49
    {
    case '1' :
      /* Download user application in the Flash */
      SerialDownload();
 8000f10:	f7ff ff16 	bl	8000d40 <SerialDownload>
      break;
 8000f14:	e048      	b.n	8000fa8 <Main_Menu+0x13c>
    case '2' :
      /* Upload user application from the Flash */
      SerialUpload();
 8000f16:	f7ff ff75 	bl	8000e04 <SerialUpload>
      break;
 8000f1a:	e045      	b.n	8000fa8 <Main_Menu+0x13c>
    case '3' :
      //
      Serial_PutString((uint8_t *)"Start program execution......\r\n");
 8000f1c:	4831      	ldr	r0, [pc, #196]	; (8000fe4 <Main_Menu+0x178>)
 8000f1e:	f7ff fc1b 	bl	8000758 <Serial_PutString>
      /* execute the new program */
      JumpAddress = *(__IO uint32_t*) (APPLICATION_ADDRESS + 4);
 8000f22:	4b31      	ldr	r3, [pc, #196]	; (8000fe8 <Main_Menu+0x17c>)
 8000f24:	681b      	ldr	r3, [r3, #0]
 8000f26:	4a31      	ldr	r2, [pc, #196]	; (8000fec <Main_Menu+0x180>)
 8000f28:	6013      	str	r3, [r2, #0]
      /* Jump to user application */
      JumpToApplication = (pFunction) JumpAddress;
 8000f2a:	4b30      	ldr	r3, [pc, #192]	; (8000fec <Main_Menu+0x180>)
 8000f2c:	681b      	ldr	r3, [r3, #0]
 8000f2e:	461a      	mov	r2, r3
 8000f30:	4b2f      	ldr	r3, [pc, #188]	; (8000ff0 <Main_Menu+0x184>)
 8000f32:	601a      	str	r2, [r3, #0]
      /* Initialize user application's Stack Pointer */
      __set_MSP(*(__IO uint32_t*) APPLICATION_ADDRESS);
 8000f34:	4b2f      	ldr	r3, [pc, #188]	; (8000ff4 <Main_Menu+0x188>)
 8000f36:	681b      	ldr	r3, [r3, #0]
 8000f38:	607b      	str	r3, [r7, #4]
 8000f3a:	687b      	ldr	r3, [r7, #4]
 8000f3c:	f383 8808 	msr	MSP, r3
      //__disable_irq();
      JumpToApplication();
 8000f40:	4b2b      	ldr	r3, [pc, #172]	; (8000ff0 <Main_Menu+0x184>)
 8000f42:	681b      	ldr	r3, [r3, #0]
 8000f44:	4798      	blx	r3

      break;
 8000f46:	e02f      	b.n	8000fa8 <Main_Menu+0x13c>
    case '4' :
      if (FlashProtection != FLASHIF_PROTECTION_NONE)
 8000f48:	4b1a      	ldr	r3, [pc, #104]	; (8000fb4 <Main_Menu+0x148>)
 8000f4a:	681b      	ldr	r3, [r3, #0]
 8000f4c:	2b00      	cmp	r3, #0
 8000f4e:	d014      	beq.n	8000f7a <Main_Menu+0x10e>
      {
        /* Disable the write protection */
        if (FLASH_If_WriteProtectionConfig(OB_WRPSTATE_DISABLE) == HAL_OK)
 8000f50:	2000      	movs	r0, #0
 8000f52:	f7ff fd69 	bl	8000a28 <FLASH_If_WriteProtectionConfig>
 8000f56:	4603      	mov	r3, r0
 8000f58:	2b00      	cmp	r3, #0
 8000f5a:	d10a      	bne.n	8000f72 <Main_Menu+0x106>
        {
          Serial_PutString((uint8_t *)"Write Protection disabled...\r\n");
 8000f5c:	4826      	ldr	r0, [pc, #152]	; (8000ff8 <Main_Menu+0x18c>)
 8000f5e:	f7ff fbfb 	bl	8000758 <Serial_PutString>
          Serial_PutString((uint8_t *)"System will now restart...\r\n");
 8000f62:	4826      	ldr	r0, [pc, #152]	; (8000ffc <Main_Menu+0x190>)
 8000f64:	f7ff fbf8 	bl	8000758 <Serial_PutString>
          /* Launch the option byte loading */
          HAL_FLASH_OB_Launch();
 8000f68:	f001 f824 	bl	8001fb4 <HAL_FLASH_OB_Launch>
          /* Ulock the flash */
          HAL_FLASH_Unlock();
 8000f6c:	f000 ffd4 	bl	8001f18 <HAL_FLASH_Unlock>
        else
        {
          Serial_PutString((uint8_t *)"Error: Flash write protection failed...\r\n");
        }
      }
      break;
 8000f70:	e01a      	b.n	8000fa8 <Main_Menu+0x13c>
          Serial_PutString((uint8_t *)"Error: Flash write un-protection failed...\r\n");
 8000f72:	4823      	ldr	r0, [pc, #140]	; (8001000 <Main_Menu+0x194>)
 8000f74:	f7ff fbf0 	bl	8000758 <Serial_PutString>
      break;
 8000f78:	e016      	b.n	8000fa8 <Main_Menu+0x13c>
        if (FLASH_If_WriteProtectionConfig(OB_WRPSTATE_ENABLE) == HAL_OK)
 8000f7a:	2001      	movs	r0, #1
 8000f7c:	f7ff fd54 	bl	8000a28 <FLASH_If_WriteProtectionConfig>
 8000f80:	4603      	mov	r3, r0
 8000f82:	2b00      	cmp	r3, #0
 8000f84:	d108      	bne.n	8000f98 <Main_Menu+0x12c>
          Serial_PutString((uint8_t *)"Write Protection enabled...\r\n");
 8000f86:	481f      	ldr	r0, [pc, #124]	; (8001004 <Main_Menu+0x198>)
 8000f88:	f7ff fbe6 	bl	8000758 <Serial_PutString>
          Serial_PutString((uint8_t *)"System will now restart...\r\n");
 8000f8c:	481b      	ldr	r0, [pc, #108]	; (8000ffc <Main_Menu+0x190>)
 8000f8e:	f7ff fbe3 	bl	8000758 <Serial_PutString>
          HAL_FLASH_OB_Launch();
 8000f92:	f001 f80f 	bl	8001fb4 <HAL_FLASH_OB_Launch>
      break;
 8000f96:	e007      	b.n	8000fa8 <Main_Menu+0x13c>
          Serial_PutString((uint8_t *)"Error: Flash write protection failed...\r\n");
 8000f98:	481b      	ldr	r0, [pc, #108]	; (8001008 <Main_Menu+0x19c>)
 8000f9a:	f7ff fbdd 	bl	8000758 <Serial_PutString>
      break;
 8000f9e:	e003      	b.n	8000fa8 <Main_Menu+0x13c>
    default:
	Serial_PutString((uint8_t *)"Invalid Number ! ==> The number should be either 1, 2, 3 or 4\r");
 8000fa0:	481a      	ldr	r0, [pc, #104]	; (800100c <Main_Menu+0x1a0>)
 8000fa2:	f7ff fbd9 	bl	8000758 <Serial_PutString>
	break;
 8000fa6:	bf00      	nop
    FlashProtection = FLASH_If_GetWriteProtectionStatus();
 8000fa8:	e769      	b.n	8000e7e <Main_Menu+0x12>
    }
  }
}
 8000faa:	bf00      	nop
 8000fac:	3708      	adds	r7, #8
 8000fae:	46bd      	mov	sp, r7
 8000fb0:	bd80      	pop	{r7, pc}
 8000fb2:	bf00      	nop
 8000fb4:	2000002c 	.word	0x2000002c
 8000fb8:	08004580 	.word	0x08004580
 8000fbc:	080045c0 	.word	0x080045c0
 8000fc0:	08004600 	.word	0x08004600
 8000fc4:	08004640 	.word	0x08004640
 8000fc8:	08004680 	.word	0x08004680
 8000fcc:	080046c0 	.word	0x080046c0
 8000fd0:	08004700 	.word	0x08004700
 8000fd4:	08004740 	.word	0x08004740
 8000fd8:	20000030 	.word	0x20000030
 8000fdc:	08004748 	.word	0x08004748
 8000fe0:	20000070 	.word	0x20000070
 8000fe4:	08004758 	.word	0x08004758
 8000fe8:	08010004 	.word	0x08010004
 8000fec:	20000078 	.word	0x20000078
 8000ff0:	2000007c 	.word	0x2000007c
 8000ff4:	08010000 	.word	0x08010000
 8000ff8:	08004778 	.word	0x08004778
 8000ffc:	08004798 	.word	0x08004798
 8001000:	080047b8 	.word	0x080047b8
 8001004:	080047e8 	.word	0x080047e8
 8001008:	08004808 	.word	0x08004808
 800100c:	08004834 	.word	0x08004834

08001010 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001010:	b480      	push	{r7}
 8001012:	b083      	sub	sp, #12
 8001014:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001016:	2300      	movs	r3, #0
 8001018:	607b      	str	r3, [r7, #4]
 800101a:	4b10      	ldr	r3, [pc, #64]	; (800105c <HAL_MspInit+0x4c>)
 800101c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800101e:	4a0f      	ldr	r2, [pc, #60]	; (800105c <HAL_MspInit+0x4c>)
 8001020:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001024:	6453      	str	r3, [r2, #68]	; 0x44
 8001026:	4b0d      	ldr	r3, [pc, #52]	; (800105c <HAL_MspInit+0x4c>)
 8001028:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800102a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800102e:	607b      	str	r3, [r7, #4]
 8001030:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001032:	2300      	movs	r3, #0
 8001034:	603b      	str	r3, [r7, #0]
 8001036:	4b09      	ldr	r3, [pc, #36]	; (800105c <HAL_MspInit+0x4c>)
 8001038:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800103a:	4a08      	ldr	r2, [pc, #32]	; (800105c <HAL_MspInit+0x4c>)
 800103c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001040:	6413      	str	r3, [r2, #64]	; 0x40
 8001042:	4b06      	ldr	r3, [pc, #24]	; (800105c <HAL_MspInit+0x4c>)
 8001044:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001046:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800104a:	603b      	str	r3, [r7, #0]
 800104c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800104e:	bf00      	nop
 8001050:	370c      	adds	r7, #12
 8001052:	46bd      	mov	sp, r7
 8001054:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001058:	4770      	bx	lr
 800105a:	bf00      	nop
 800105c:	40023800 	.word	0x40023800

08001060 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001060:	b580      	push	{r7, lr}
 8001062:	b08a      	sub	sp, #40	; 0x28
 8001064:	af00      	add	r7, sp, #0
 8001066:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001068:	f107 0314 	add.w	r3, r7, #20
 800106c:	2200      	movs	r2, #0
 800106e:	601a      	str	r2, [r3, #0]
 8001070:	605a      	str	r2, [r3, #4]
 8001072:	609a      	str	r2, [r3, #8]
 8001074:	60da      	str	r2, [r3, #12]
 8001076:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART6)
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	681b      	ldr	r3, [r3, #0]
 800107c:	4a1d      	ldr	r2, [pc, #116]	; (80010f4 <HAL_UART_MspInit+0x94>)
 800107e:	4293      	cmp	r3, r2
 8001080:	d133      	bne.n	80010ea <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART6_MspInit 0 */

  /* USER CODE END USART6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART6_CLK_ENABLE();
 8001082:	2300      	movs	r3, #0
 8001084:	613b      	str	r3, [r7, #16]
 8001086:	4b1c      	ldr	r3, [pc, #112]	; (80010f8 <HAL_UART_MspInit+0x98>)
 8001088:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800108a:	4a1b      	ldr	r2, [pc, #108]	; (80010f8 <HAL_UART_MspInit+0x98>)
 800108c:	f043 0320 	orr.w	r3, r3, #32
 8001090:	6453      	str	r3, [r2, #68]	; 0x44
 8001092:	4b19      	ldr	r3, [pc, #100]	; (80010f8 <HAL_UART_MspInit+0x98>)
 8001094:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001096:	f003 0320 	and.w	r3, r3, #32
 800109a:	613b      	str	r3, [r7, #16]
 800109c:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800109e:	2300      	movs	r3, #0
 80010a0:	60fb      	str	r3, [r7, #12]
 80010a2:	4b15      	ldr	r3, [pc, #84]	; (80010f8 <HAL_UART_MspInit+0x98>)
 80010a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010a6:	4a14      	ldr	r2, [pc, #80]	; (80010f8 <HAL_UART_MspInit+0x98>)
 80010a8:	f043 0304 	orr.w	r3, r3, #4
 80010ac:	6313      	str	r3, [r2, #48]	; 0x30
 80010ae:	4b12      	ldr	r3, [pc, #72]	; (80010f8 <HAL_UART_MspInit+0x98>)
 80010b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010b2:	f003 0304 	and.w	r3, r3, #4
 80010b6:	60fb      	str	r3, [r7, #12]
 80010b8:	68fb      	ldr	r3, [r7, #12]
    /**USART6 GPIO Configuration    
    PC6     ------> USART6_TX
    PC7     ------> USART6_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80010ba:	23c0      	movs	r3, #192	; 0xc0
 80010bc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010be:	2302      	movs	r3, #2
 80010c0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80010c2:	2301      	movs	r3, #1
 80010c4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80010c6:	2303      	movs	r3, #3
 80010c8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 80010ca:	2308      	movs	r3, #8
 80010cc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80010ce:	f107 0314 	add.w	r3, r7, #20
 80010d2:	4619      	mov	r1, r3
 80010d4:	4809      	ldr	r0, [pc, #36]	; (80010fc <HAL_UART_MspInit+0x9c>)
 80010d6:	f001 fb59 	bl	800278c <HAL_GPIO_Init>

    /* USART6 interrupt Init */
    HAL_NVIC_SetPriority(USART6_IRQn, 1, 0);
 80010da:	2200      	movs	r2, #0
 80010dc:	2101      	movs	r1, #1
 80010de:	2047      	movs	r0, #71	; 0x47
 80010e0:	f000 fe6d 	bl	8001dbe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
 80010e4:	2047      	movs	r0, #71	; 0x47
 80010e6:	f000 fe86 	bl	8001df6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 80010ea:	bf00      	nop
 80010ec:	3728      	adds	r7, #40	; 0x28
 80010ee:	46bd      	mov	sp, r7
 80010f0:	bd80      	pop	{r7, pc}
 80010f2:	bf00      	nop
 80010f4:	40011400 	.word	0x40011400
 80010f8:	40023800 	.word	0x40023800
 80010fc:	40020800 	.word	0x40020800

08001100 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001100:	b480      	push	{r7}
 8001102:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8001104:	bf00      	nop
 8001106:	46bd      	mov	sp, r7
 8001108:	f85d 7b04 	ldr.w	r7, [sp], #4
 800110c:	4770      	bx	lr

0800110e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800110e:	b480      	push	{r7}
 8001110:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001112:	e7fe      	b.n	8001112 <HardFault_Handler+0x4>

08001114 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001114:	b480      	push	{r7}
 8001116:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001118:	e7fe      	b.n	8001118 <MemManage_Handler+0x4>

0800111a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800111a:	b480      	push	{r7}
 800111c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800111e:	e7fe      	b.n	800111e <BusFault_Handler+0x4>

08001120 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001120:	b480      	push	{r7}
 8001122:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001124:	e7fe      	b.n	8001124 <UsageFault_Handler+0x4>

08001126 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001126:	b480      	push	{r7}
 8001128:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800112a:	bf00      	nop
 800112c:	46bd      	mov	sp, r7
 800112e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001132:	4770      	bx	lr

08001134 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001134:	b480      	push	{r7}
 8001136:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001138:	bf00      	nop
 800113a:	46bd      	mov	sp, r7
 800113c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001140:	4770      	bx	lr

08001142 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001142:	b480      	push	{r7}
 8001144:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001146:	bf00      	nop
 8001148:	46bd      	mov	sp, r7
 800114a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800114e:	4770      	bx	lr

08001150 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001150:	b580      	push	{r7, lr}
 8001152:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001154:	f000 fd16 	bl	8001b84 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001158:	bf00      	nop
 800115a:	bd80      	pop	{r7, pc}

0800115c <USART6_IRQHandler>:

/**
  * @brief This function handles USART6 global interrupt.
  */
void USART6_IRQHandler(void)
{
 800115c:	b580      	push	{r7, lr}
 800115e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART6_IRQn 0 */

  /* USER CODE END USART6_IRQn 0 */
  HAL_UART_IRQHandler(&huart6);
 8001160:	4802      	ldr	r0, [pc, #8]	; (800116c <USART6_IRQHandler+0x10>)
 8001162:	f002 faff 	bl	8003764 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART6_IRQn 1 */

  /* USER CODE END USART6_IRQn 1 */
}
 8001166:	bf00      	nop
 8001168:	bd80      	pop	{r7, pc}
 800116a:	bf00      	nop
 800116c:	20000030 	.word	0x20000030

08001170 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001170:	b480      	push	{r7}
 8001172:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001174:	4b08      	ldr	r3, [pc, #32]	; (8001198 <SystemInit+0x28>)
 8001176:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800117a:	4a07      	ldr	r2, [pc, #28]	; (8001198 <SystemInit+0x28>)
 800117c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001180:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001184:	4b04      	ldr	r3, [pc, #16]	; (8001198 <SystemInit+0x28>)
 8001186:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800118a:	609a      	str	r2, [r3, #8]
#endif
}
 800118c:	bf00      	nop
 800118e:	46bd      	mov	sp, r7
 8001190:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001194:	4770      	bx	lr
 8001196:	bf00      	nop
 8001198:	e000ed00 	.word	0xe000ed00

0800119c <ReceivePacket>:
  * @param  timeout
  * @retval HAL_OK: normally return
  *         HAL_BUSY: abort by user
  */
static HAL_StatusTypeDef ReceivePacket(uint8_t *p_data, uint32_t *p_length, uint32_t timeout)
{
 800119c:	b580      	push	{r7, lr}
 800119e:	b088      	sub	sp, #32
 80011a0:	af00      	add	r7, sp, #0
 80011a2:	60f8      	str	r0, [r7, #12]
 80011a4:	60b9      	str	r1, [r7, #8]
 80011a6:	607a      	str	r2, [r7, #4]
  uint32_t crc;
  uint32_t packet_size = 0;
 80011a8:	2300      	movs	r3, #0
 80011aa:	61fb      	str	r3, [r7, #28]
  HAL_StatusTypeDef status;
  uint8_t char1;

  *p_length = 0;
 80011ac:	68bb      	ldr	r3, [r7, #8]
 80011ae:	2200      	movs	r2, #0
 80011b0:	601a      	str	r2, [r3, #0]
  status = HAL_UART_Receive(&UartHandle, &char1, 1, timeout);
 80011b2:	f107 0113 	add.w	r1, r7, #19
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	2201      	movs	r2, #1
 80011ba:	4844      	ldr	r0, [pc, #272]	; (80012cc <ReceivePacket+0x130>)
 80011bc:	f002 f9d6 	bl	800356c <HAL_UART_Receive>
 80011c0:	4603      	mov	r3, r0
 80011c2:	76fb      	strb	r3, [r7, #27]

  if (status == HAL_OK)
 80011c4:	7efb      	ldrb	r3, [r7, #27]
 80011c6:	2b00      	cmp	r3, #0
 80011c8:	d177      	bne.n	80012ba <ReceivePacket+0x11e>
  {
    switch (char1)
 80011ca:	7cfb      	ldrb	r3, [r7, #19]
 80011cc:	2b04      	cmp	r3, #4
 80011ce:	d02d      	beq.n	800122c <ReceivePacket+0x90>
 80011d0:	2b04      	cmp	r3, #4
 80011d2:	dc04      	bgt.n	80011de <ReceivePacket+0x42>
 80011d4:	2b01      	cmp	r3, #1
 80011d6:	d009      	beq.n	80011ec <ReceivePacket+0x50>
 80011d8:	2b02      	cmp	r3, #2
 80011da:	d00a      	beq.n	80011f2 <ReceivePacket+0x56>
 80011dc:	e023      	b.n	8001226 <ReceivePacket+0x8a>
 80011de:	2b41      	cmp	r3, #65	; 0x41
 80011e0:	d01e      	beq.n	8001220 <ReceivePacket+0x84>
 80011e2:	2b61      	cmp	r3, #97	; 0x61
 80011e4:	d01c      	beq.n	8001220 <ReceivePacket+0x84>
 80011e6:	2b18      	cmp	r3, #24
 80011e8:	d007      	beq.n	80011fa <ReceivePacket+0x5e>
 80011ea:	e01c      	b.n	8001226 <ReceivePacket+0x8a>
    {
      case SOH:
        packet_size = PACKET_SIZE;
 80011ec:	2380      	movs	r3, #128	; 0x80
 80011ee:	61fb      	str	r3, [r7, #28]
        break;
 80011f0:	e01d      	b.n	800122e <ReceivePacket+0x92>
      case STX:
        packet_size = PACKET_1K_SIZE;
 80011f2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80011f6:	61fb      	str	r3, [r7, #28]
        break;
 80011f8:	e019      	b.n	800122e <ReceivePacket+0x92>
      case EOT:
        break;
      case CA:
        if ((HAL_UART_Receive(&UartHandle, &char1, 1, timeout) == HAL_OK) && (char1 == CA))
 80011fa:	f107 0113 	add.w	r1, r7, #19
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	2201      	movs	r2, #1
 8001202:	4832      	ldr	r0, [pc, #200]	; (80012cc <ReceivePacket+0x130>)
 8001204:	f002 f9b2 	bl	800356c <HAL_UART_Receive>
 8001208:	4603      	mov	r3, r0
 800120a:	2b00      	cmp	r3, #0
 800120c:	d105      	bne.n	800121a <ReceivePacket+0x7e>
 800120e:	7cfb      	ldrb	r3, [r7, #19]
 8001210:	2b18      	cmp	r3, #24
 8001212:	d102      	bne.n	800121a <ReceivePacket+0x7e>
        {
          packet_size = 2;
 8001214:	2302      	movs	r3, #2
 8001216:	61fb      	str	r3, [r7, #28]
        }
        else
        {
          status = HAL_ERROR;
        }
        break;
 8001218:	e009      	b.n	800122e <ReceivePacket+0x92>
          status = HAL_ERROR;
 800121a:	2301      	movs	r3, #1
 800121c:	76fb      	strb	r3, [r7, #27]
        break;
 800121e:	e006      	b.n	800122e <ReceivePacket+0x92>
      case ABORT1:
      case ABORT2:
        status = HAL_BUSY;
 8001220:	2302      	movs	r3, #2
 8001222:	76fb      	strb	r3, [r7, #27]
        break;
 8001224:	e003      	b.n	800122e <ReceivePacket+0x92>
      default:
        status = HAL_ERROR;
 8001226:	2301      	movs	r3, #1
 8001228:	76fb      	strb	r3, [r7, #27]
        break;
 800122a:	e000      	b.n	800122e <ReceivePacket+0x92>
        break;
 800122c:	bf00      	nop
    }
    *p_data = char1;
 800122e:	7cfa      	ldrb	r2, [r7, #19]
 8001230:	68fb      	ldr	r3, [r7, #12]
 8001232:	701a      	strb	r2, [r3, #0]

    if (packet_size >= PACKET_SIZE )
 8001234:	69fb      	ldr	r3, [r7, #28]
 8001236:	2b7f      	cmp	r3, #127	; 0x7f
 8001238:	d93f      	bls.n	80012ba <ReceivePacket+0x11e>
    {
      status = HAL_UART_Receive(&UartHandle, &p_data[PACKET_NUMBER_INDEX], packet_size + PACKET_OVERHEAD_SIZE, timeout);
 800123a:	68fb      	ldr	r3, [r7, #12]
 800123c:	1c99      	adds	r1, r3, #2
 800123e:	69fb      	ldr	r3, [r7, #28]
 8001240:	b29b      	uxth	r3, r3
 8001242:	3304      	adds	r3, #4
 8001244:	b29a      	uxth	r2, r3
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	4820      	ldr	r0, [pc, #128]	; (80012cc <ReceivePacket+0x130>)
 800124a:	f002 f98f 	bl	800356c <HAL_UART_Receive>
 800124e:	4603      	mov	r3, r0
 8001250:	76fb      	strb	r3, [r7, #27]

      /* Simple packet sanity check */
      if (status == HAL_OK )
 8001252:	7efb      	ldrb	r3, [r7, #27]
 8001254:	2b00      	cmp	r3, #0
 8001256:	d12e      	bne.n	80012b6 <ReceivePacket+0x11a>
      {
        if (p_data[PACKET_NUMBER_INDEX] != ((p_data[PACKET_CNUMBER_INDEX]) ^ NEGATIVE_BYTE))
 8001258:	68fb      	ldr	r3, [r7, #12]
 800125a:	3302      	adds	r3, #2
 800125c:	781a      	ldrb	r2, [r3, #0]
 800125e:	68fb      	ldr	r3, [r7, #12]
 8001260:	3303      	adds	r3, #3
 8001262:	781b      	ldrb	r3, [r3, #0]
 8001264:	43db      	mvns	r3, r3
 8001266:	b2db      	uxtb	r3, r3
 8001268:	429a      	cmp	r2, r3
 800126a:	d004      	beq.n	8001276 <ReceivePacket+0xda>
        {
          packet_size = 0;
 800126c:	2300      	movs	r3, #0
 800126e:	61fb      	str	r3, [r7, #28]
          status = HAL_ERROR;
 8001270:	2301      	movs	r3, #1
 8001272:	76fb      	strb	r3, [r7, #27]
 8001274:	e021      	b.n	80012ba <ReceivePacket+0x11e>
        }
        else
        {
          /* Check packet CRC */
          crc = p_data[ packet_size + PACKET_DATA_INDEX ] << 8;
 8001276:	69fb      	ldr	r3, [r7, #28]
 8001278:	3304      	adds	r3, #4
 800127a:	68fa      	ldr	r2, [r7, #12]
 800127c:	4413      	add	r3, r2
 800127e:	781b      	ldrb	r3, [r3, #0]
 8001280:	021b      	lsls	r3, r3, #8
 8001282:	617b      	str	r3, [r7, #20]
          crc += p_data[ packet_size + PACKET_DATA_INDEX + 1 ];
 8001284:	69fb      	ldr	r3, [r7, #28]
 8001286:	3305      	adds	r3, #5
 8001288:	68fa      	ldr	r2, [r7, #12]
 800128a:	4413      	add	r3, r2
 800128c:	781b      	ldrb	r3, [r3, #0]
 800128e:	461a      	mov	r2, r3
 8001290:	697b      	ldr	r3, [r7, #20]
 8001292:	4413      	add	r3, r2
 8001294:	617b      	str	r3, [r7, #20]
          if (Cal_CRC16(&p_data[PACKET_DATA_INDEX], packet_size) != crc )
 8001296:	68fb      	ldr	r3, [r7, #12]
 8001298:	3304      	adds	r3, #4
 800129a:	69f9      	ldr	r1, [r7, #28]
 800129c:	4618      	mov	r0, r3
 800129e:	f000 f90c 	bl	80014ba <Cal_CRC16>
 80012a2:	4603      	mov	r3, r0
 80012a4:	461a      	mov	r2, r3
 80012a6:	697b      	ldr	r3, [r7, #20]
 80012a8:	4293      	cmp	r3, r2
 80012aa:	d006      	beq.n	80012ba <ReceivePacket+0x11e>
          {
            packet_size = 0;
 80012ac:	2300      	movs	r3, #0
 80012ae:	61fb      	str	r3, [r7, #28]
            status = HAL_ERROR;
 80012b0:	2301      	movs	r3, #1
 80012b2:	76fb      	strb	r3, [r7, #27]
 80012b4:	e001      	b.n	80012ba <ReceivePacket+0x11e>
          }
        }
      }
      else
      {
        packet_size = 0;
 80012b6:	2300      	movs	r3, #0
 80012b8:	61fb      	str	r3, [r7, #28]
      }
    }
  }
  *p_length = packet_size;
 80012ba:	68bb      	ldr	r3, [r7, #8]
 80012bc:	69fa      	ldr	r2, [r7, #28]
 80012be:	601a      	str	r2, [r3, #0]
  return status;
 80012c0:	7efb      	ldrb	r3, [r7, #27]
}
 80012c2:	4618      	mov	r0, r3
 80012c4:	3720      	adds	r7, #32
 80012c6:	46bd      	mov	sp, r7
 80012c8:	bd80      	pop	{r7, pc}
 80012ca:	bf00      	nop
 80012cc:	20000030 	.word	0x20000030

080012d0 <PrepareIntialPacket>:
  * @param  p_file_name: name of the file to be sent
  * @param  length: length of the file to be sent in bytes
  * @retval None
  */
static void PrepareIntialPacket(uint8_t *p_data, const uint8_t *p_file_name, uint32_t length)
{
 80012d0:	b580      	push	{r7, lr}
 80012d2:	b08a      	sub	sp, #40	; 0x28
 80012d4:	af00      	add	r7, sp, #0
 80012d6:	60f8      	str	r0, [r7, #12]
 80012d8:	60b9      	str	r1, [r7, #8]
 80012da:	607a      	str	r2, [r7, #4]
  uint32_t i, j = 0;
 80012dc:	2300      	movs	r3, #0
 80012de:	623b      	str	r3, [r7, #32]
  uint8_t astring[10];

  /* first 3 bytes are constant */
  p_data[PACKET_START_INDEX] = SOH;
 80012e0:	68fb      	ldr	r3, [r7, #12]
 80012e2:	3301      	adds	r3, #1
 80012e4:	2201      	movs	r2, #1
 80012e6:	701a      	strb	r2, [r3, #0]
  p_data[PACKET_NUMBER_INDEX] = 0x00;
 80012e8:	68fb      	ldr	r3, [r7, #12]
 80012ea:	3302      	adds	r3, #2
 80012ec:	2200      	movs	r2, #0
 80012ee:	701a      	strb	r2, [r3, #0]
  p_data[PACKET_CNUMBER_INDEX] = 0xff;
 80012f0:	68fb      	ldr	r3, [r7, #12]
 80012f2:	3303      	adds	r3, #3
 80012f4:	22ff      	movs	r2, #255	; 0xff
 80012f6:	701a      	strb	r2, [r3, #0]

  /* Filename written */
  for (i = 0; (p_file_name[i] != '\0') && (i < FILE_NAME_LENGTH); i++)
 80012f8:	2300      	movs	r3, #0
 80012fa:	627b      	str	r3, [r7, #36]	; 0x24
 80012fc:	e00b      	b.n	8001316 <PrepareIntialPacket+0x46>
  {
    p_data[i + PACKET_DATA_INDEX] = p_file_name[i];
 80012fe:	68ba      	ldr	r2, [r7, #8]
 8001300:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001302:	441a      	add	r2, r3
 8001304:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001306:	3304      	adds	r3, #4
 8001308:	68f9      	ldr	r1, [r7, #12]
 800130a:	440b      	add	r3, r1
 800130c:	7812      	ldrb	r2, [r2, #0]
 800130e:	701a      	strb	r2, [r3, #0]
  for (i = 0; (p_file_name[i] != '\0') && (i < FILE_NAME_LENGTH); i++)
 8001310:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001312:	3301      	adds	r3, #1
 8001314:	627b      	str	r3, [r7, #36]	; 0x24
 8001316:	68ba      	ldr	r2, [r7, #8]
 8001318:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800131a:	4413      	add	r3, r2
 800131c:	781b      	ldrb	r3, [r3, #0]
 800131e:	2b00      	cmp	r3, #0
 8001320:	d002      	beq.n	8001328 <PrepareIntialPacket+0x58>
 8001322:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001324:	2b3f      	cmp	r3, #63	; 0x3f
 8001326:	d9ea      	bls.n	80012fe <PrepareIntialPacket+0x2e>
  }

  p_data[i + PACKET_DATA_INDEX] = 0x00;
 8001328:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800132a:	3304      	adds	r3, #4
 800132c:	68fa      	ldr	r2, [r7, #12]
 800132e:	4413      	add	r3, r2
 8001330:	2200      	movs	r2, #0
 8001332:	701a      	strb	r2, [r3, #0]

  /* file size written */
  Int2Str (astring, length);
 8001334:	f107 0314 	add.w	r3, r7, #20
 8001338:	6879      	ldr	r1, [r7, #4]
 800133a:	4618      	mov	r0, r3
 800133c:	f7ff f8c4 	bl	80004c8 <Int2Str>
  i = i + PACKET_DATA_INDEX + 1;
 8001340:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001342:	3305      	adds	r3, #5
 8001344:	627b      	str	r3, [r7, #36]	; 0x24
  while (astring[j] != '\0')
 8001346:	e00d      	b.n	8001364 <PrepareIntialPacket+0x94>
  {
    p_data[i++] = astring[j++];
 8001348:	6a3b      	ldr	r3, [r7, #32]
 800134a:	1c5a      	adds	r2, r3, #1
 800134c:	623a      	str	r2, [r7, #32]
 800134e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001350:	1c51      	adds	r1, r2, #1
 8001352:	6279      	str	r1, [r7, #36]	; 0x24
 8001354:	68f9      	ldr	r1, [r7, #12]
 8001356:	440a      	add	r2, r1
 8001358:	f107 0128 	add.w	r1, r7, #40	; 0x28
 800135c:	440b      	add	r3, r1
 800135e:	f813 3c14 	ldrb.w	r3, [r3, #-20]
 8001362:	7013      	strb	r3, [r2, #0]
  while (astring[j] != '\0')
 8001364:	f107 0214 	add.w	r2, r7, #20
 8001368:	6a3b      	ldr	r3, [r7, #32]
 800136a:	4413      	add	r3, r2
 800136c:	781b      	ldrb	r3, [r3, #0]
 800136e:	2b00      	cmp	r3, #0
 8001370:	d1ea      	bne.n	8001348 <PrepareIntialPacket+0x78>
  }

  /* padding with zeros */
  for (j = i; j < PACKET_SIZE + PACKET_DATA_INDEX; j++)
 8001372:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001374:	623b      	str	r3, [r7, #32]
 8001376:	e007      	b.n	8001388 <PrepareIntialPacket+0xb8>
  {
    p_data[j] = 0;
 8001378:	68fa      	ldr	r2, [r7, #12]
 800137a:	6a3b      	ldr	r3, [r7, #32]
 800137c:	4413      	add	r3, r2
 800137e:	2200      	movs	r2, #0
 8001380:	701a      	strb	r2, [r3, #0]
  for (j = i; j < PACKET_SIZE + PACKET_DATA_INDEX; j++)
 8001382:	6a3b      	ldr	r3, [r7, #32]
 8001384:	3301      	adds	r3, #1
 8001386:	623b      	str	r3, [r7, #32]
 8001388:	6a3b      	ldr	r3, [r7, #32]
 800138a:	2b83      	cmp	r3, #131	; 0x83
 800138c:	d9f4      	bls.n	8001378 <PrepareIntialPacket+0xa8>
  }
}
 800138e:	bf00      	nop
 8001390:	3728      	adds	r7, #40	; 0x28
 8001392:	46bd      	mov	sp, r7
 8001394:	bd80      	pop	{r7, pc}

08001396 <PreparePacket>:
  * @param  pkt_nr: number of the packet
  * @param  size_blk: length of the block to be sent in bytes
  * @retval None
  */
static void PreparePacket(uint8_t *p_source, uint8_t *p_packet, uint8_t pkt_nr, uint32_t size_blk)
{
 8001396:	b480      	push	{r7}
 8001398:	b089      	sub	sp, #36	; 0x24
 800139a:	af00      	add	r7, sp, #0
 800139c:	60f8      	str	r0, [r7, #12]
 800139e:	60b9      	str	r1, [r7, #8]
 80013a0:	603b      	str	r3, [r7, #0]
 80013a2:	4613      	mov	r3, r2
 80013a4:	71fb      	strb	r3, [r7, #7]
  uint8_t *p_record;
  uint32_t i, size, packet_size;

  /* Make first three packet */
  packet_size = size_blk >= PACKET_1K_SIZE ? PACKET_1K_SIZE : PACKET_SIZE;
 80013a6:	683b      	ldr	r3, [r7, #0]
 80013a8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80013ac:	d302      	bcc.n	80013b4 <PreparePacket+0x1e>
 80013ae:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80013b2:	e000      	b.n	80013b6 <PreparePacket+0x20>
 80013b4:	2380      	movs	r3, #128	; 0x80
 80013b6:	617b      	str	r3, [r7, #20]
  size = size_blk < packet_size ? size_blk : packet_size;
 80013b8:	697a      	ldr	r2, [r7, #20]
 80013ba:	683b      	ldr	r3, [r7, #0]
 80013bc:	4293      	cmp	r3, r2
 80013be:	bf28      	it	cs
 80013c0:	4613      	movcs	r3, r2
 80013c2:	613b      	str	r3, [r7, #16]
  if (packet_size == PACKET_1K_SIZE)
 80013c4:	697b      	ldr	r3, [r7, #20]
 80013c6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80013ca:	d104      	bne.n	80013d6 <PreparePacket+0x40>
  {
    p_packet[PACKET_START_INDEX] = STX;
 80013cc:	68bb      	ldr	r3, [r7, #8]
 80013ce:	3301      	adds	r3, #1
 80013d0:	2202      	movs	r2, #2
 80013d2:	701a      	strb	r2, [r3, #0]
 80013d4:	e003      	b.n	80013de <PreparePacket+0x48>
  }
  else
  {
    p_packet[PACKET_START_INDEX] = SOH;
 80013d6:	68bb      	ldr	r3, [r7, #8]
 80013d8:	3301      	adds	r3, #1
 80013da:	2201      	movs	r2, #1
 80013dc:	701a      	strb	r2, [r3, #0]
  }
  p_packet[PACKET_NUMBER_INDEX] = pkt_nr;
 80013de:	68bb      	ldr	r3, [r7, #8]
 80013e0:	3302      	adds	r3, #2
 80013e2:	79fa      	ldrb	r2, [r7, #7]
 80013e4:	701a      	strb	r2, [r3, #0]
  p_packet[PACKET_CNUMBER_INDEX] = (~pkt_nr);
 80013e6:	68bb      	ldr	r3, [r7, #8]
 80013e8:	3303      	adds	r3, #3
 80013ea:	79fa      	ldrb	r2, [r7, #7]
 80013ec:	43d2      	mvns	r2, r2
 80013ee:	b2d2      	uxtb	r2, r2
 80013f0:	701a      	strb	r2, [r3, #0]
  p_record = p_source;
 80013f2:	68fb      	ldr	r3, [r7, #12]
 80013f4:	61fb      	str	r3, [r7, #28]

  /* Filename packet has valid data */
  for (i = PACKET_DATA_INDEX; i < size + PACKET_DATA_INDEX;i++)
 80013f6:	2304      	movs	r3, #4
 80013f8:	61bb      	str	r3, [r7, #24]
 80013fa:	e00a      	b.n	8001412 <PreparePacket+0x7c>
  {
    p_packet[i] = *p_record++;
 80013fc:	69fb      	ldr	r3, [r7, #28]
 80013fe:	1c5a      	adds	r2, r3, #1
 8001400:	61fa      	str	r2, [r7, #28]
 8001402:	68b9      	ldr	r1, [r7, #8]
 8001404:	69ba      	ldr	r2, [r7, #24]
 8001406:	440a      	add	r2, r1
 8001408:	781b      	ldrb	r3, [r3, #0]
 800140a:	7013      	strb	r3, [r2, #0]
  for (i = PACKET_DATA_INDEX; i < size + PACKET_DATA_INDEX;i++)
 800140c:	69bb      	ldr	r3, [r7, #24]
 800140e:	3301      	adds	r3, #1
 8001410:	61bb      	str	r3, [r7, #24]
 8001412:	693b      	ldr	r3, [r7, #16]
 8001414:	3304      	adds	r3, #4
 8001416:	69ba      	ldr	r2, [r7, #24]
 8001418:	429a      	cmp	r2, r3
 800141a:	d3ef      	bcc.n	80013fc <PreparePacket+0x66>
  }
  if ( size  <= packet_size)
 800141c:	693a      	ldr	r2, [r7, #16]
 800141e:	697b      	ldr	r3, [r7, #20]
 8001420:	429a      	cmp	r2, r3
 8001422:	d810      	bhi.n	8001446 <PreparePacket+0xb0>
  {
    for (i = size + PACKET_DATA_INDEX; i < packet_size + PACKET_DATA_INDEX; i++)
 8001424:	693b      	ldr	r3, [r7, #16]
 8001426:	3304      	adds	r3, #4
 8001428:	61bb      	str	r3, [r7, #24]
 800142a:	e007      	b.n	800143c <PreparePacket+0xa6>
    {
      p_packet[i] = 0x1A; /* EOF (0x1A) or 0x00 */
 800142c:	68ba      	ldr	r2, [r7, #8]
 800142e:	69bb      	ldr	r3, [r7, #24]
 8001430:	4413      	add	r3, r2
 8001432:	221a      	movs	r2, #26
 8001434:	701a      	strb	r2, [r3, #0]
    for (i = size + PACKET_DATA_INDEX; i < packet_size + PACKET_DATA_INDEX; i++)
 8001436:	69bb      	ldr	r3, [r7, #24]
 8001438:	3301      	adds	r3, #1
 800143a:	61bb      	str	r3, [r7, #24]
 800143c:	697b      	ldr	r3, [r7, #20]
 800143e:	3304      	adds	r3, #4
 8001440:	69ba      	ldr	r2, [r7, #24]
 8001442:	429a      	cmp	r2, r3
 8001444:	d3f2      	bcc.n	800142c <PreparePacket+0x96>
    }
  }
}
 8001446:	bf00      	nop
 8001448:	3724      	adds	r7, #36	; 0x24
 800144a:	46bd      	mov	sp, r7
 800144c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001450:	4770      	bx	lr

08001452 <UpdateCRC16>:
  * @param  crc_in input value 
  * @param  input byte
  * @retval None
  */
uint16_t UpdateCRC16(uint16_t crc_in, uint8_t byte)
{
 8001452:	b480      	push	{r7}
 8001454:	b085      	sub	sp, #20
 8001456:	af00      	add	r7, sp, #0
 8001458:	4603      	mov	r3, r0
 800145a:	460a      	mov	r2, r1
 800145c:	80fb      	strh	r3, [r7, #6]
 800145e:	4613      	mov	r3, r2
 8001460:	717b      	strb	r3, [r7, #5]
  uint32_t crc = crc_in;
 8001462:	88fb      	ldrh	r3, [r7, #6]
 8001464:	60fb      	str	r3, [r7, #12]
  uint32_t in = byte | 0x100;
 8001466:	797b      	ldrb	r3, [r7, #5]
 8001468:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800146c:	60bb      	str	r3, [r7, #8]

  do
  {
    crc <<= 1;
 800146e:	68fb      	ldr	r3, [r7, #12]
 8001470:	005b      	lsls	r3, r3, #1
 8001472:	60fb      	str	r3, [r7, #12]
    in <<= 1;
 8001474:	68bb      	ldr	r3, [r7, #8]
 8001476:	005b      	lsls	r3, r3, #1
 8001478:	60bb      	str	r3, [r7, #8]
    if(in & 0x100)
 800147a:	68bb      	ldr	r3, [r7, #8]
 800147c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001480:	2b00      	cmp	r3, #0
 8001482:	d002      	beq.n	800148a <UpdateCRC16+0x38>
      ++crc;
 8001484:	68fb      	ldr	r3, [r7, #12]
 8001486:	3301      	adds	r3, #1
 8001488:	60fb      	str	r3, [r7, #12]
    if(crc & 0x10000)
 800148a:	68fb      	ldr	r3, [r7, #12]
 800148c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001490:	2b00      	cmp	r3, #0
 8001492:	d005      	beq.n	80014a0 <UpdateCRC16+0x4e>
      crc ^= 0x1021;
 8001494:	68fb      	ldr	r3, [r7, #12]
 8001496:	f483 5381 	eor.w	r3, r3, #4128	; 0x1020
 800149a:	f083 0301 	eor.w	r3, r3, #1
 800149e:	60fb      	str	r3, [r7, #12]
  }
  
  while(!(in & 0x10000));
 80014a0:	68bb      	ldr	r3, [r7, #8]
 80014a2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80014a6:	2b00      	cmp	r3, #0
 80014a8:	d0e1      	beq.n	800146e <UpdateCRC16+0x1c>

  return crc & 0xffffu;
 80014aa:	68fb      	ldr	r3, [r7, #12]
 80014ac:	b29b      	uxth	r3, r3
}
 80014ae:	4618      	mov	r0, r3
 80014b0:	3714      	adds	r7, #20
 80014b2:	46bd      	mov	sp, r7
 80014b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014b8:	4770      	bx	lr

080014ba <Cal_CRC16>:
  * @param  data
  * @param  length
  * @retval None
  */
uint16_t Cal_CRC16(const uint8_t* p_data, uint32_t size)
{
 80014ba:	b580      	push	{r7, lr}
 80014bc:	b084      	sub	sp, #16
 80014be:	af00      	add	r7, sp, #0
 80014c0:	6078      	str	r0, [r7, #4]
 80014c2:	6039      	str	r1, [r7, #0]
  uint32_t crc = 0;
 80014c4:	2300      	movs	r3, #0
 80014c6:	60fb      	str	r3, [r7, #12]
  const uint8_t* dataEnd = p_data+size;
 80014c8:	687a      	ldr	r2, [r7, #4]
 80014ca:	683b      	ldr	r3, [r7, #0]
 80014cc:	4413      	add	r3, r2
 80014ce:	60bb      	str	r3, [r7, #8]

  while(p_data < dataEnd)
 80014d0:	e00a      	b.n	80014e8 <Cal_CRC16+0x2e>
    crc = UpdateCRC16(crc, *p_data++);
 80014d2:	68fb      	ldr	r3, [r7, #12]
 80014d4:	b298      	uxth	r0, r3
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	1c5a      	adds	r2, r3, #1
 80014da:	607a      	str	r2, [r7, #4]
 80014dc:	781b      	ldrb	r3, [r3, #0]
 80014de:	4619      	mov	r1, r3
 80014e0:	f7ff ffb7 	bl	8001452 <UpdateCRC16>
 80014e4:	4603      	mov	r3, r0
 80014e6:	60fb      	str	r3, [r7, #12]
  while(p_data < dataEnd)
 80014e8:	687a      	ldr	r2, [r7, #4]
 80014ea:	68bb      	ldr	r3, [r7, #8]
 80014ec:	429a      	cmp	r2, r3
 80014ee:	d3f0      	bcc.n	80014d2 <Cal_CRC16+0x18>
 
  crc = UpdateCRC16(crc, 0);
 80014f0:	68fb      	ldr	r3, [r7, #12]
 80014f2:	b29b      	uxth	r3, r3
 80014f4:	2100      	movs	r1, #0
 80014f6:	4618      	mov	r0, r3
 80014f8:	f7ff ffab 	bl	8001452 <UpdateCRC16>
 80014fc:	4603      	mov	r3, r0
 80014fe:	60fb      	str	r3, [r7, #12]
  crc = UpdateCRC16(crc, 0);
 8001500:	68fb      	ldr	r3, [r7, #12]
 8001502:	b29b      	uxth	r3, r3
 8001504:	2100      	movs	r1, #0
 8001506:	4618      	mov	r0, r3
 8001508:	f7ff ffa3 	bl	8001452 <UpdateCRC16>
 800150c:	4603      	mov	r3, r0
 800150e:	60fb      	str	r3, [r7, #12]

  return crc&0xffffu;
 8001510:	68fb      	ldr	r3, [r7, #12]
 8001512:	b29b      	uxth	r3, r3
}
 8001514:	4618      	mov	r0, r3
 8001516:	3710      	adds	r7, #16
 8001518:	46bd      	mov	sp, r7
 800151a:	bd80      	pop	{r7, pc}

0800151c <Ymodem_Receive>:
  * @brief  Receive a file using the ymodem protocol with CRC16.
  * @param  p_size The size of the file.
  * @retval COM_StatusTypeDef result of reception/programming
  */
COM_StatusTypeDef Ymodem_Receive ( uint32_t *p_size )
{
 800151c:	b580      	push	{r7, lr}
 800151e:	b092      	sub	sp, #72	; 0x48
 8001520:	af00      	add	r7, sp, #0
 8001522:	6078      	str	r0, [r7, #4]
  uint32_t i, packet_length, session_done = 0, file_done, errors = 0, session_begin = 0;
 8001524:	2300      	movs	r3, #0
 8001526:	643b      	str	r3, [r7, #64]	; 0x40
 8001528:	2300      	movs	r3, #0
 800152a:	63bb      	str	r3, [r7, #56]	; 0x38
 800152c:	2300      	movs	r3, #0
 800152e:	637b      	str	r3, [r7, #52]	; 0x34
 // uint32_t flashdestination;
  uint32_t ramsource, filesize, packets_received;
  uint8_t *file_ptr;
  uint8_t file_size[FILE_SIZE_LENGTH], tmp;
  COM_StatusTypeDef result = COM_OK;
 8001530:	2300      	movs	r3, #0
 8001532:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Initialize flashdestination variable */
  flashdestination = APPLICATION_ADDRESS;
 8001536:	4b86      	ldr	r3, [pc, #536]	; (8001750 <Ymodem_Receive+0x234>)
 8001538:	4a86      	ldr	r2, [pc, #536]	; (8001754 <Ymodem_Receive+0x238>)
 800153a:	601a      	str	r2, [r3, #0]

  while ((session_done == 0) && (result == COM_OK))
 800153c:	e0f9      	b.n	8001732 <Ymodem_Receive+0x216>
  {
    packets_received = 0;
 800153e:	2300      	movs	r3, #0
 8001540:	633b      	str	r3, [r7, #48]	; 0x30
    file_done = 0;
 8001542:	2300      	movs	r3, #0
 8001544:	63fb      	str	r3, [r7, #60]	; 0x3c
    while ((file_done == 0) && (result == COM_OK))
 8001546:	e0ec      	b.n	8001722 <Ymodem_Receive+0x206>
    {
      switch (ReceivePacket(aPacketData, &packet_length, DOWNLOAD_TIMEOUT))
 8001548:	f107 0320 	add.w	r3, r7, #32
 800154c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001550:	4619      	mov	r1, r3
 8001552:	4881      	ldr	r0, [pc, #516]	; (8001758 <Ymodem_Receive+0x23c>)
 8001554:	f7ff fe22 	bl	800119c <ReceivePacket>
 8001558:	4603      	mov	r3, r0
 800155a:	2b00      	cmp	r3, #0
 800155c:	d003      	beq.n	8001566 <Ymodem_Receive+0x4a>
 800155e:	2b02      	cmp	r3, #2
 8001560:	f000 80c1 	beq.w	80016e6 <Ymodem_Receive+0x1ca>
 8001564:	e0c9      	b.n	80016fa <Ymodem_Receive+0x1de>
      {
        case HAL_OK:
          errors = 0;
 8001566:	2300      	movs	r3, #0
 8001568:	63bb      	str	r3, [r7, #56]	; 0x38
          switch (packet_length)
 800156a:	6a3b      	ldr	r3, [r7, #32]
 800156c:	2b00      	cmp	r3, #0
 800156e:	d008      	beq.n	8001582 <Ymodem_Receive+0x66>
 8001570:	2b02      	cmp	r3, #2
 8001572:	d10c      	bne.n	800158e <Ymodem_Receive+0x72>
          {
            case 2:
              /* Abort by sender */
              Serial_PutByte(ACK);
 8001574:	2006      	movs	r0, #6
 8001576:	f7ff f90f 	bl	8000798 <Serial_PutByte>
              result = COM_ABORT;
 800157a:	2302      	movs	r3, #2
 800157c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
              break;
 8001580:	e0b0      	b.n	80016e4 <Ymodem_Receive+0x1c8>
            case 0:
              /* End of transmission */
              Serial_PutByte(ACK);
 8001582:	2006      	movs	r0, #6
 8001584:	f7ff f908 	bl	8000798 <Serial_PutByte>
              file_done = 1;
 8001588:	2301      	movs	r3, #1
 800158a:	63fb      	str	r3, [r7, #60]	; 0x3c
              break;
 800158c:	e0aa      	b.n	80016e4 <Ymodem_Receive+0x1c8>
            default:
              /* Normal packet */
              if (aPacketData[PACKET_NUMBER_INDEX] != (uint8_t)packets_received)
 800158e:	4b72      	ldr	r3, [pc, #456]	; (8001758 <Ymodem_Receive+0x23c>)
 8001590:	789a      	ldrb	r2, [r3, #2]
 8001592:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001594:	b2db      	uxtb	r3, r3
 8001596:	429a      	cmp	r2, r3
 8001598:	d003      	beq.n	80015a2 <Ymodem_Receive+0x86>
              {
                Serial_PutByte(NAK);
 800159a:	2015      	movs	r0, #21
 800159c:	f7ff f8fc 	bl	8000798 <Serial_PutByte>
                  }
                }
                packets_received ++;
                session_begin = 1;
              }
              break;
 80015a0:	e09f      	b.n	80016e2 <Ymodem_Receive+0x1c6>
                if (packets_received == 0)
 80015a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80015a4:	2b00      	cmp	r3, #0
 80015a6:	d177      	bne.n	8001698 <Ymodem_Receive+0x17c>
                  if (aPacketData[PACKET_DATA_INDEX] != 0)
 80015a8:	4b6b      	ldr	r3, [pc, #428]	; (8001758 <Ymodem_Receive+0x23c>)
 80015aa:	791b      	ldrb	r3, [r3, #4]
 80015ac:	2b00      	cmp	r3, #0
 80015ae:	d06b      	beq.n	8001688 <Ymodem_Receive+0x16c>
                    i = 0;
 80015b0:	2300      	movs	r3, #0
 80015b2:	647b      	str	r3, [r7, #68]	; 0x44
                    file_ptr = aPacketData + PACKET_DATA_INDEX;
 80015b4:	4b69      	ldr	r3, [pc, #420]	; (800175c <Ymodem_Receive+0x240>)
 80015b6:	62fb      	str	r3, [r7, #44]	; 0x2c
                    while ( (*file_ptr != 0) && (i < FILE_NAME_LENGTH))
 80015b8:	e008      	b.n	80015cc <Ymodem_Receive+0xb0>
                      aFileName[i++] = *file_ptr++;
 80015ba:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80015bc:	1c53      	adds	r3, r2, #1
 80015be:	62fb      	str	r3, [r7, #44]	; 0x2c
 80015c0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80015c2:	1c59      	adds	r1, r3, #1
 80015c4:	6479      	str	r1, [r7, #68]	; 0x44
 80015c6:	7811      	ldrb	r1, [r2, #0]
 80015c8:	4a65      	ldr	r2, [pc, #404]	; (8001760 <Ymodem_Receive+0x244>)
 80015ca:	54d1      	strb	r1, [r2, r3]
                    while ( (*file_ptr != 0) && (i < FILE_NAME_LENGTH))
 80015cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80015ce:	781b      	ldrb	r3, [r3, #0]
 80015d0:	2b00      	cmp	r3, #0
 80015d2:	d002      	beq.n	80015da <Ymodem_Receive+0xbe>
 80015d4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80015d6:	2b3f      	cmp	r3, #63	; 0x3f
 80015d8:	d9ef      	bls.n	80015ba <Ymodem_Receive+0x9e>
                    aFileName[i++] = '\0';
 80015da:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80015dc:	1c5a      	adds	r2, r3, #1
 80015de:	647a      	str	r2, [r7, #68]	; 0x44
 80015e0:	4a5f      	ldr	r2, [pc, #380]	; (8001760 <Ymodem_Receive+0x244>)
 80015e2:	2100      	movs	r1, #0
 80015e4:	54d1      	strb	r1, [r2, r3]
                    i = 0;
 80015e6:	2300      	movs	r3, #0
 80015e8:	647b      	str	r3, [r7, #68]	; 0x44
                    file_ptr ++;
 80015ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80015ec:	3301      	adds	r3, #1
 80015ee:	62fb      	str	r3, [r7, #44]	; 0x2c
                    while ( (*file_ptr != ' ') && (i < FILE_SIZE_LENGTH))
 80015f0:	e00b      	b.n	800160a <Ymodem_Receive+0xee>
                      file_size[i++] = *file_ptr++;
 80015f2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80015f4:	1c53      	adds	r3, r2, #1
 80015f6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80015f8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80015fa:	1c59      	adds	r1, r3, #1
 80015fc:	6479      	str	r1, [r7, #68]	; 0x44
 80015fe:	7812      	ldrb	r2, [r2, #0]
 8001600:	f107 0148 	add.w	r1, r7, #72	; 0x48
 8001604:	440b      	add	r3, r1
 8001606:	f803 2c3c 	strb.w	r2, [r3, #-60]
                    while ( (*file_ptr != ' ') && (i < FILE_SIZE_LENGTH))
 800160a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800160c:	781b      	ldrb	r3, [r3, #0]
 800160e:	2b20      	cmp	r3, #32
 8001610:	d002      	beq.n	8001618 <Ymodem_Receive+0xfc>
 8001612:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001614:	2b0f      	cmp	r3, #15
 8001616:	d9ec      	bls.n	80015f2 <Ymodem_Receive+0xd6>
                    file_size[i++] = '\0';
 8001618:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800161a:	1c5a      	adds	r2, r3, #1
 800161c:	647a      	str	r2, [r7, #68]	; 0x44
 800161e:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8001622:	4413      	add	r3, r2
 8001624:	2200      	movs	r2, #0
 8001626:	f803 2c3c 	strb.w	r2, [r3, #-60]
                    Str2Int(file_size, &filesize);
 800162a:	f107 021c 	add.w	r2, r7, #28
 800162e:	f107 030c 	add.w	r3, r7, #12
 8001632:	4611      	mov	r1, r2
 8001634:	4618      	mov	r0, r3
 8001636:	f7fe ff9b 	bl	8000570 <Str2Int>
                    if (*p_size > (USER_FLASH_SIZE + 1))
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	681b      	ldr	r3, [r3, #0]
 800163e:	4a49      	ldr	r2, [pc, #292]	; (8001764 <Ymodem_Receive+0x248>)
 8001640:	4293      	cmp	r3, r2
 8001642:	d914      	bls.n	800166e <Ymodem_Receive+0x152>
                      tmp = CA;
 8001644:	2318      	movs	r3, #24
 8001646:	72fb      	strb	r3, [r7, #11]
                      HAL_UART_Transmit(&UartHandle, &tmp, 1, NAK_TIMEOUT);
 8001648:	f107 010b 	add.w	r1, r7, #11
 800164c:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8001650:	2201      	movs	r2, #1
 8001652:	4845      	ldr	r0, [pc, #276]	; (8001768 <Ymodem_Receive+0x24c>)
 8001654:	f001 fef1 	bl	800343a <HAL_UART_Transmit>
                      HAL_UART_Transmit(&UartHandle, &tmp, 1, NAK_TIMEOUT);
 8001658:	f107 010b 	add.w	r1, r7, #11
 800165c:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8001660:	2201      	movs	r2, #1
 8001662:	4841      	ldr	r0, [pc, #260]	; (8001768 <Ymodem_Receive+0x24c>)
 8001664:	f001 fee9 	bl	800343a <HAL_UART_Transmit>
                      result = COM_LIMIT;
 8001668:	2305      	movs	r3, #5
 800166a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
                    FLASH_If_Erase(APPLICATION_ADDRESS);
 800166e:	4839      	ldr	r0, [pc, #228]	; (8001754 <Ymodem_Receive+0x238>)
 8001670:	f7ff f8ba 	bl	80007e8 <FLASH_If_Erase>
                    *p_size = filesize;
 8001674:	69fa      	ldr	r2, [r7, #28]
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	601a      	str	r2, [r3, #0]
                    Serial_PutByte(ACK);
 800167a:	2006      	movs	r0, #6
 800167c:	f7ff f88c 	bl	8000798 <Serial_PutByte>
                    Serial_PutByte(CRC16);
 8001680:	2043      	movs	r0, #67	; 0x43
 8001682:	f7ff f889 	bl	8000798 <Serial_PutByte>
 8001686:	e027      	b.n	80016d8 <Ymodem_Receive+0x1bc>
                    Serial_PutByte(ACK);
 8001688:	2006      	movs	r0, #6
 800168a:	f7ff f885 	bl	8000798 <Serial_PutByte>
                    file_done = 1;
 800168e:	2301      	movs	r3, #1
 8001690:	63fb      	str	r3, [r7, #60]	; 0x3c
                    session_done = 1;
 8001692:	2301      	movs	r3, #1
 8001694:	643b      	str	r3, [r7, #64]	; 0x40
                    break;
 8001696:	e025      	b.n	80016e4 <Ymodem_Receive+0x1c8>
                  ramsource = (uint32_t) & aPacketData[PACKET_DATA_INDEX];
 8001698:	4b30      	ldr	r3, [pc, #192]	; (800175c <Ymodem_Receive+0x240>)
 800169a:	627b      	str	r3, [r7, #36]	; 0x24
                  if (FLASH_If_Write(flashdestination, (uint32_t*) ramsource, packet_length/4) == FLASHIF_OK)
 800169c:	4b2c      	ldr	r3, [pc, #176]	; (8001750 <Ymodem_Receive+0x234>)
 800169e:	6818      	ldr	r0, [r3, #0]
 80016a0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80016a2:	6a3b      	ldr	r3, [r7, #32]
 80016a4:	089b      	lsrs	r3, r3, #2
 80016a6:	461a      	mov	r2, r3
 80016a8:	f7ff f8c4 	bl	8000834 <FLASH_If_Write>
 80016ac:	4603      	mov	r3, r0
 80016ae:	2b00      	cmp	r3, #0
 80016b0:	d109      	bne.n	80016c6 <Ymodem_Receive+0x1aa>
                    flashdestination += packet_length;
 80016b2:	4b27      	ldr	r3, [pc, #156]	; (8001750 <Ymodem_Receive+0x234>)
 80016b4:	681a      	ldr	r2, [r3, #0]
 80016b6:	6a3b      	ldr	r3, [r7, #32]
 80016b8:	4413      	add	r3, r2
 80016ba:	4a25      	ldr	r2, [pc, #148]	; (8001750 <Ymodem_Receive+0x234>)
 80016bc:	6013      	str	r3, [r2, #0]
                    Serial_PutByte(ACK);
 80016be:	2006      	movs	r0, #6
 80016c0:	f7ff f86a 	bl	8000798 <Serial_PutByte>
 80016c4:	e008      	b.n	80016d8 <Ymodem_Receive+0x1bc>
                    Serial_PutByte(CA);
 80016c6:	2018      	movs	r0, #24
 80016c8:	f7ff f866 	bl	8000798 <Serial_PutByte>
                    Serial_PutByte(CA);
 80016cc:	2018      	movs	r0, #24
 80016ce:	f7ff f863 	bl	8000798 <Serial_PutByte>
                    result = COM_DATA;
 80016d2:	2304      	movs	r3, #4
 80016d4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
                packets_received ++;
 80016d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80016da:	3301      	adds	r3, #1
 80016dc:	633b      	str	r3, [r7, #48]	; 0x30
                session_begin = 1;
 80016de:	2301      	movs	r3, #1
 80016e0:	637b      	str	r3, [r7, #52]	; 0x34
              break;
 80016e2:	bf00      	nop
          }
          break;
 80016e4:	e01d      	b.n	8001722 <Ymodem_Receive+0x206>
        case HAL_BUSY: /* Abort actually */
          Serial_PutByte(CA);
 80016e6:	2018      	movs	r0, #24
 80016e8:	f7ff f856 	bl	8000798 <Serial_PutByte>
          Serial_PutByte(CA);
 80016ec:	2018      	movs	r0, #24
 80016ee:	f7ff f853 	bl	8000798 <Serial_PutByte>
          result = COM_ABORT;
 80016f2:	2302      	movs	r3, #2
 80016f4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
          break;
 80016f8:	e013      	b.n	8001722 <Ymodem_Receive+0x206>
        default:
          if (session_begin > 0)
 80016fa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80016fc:	2b00      	cmp	r3, #0
 80016fe:	d002      	beq.n	8001706 <Ymodem_Receive+0x1ea>
          {
            errors ++;
 8001700:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001702:	3301      	adds	r3, #1
 8001704:	63bb      	str	r3, [r7, #56]	; 0x38
          }
          if (errors > MAX_ERRORS)
 8001706:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001708:	2b05      	cmp	r3, #5
 800170a:	d906      	bls.n	800171a <Ymodem_Receive+0x1fe>
          {
            /* Abort communication */
            Serial_PutByte(CA);
 800170c:	2018      	movs	r0, #24
 800170e:	f7ff f843 	bl	8000798 <Serial_PutByte>
            Serial_PutByte(CA);
 8001712:	2018      	movs	r0, #24
 8001714:	f7ff f840 	bl	8000798 <Serial_PutByte>
 8001718:	e002      	b.n	8001720 <Ymodem_Receive+0x204>
          }
          else
          {
            Serial_PutByte(CRC16); /* Ask for a packet */
 800171a:	2043      	movs	r0, #67	; 0x43
 800171c:	f7ff f83c 	bl	8000798 <Serial_PutByte>
          }
          break;
 8001720:	bf00      	nop
    while ((file_done == 0) && (result == COM_OK))
 8001722:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001724:	2b00      	cmp	r3, #0
 8001726:	d104      	bne.n	8001732 <Ymodem_Receive+0x216>
 8001728:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800172c:	2b00      	cmp	r3, #0
 800172e:	f43f af0b 	beq.w	8001548 <Ymodem_Receive+0x2c>
  while ((session_done == 0) && (result == COM_OK))
 8001732:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001734:	2b00      	cmp	r3, #0
 8001736:	d104      	bne.n	8001742 <Ymodem_Receive+0x226>
 8001738:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800173c:	2b00      	cmp	r3, #0
 800173e:	f43f aefe 	beq.w	800153e <Ymodem_Receive+0x22>
      }
    }
  }
  return result;
 8001742:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8001746:	4618      	mov	r0, r3
 8001748:	3748      	adds	r7, #72	; 0x48
 800174a:	46bd      	mov	sp, r7
 800174c:	bd80      	pop	{r7, pc}
 800174e:	bf00      	nop
 8001750:	200004c8 	.word	0x200004c8
 8001754:	08010000 	.word	0x08010000
 8001758:	200000c0 	.word	0x200000c0
 800175c:	200000c4 	.word	0x200000c4
 8001760:	20000080 	.word	0x20000080
 8001764:	000f0001 	.word	0x000f0001
 8001768:	20000030 	.word	0x20000030

0800176c <Ymodem_Transmit>:
  * @param  p_file_name: Name of the file sent
  * @param  file_size: Size of the transmission
  * @retval COM_StatusTypeDef result of the communication
  */
COM_StatusTypeDef Ymodem_Transmit (uint8_t *p_buf, const uint8_t *p_file_name, uint32_t file_size)
{
 800176c:	b580      	push	{r7, lr}
 800176e:	b08e      	sub	sp, #56	; 0x38
 8001770:	af00      	add	r7, sp, #0
 8001772:	60f8      	str	r0, [r7, #12]
 8001774:	60b9      	str	r1, [r7, #8]
 8001776:	607a      	str	r2, [r7, #4]
  uint32_t errors = 0, ack_recpt = 0, size = 0, pkt_size;
 8001778:	2300      	movs	r3, #0
 800177a:	637b      	str	r3, [r7, #52]	; 0x34
 800177c:	2300      	movs	r3, #0
 800177e:	633b      	str	r3, [r7, #48]	; 0x30
 8001780:	2300      	movs	r3, #0
 8001782:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint8_t *p_buf_int;
  COM_StatusTypeDef result = COM_OK;
 8001784:	2300      	movs	r3, #0
 8001786:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  uint32_t blk_number = 1;
 800178a:	2301      	movs	r3, #1
 800178c:	61fb      	str	r3, [r7, #28]
#else /* CRC16_F */   
  uint8_t temp_chksum;
#endif /* CRC16_F */  

  /* Prepare first block - header */
  PrepareIntialPacket(aPacketData, p_file_name, file_size);
 800178e:	687a      	ldr	r2, [r7, #4]
 8001790:	68b9      	ldr	r1, [r7, #8]
 8001792:	4896      	ldr	r0, [pc, #600]	; (80019ec <Ymodem_Transmit+0x280>)
 8001794:	f7ff fd9c 	bl	80012d0 <PrepareIntialPacket>

  while (( !ack_recpt ) && ( result == COM_OK ))
 8001798:	e04c      	b.n	8001834 <Ymodem_Transmit+0xc8>
  {
    /* Send Packet */
    HAL_UART_Transmit(&UartHandle, &aPacketData[PACKET_START_INDEX], PACKET_SIZE + PACKET_HEADER_SIZE, NAK_TIMEOUT);
 800179a:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800179e:	2283      	movs	r2, #131	; 0x83
 80017a0:	4993      	ldr	r1, [pc, #588]	; (80019f0 <Ymodem_Transmit+0x284>)
 80017a2:	4894      	ldr	r0, [pc, #592]	; (80019f4 <Ymodem_Transmit+0x288>)
 80017a4:	f001 fe49 	bl	800343a <HAL_UART_Transmit>

    /* Send CRC or Check Sum based on CRC16_F */
#ifdef CRC16_F    
    temp_crc = Cal_CRC16(&aPacketData[PACKET_DATA_INDEX], PACKET_SIZE);
 80017a8:	2180      	movs	r1, #128	; 0x80
 80017aa:	4893      	ldr	r0, [pc, #588]	; (80019f8 <Ymodem_Transmit+0x28c>)
 80017ac:	f7ff fe85 	bl	80014ba <Cal_CRC16>
 80017b0:	4603      	mov	r3, r0
 80017b2:	617b      	str	r3, [r7, #20]
    Serial_PutByte(temp_crc >> 8);
 80017b4:	697b      	ldr	r3, [r7, #20]
 80017b6:	0a1b      	lsrs	r3, r3, #8
 80017b8:	b2db      	uxtb	r3, r3
 80017ba:	4618      	mov	r0, r3
 80017bc:	f7fe ffec 	bl	8000798 <Serial_PutByte>
    Serial_PutByte(temp_crc & 0xFF);
 80017c0:	697b      	ldr	r3, [r7, #20]
 80017c2:	b2db      	uxtb	r3, r3
 80017c4:	4618      	mov	r0, r3
 80017c6:	f7fe ffe7 	bl	8000798 <Serial_PutByte>
    temp_chksum = CalcChecksum (&aPacketData[PACKET_DATA_INDEX], PACKET_SIZE);
    Serial_PutByte(temp_chksum);
#endif /* CRC16_F */

    /* Wait for Ack and 'C' */
    if (HAL_UART_Receive(&UartHandle, &a_rx_ctrl[0], 1, NAK_TIMEOUT) == HAL_OK)
 80017ca:	f107 0110 	add.w	r1, r7, #16
 80017ce:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80017d2:	2201      	movs	r2, #1
 80017d4:	4887      	ldr	r0, [pc, #540]	; (80019f4 <Ymodem_Transmit+0x288>)
 80017d6:	f001 fec9 	bl	800356c <HAL_UART_Receive>
 80017da:	4603      	mov	r3, r0
 80017dc:	2b00      	cmp	r3, #0
 80017de:	d120      	bne.n	8001822 <Ymodem_Transmit+0xb6>
    {
      if (a_rx_ctrl[0] == ACK)
 80017e0:	7c3b      	ldrb	r3, [r7, #16]
 80017e2:	2b06      	cmp	r3, #6
 80017e4:	d102      	bne.n	80017ec <Ymodem_Transmit+0x80>
      {
        ack_recpt = 1;
 80017e6:	2301      	movs	r3, #1
 80017e8:	633b      	str	r3, [r7, #48]	; 0x30
 80017ea:	e01d      	b.n	8001828 <Ymodem_Transmit+0xbc>
      }
      else if (a_rx_ctrl[0] == CA)
 80017ec:	7c3b      	ldrb	r3, [r7, #16]
 80017ee:	2b18      	cmp	r3, #24
 80017f0:	d11a      	bne.n	8001828 <Ymodem_Transmit+0xbc>
      {
        if ((HAL_UART_Receive(&UartHandle, &a_rx_ctrl[0], 1, NAK_TIMEOUT) == HAL_OK) && (a_rx_ctrl[0] == CA))
 80017f2:	f107 0110 	add.w	r1, r7, #16
 80017f6:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80017fa:	2201      	movs	r2, #1
 80017fc:	487d      	ldr	r0, [pc, #500]	; (80019f4 <Ymodem_Transmit+0x288>)
 80017fe:	f001 feb5 	bl	800356c <HAL_UART_Receive>
 8001802:	4603      	mov	r3, r0
 8001804:	2b00      	cmp	r3, #0
 8001806:	d10f      	bne.n	8001828 <Ymodem_Transmit+0xbc>
 8001808:	7c3b      	ldrb	r3, [r7, #16]
 800180a:	2b18      	cmp	r3, #24
 800180c:	d10c      	bne.n	8001828 <Ymodem_Transmit+0xbc>
        {
          HAL_Delay( 2 );
 800180e:	2002      	movs	r0, #2
 8001810:	f000 f9d8 	bl	8001bc4 <HAL_Delay>
          __HAL_UART_FLUSH_DRREGISTER(&UartHandle);
 8001814:	4b77      	ldr	r3, [pc, #476]	; (80019f4 <Ymodem_Transmit+0x288>)
 8001816:	681b      	ldr	r3, [r3, #0]
 8001818:	685b      	ldr	r3, [r3, #4]
          result = COM_ABORT;
 800181a:	2302      	movs	r3, #2
 800181c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8001820:	e002      	b.n	8001828 <Ymodem_Transmit+0xbc>
        }
      }
    }
    else
    {
      errors++;
 8001822:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001824:	3301      	adds	r3, #1
 8001826:	637b      	str	r3, [r7, #52]	; 0x34
    }
    if (errors >= MAX_ERRORS)
 8001828:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800182a:	2b04      	cmp	r3, #4
 800182c:	d902      	bls.n	8001834 <Ymodem_Transmit+0xc8>
    {
      result = COM_ERROR;
 800182e:	2301      	movs	r3, #1
 8001830:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  while (( !ack_recpt ) && ( result == COM_OK ))
 8001834:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001836:	2b00      	cmp	r3, #0
 8001838:	d103      	bne.n	8001842 <Ymodem_Transmit+0xd6>
 800183a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800183e:	2b00      	cmp	r3, #0
 8001840:	d0ab      	beq.n	800179a <Ymodem_Transmit+0x2e>
    }
  }

  p_buf_int = p_buf;
 8001842:	68fb      	ldr	r3, [r7, #12]
 8001844:	627b      	str	r3, [r7, #36]	; 0x24
  size = file_size;
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Here 1024 bytes length is used to send the packets */
  while ((size) && (result == COM_OK ))
 800184a:	e071      	b.n	8001930 <Ymodem_Transmit+0x1c4>
  {
    /* Prepare next packet */
    PreparePacket(p_buf_int, aPacketData, blk_number, size);
 800184c:	69fb      	ldr	r3, [r7, #28]
 800184e:	b2da      	uxtb	r2, r3
 8001850:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001852:	4966      	ldr	r1, [pc, #408]	; (80019ec <Ymodem_Transmit+0x280>)
 8001854:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8001856:	f7ff fd9e 	bl	8001396 <PreparePacket>
    ack_recpt = 0;
 800185a:	2300      	movs	r3, #0
 800185c:	633b      	str	r3, [r7, #48]	; 0x30
    a_rx_ctrl[0] = 0;
 800185e:	2300      	movs	r3, #0
 8001860:	743b      	strb	r3, [r7, #16]
    errors = 0;
 8001862:	2300      	movs	r3, #0
 8001864:	637b      	str	r3, [r7, #52]	; 0x34

    /* Resend packet if NAK for few times else end of communication */
    while (( !ack_recpt ) && ( result == COM_OK ))
 8001866:	e05c      	b.n	8001922 <Ymodem_Transmit+0x1b6>
    {
      /* Send next packet */
      if (size >= PACKET_1K_SIZE)
 8001868:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800186a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800186e:	d303      	bcc.n	8001878 <Ymodem_Transmit+0x10c>
      {
        pkt_size = PACKET_1K_SIZE;
 8001870:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001874:	62bb      	str	r3, [r7, #40]	; 0x28
 8001876:	e001      	b.n	800187c <Ymodem_Transmit+0x110>
      }
      else
      {
        pkt_size = PACKET_SIZE;
 8001878:	2380      	movs	r3, #128	; 0x80
 800187a:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      HAL_UART_Transmit(&UartHandle, &aPacketData[PACKET_START_INDEX], pkt_size + PACKET_HEADER_SIZE, NAK_TIMEOUT);
 800187c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800187e:	b29b      	uxth	r3, r3
 8001880:	3303      	adds	r3, #3
 8001882:	b29a      	uxth	r2, r3
 8001884:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8001888:	4959      	ldr	r1, [pc, #356]	; (80019f0 <Ymodem_Transmit+0x284>)
 800188a:	485a      	ldr	r0, [pc, #360]	; (80019f4 <Ymodem_Transmit+0x288>)
 800188c:	f001 fdd5 	bl	800343a <HAL_UART_Transmit>
      
      /* Send CRC or Check Sum based on CRC16_F */
#ifdef CRC16_F    
      temp_crc = Cal_CRC16(&aPacketData[PACKET_DATA_INDEX], pkt_size);
 8001890:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001892:	4859      	ldr	r0, [pc, #356]	; (80019f8 <Ymodem_Transmit+0x28c>)
 8001894:	f7ff fe11 	bl	80014ba <Cal_CRC16>
 8001898:	4603      	mov	r3, r0
 800189a:	617b      	str	r3, [r7, #20]
      Serial_PutByte(temp_crc >> 8);
 800189c:	697b      	ldr	r3, [r7, #20]
 800189e:	0a1b      	lsrs	r3, r3, #8
 80018a0:	b2db      	uxtb	r3, r3
 80018a2:	4618      	mov	r0, r3
 80018a4:	f7fe ff78 	bl	8000798 <Serial_PutByte>
      Serial_PutByte(temp_crc & 0xFF);
 80018a8:	697b      	ldr	r3, [r7, #20]
 80018aa:	b2db      	uxtb	r3, r3
 80018ac:	4618      	mov	r0, r3
 80018ae:	f7fe ff73 	bl	8000798 <Serial_PutByte>
      temp_chksum = CalcChecksum (&aPacketData[PACKET_DATA_INDEX], pkt_size);
      Serial_PutByte(temp_chksum);
#endif /* CRC16_F */
      
      /* Wait for Ack */
      if ((HAL_UART_Receive(&UartHandle, &a_rx_ctrl[0], 1, NAK_TIMEOUT) == HAL_OK) && (a_rx_ctrl[0] == ACK))
 80018b2:	f107 0110 	add.w	r1, r7, #16
 80018b6:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80018ba:	2201      	movs	r2, #1
 80018bc:	484d      	ldr	r0, [pc, #308]	; (80019f4 <Ymodem_Transmit+0x288>)
 80018be:	f001 fe55 	bl	800356c <HAL_UART_Receive>
 80018c2:	4603      	mov	r3, r0
 80018c4:	2b00      	cmp	r3, #0
 80018c6:	d123      	bne.n	8001910 <Ymodem_Transmit+0x1a4>
 80018c8:	7c3b      	ldrb	r3, [r7, #16]
 80018ca:	2b06      	cmp	r3, #6
 80018cc:	d120      	bne.n	8001910 <Ymodem_Transmit+0x1a4>
      {
        ack_recpt = 1;
 80018ce:	2301      	movs	r3, #1
 80018d0:	633b      	str	r3, [r7, #48]	; 0x30
        if (size > pkt_size)
 80018d2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80018d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80018d6:	429a      	cmp	r2, r3
 80018d8:	d913      	bls.n	8001902 <Ymodem_Transmit+0x196>
        {
          p_buf_int += pkt_size;
 80018da:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80018dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80018de:	4413      	add	r3, r2
 80018e0:	627b      	str	r3, [r7, #36]	; 0x24
          size -= pkt_size;
 80018e2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80018e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80018e6:	1ad3      	subs	r3, r2, r3
 80018e8:	62fb      	str	r3, [r7, #44]	; 0x2c
          if (blk_number == (USER_FLASH_SIZE / PACKET_1K_SIZE))
 80018ea:	69fb      	ldr	r3, [r7, #28]
 80018ec:	f5b3 7f70 	cmp.w	r3, #960	; 0x3c0
 80018f0:	d103      	bne.n	80018fa <Ymodem_Transmit+0x18e>
          {
            result = COM_LIMIT; /* boundary error */
 80018f2:	2305      	movs	r3, #5
 80018f4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        if (size > pkt_size)
 80018f8:	e00d      	b.n	8001916 <Ymodem_Transmit+0x1aa>
          }
          else
          {
            blk_number++;
 80018fa:	69fb      	ldr	r3, [r7, #28]
 80018fc:	3301      	adds	r3, #1
 80018fe:	61fb      	str	r3, [r7, #28]
        if (size > pkt_size)
 8001900:	e009      	b.n	8001916 <Ymodem_Transmit+0x1aa>
          }
        }
        else
        {
          p_buf_int += pkt_size;
 8001902:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001904:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001906:	4413      	add	r3, r2
 8001908:	627b      	str	r3, [r7, #36]	; 0x24
          size = 0;
 800190a:	2300      	movs	r3, #0
 800190c:	62fb      	str	r3, [r7, #44]	; 0x2c
        if (size > pkt_size)
 800190e:	e002      	b.n	8001916 <Ymodem_Transmit+0x1aa>
        }
      }
      else
      {
        errors++;
 8001910:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001912:	3301      	adds	r3, #1
 8001914:	637b      	str	r3, [r7, #52]	; 0x34
      }

      /* Resend packet if NAK  for a count of 10 else end of communication */
      if (errors >= MAX_ERRORS)
 8001916:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001918:	2b04      	cmp	r3, #4
 800191a:	d902      	bls.n	8001922 <Ymodem_Transmit+0x1b6>
      {
        result = COM_ERROR;
 800191c:	2301      	movs	r3, #1
 800191e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    while (( !ack_recpt ) && ( result == COM_OK ))
 8001922:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001924:	2b00      	cmp	r3, #0
 8001926:	d103      	bne.n	8001930 <Ymodem_Transmit+0x1c4>
 8001928:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800192c:	2b00      	cmp	r3, #0
 800192e:	d09b      	beq.n	8001868 <Ymodem_Transmit+0xfc>
  while ((size) && (result == COM_OK ))
 8001930:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001932:	2b00      	cmp	r3, #0
 8001934:	d003      	beq.n	800193e <Ymodem_Transmit+0x1d2>
 8001936:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800193a:	2b00      	cmp	r3, #0
 800193c:	d086      	beq.n	800184c <Ymodem_Transmit+0xe0>
      }
    }
  }

  /* Sending End Of Transmission char */
  ack_recpt = 0;
 800193e:	2300      	movs	r3, #0
 8001940:	633b      	str	r3, [r7, #48]	; 0x30
  a_rx_ctrl[0] = 0x00;
 8001942:	2300      	movs	r3, #0
 8001944:	743b      	strb	r3, [r7, #16]
  errors = 0;
 8001946:	2300      	movs	r3, #0
 8001948:	637b      	str	r3, [r7, #52]	; 0x34
  while (( !ack_recpt ) && ( result == COM_OK ))
 800194a:	e037      	b.n	80019bc <Ymodem_Transmit+0x250>
  {
    Serial_PutByte(EOT);
 800194c:	2004      	movs	r0, #4
 800194e:	f7fe ff23 	bl	8000798 <Serial_PutByte>

    /* Wait for Ack */
    if (HAL_UART_Receive(&UartHandle, &a_rx_ctrl[0], 1, NAK_TIMEOUT) == HAL_OK)
 8001952:	f107 0110 	add.w	r1, r7, #16
 8001956:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800195a:	2201      	movs	r2, #1
 800195c:	4825      	ldr	r0, [pc, #148]	; (80019f4 <Ymodem_Transmit+0x288>)
 800195e:	f001 fe05 	bl	800356c <HAL_UART_Receive>
 8001962:	4603      	mov	r3, r0
 8001964:	2b00      	cmp	r3, #0
 8001966:	d120      	bne.n	80019aa <Ymodem_Transmit+0x23e>
    {
      if (a_rx_ctrl[0] == ACK)
 8001968:	7c3b      	ldrb	r3, [r7, #16]
 800196a:	2b06      	cmp	r3, #6
 800196c:	d102      	bne.n	8001974 <Ymodem_Transmit+0x208>
      {
        ack_recpt = 1;
 800196e:	2301      	movs	r3, #1
 8001970:	633b      	str	r3, [r7, #48]	; 0x30
 8001972:	e01d      	b.n	80019b0 <Ymodem_Transmit+0x244>
      }
      else if (a_rx_ctrl[0] == CA)
 8001974:	7c3b      	ldrb	r3, [r7, #16]
 8001976:	2b18      	cmp	r3, #24
 8001978:	d11a      	bne.n	80019b0 <Ymodem_Transmit+0x244>
      {
        if ((HAL_UART_Receive(&UartHandle, &a_rx_ctrl[0], 1, NAK_TIMEOUT) == HAL_OK) && (a_rx_ctrl[0] == CA))
 800197a:	f107 0110 	add.w	r1, r7, #16
 800197e:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8001982:	2201      	movs	r2, #1
 8001984:	481b      	ldr	r0, [pc, #108]	; (80019f4 <Ymodem_Transmit+0x288>)
 8001986:	f001 fdf1 	bl	800356c <HAL_UART_Receive>
 800198a:	4603      	mov	r3, r0
 800198c:	2b00      	cmp	r3, #0
 800198e:	d10f      	bne.n	80019b0 <Ymodem_Transmit+0x244>
 8001990:	7c3b      	ldrb	r3, [r7, #16]
 8001992:	2b18      	cmp	r3, #24
 8001994:	d10c      	bne.n	80019b0 <Ymodem_Transmit+0x244>
        {
          HAL_Delay( 2 );
 8001996:	2002      	movs	r0, #2
 8001998:	f000 f914 	bl	8001bc4 <HAL_Delay>
          __HAL_UART_FLUSH_DRREGISTER(&UartHandle);
 800199c:	4b15      	ldr	r3, [pc, #84]	; (80019f4 <Ymodem_Transmit+0x288>)
 800199e:	681b      	ldr	r3, [r3, #0]
 80019a0:	685b      	ldr	r3, [r3, #4]
          result = COM_ABORT;
 80019a2:	2302      	movs	r3, #2
 80019a4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80019a8:	e002      	b.n	80019b0 <Ymodem_Transmit+0x244>
        }
      }
    }
    else
    {
      errors++;
 80019aa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80019ac:	3301      	adds	r3, #1
 80019ae:	637b      	str	r3, [r7, #52]	; 0x34
    }

    if (errors >=  MAX_ERRORS)
 80019b0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80019b2:	2b04      	cmp	r3, #4
 80019b4:	d902      	bls.n	80019bc <Ymodem_Transmit+0x250>
    {
      result = COM_ERROR;
 80019b6:	2301      	movs	r3, #1
 80019b8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  while (( !ack_recpt ) && ( result == COM_OK ))
 80019bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80019be:	2b00      	cmp	r3, #0
 80019c0:	d103      	bne.n	80019ca <Ymodem_Transmit+0x25e>
 80019c2:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80019c6:	2b00      	cmp	r3, #0
 80019c8:	d0c0      	beq.n	800194c <Ymodem_Transmit+0x1e0>
    }
  }

  /* Empty packet sent - some terminal emulators need this to close session */
  if ( result == COM_OK )
 80019ca:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80019ce:	2b00      	cmp	r3, #0
 80019d0:	d14d      	bne.n	8001a6e <Ymodem_Transmit+0x302>
  {
    /* Preparing an empty packet */
    aPacketData[PACKET_START_INDEX] = SOH;
 80019d2:	4b06      	ldr	r3, [pc, #24]	; (80019ec <Ymodem_Transmit+0x280>)
 80019d4:	2201      	movs	r2, #1
 80019d6:	705a      	strb	r2, [r3, #1]
    aPacketData[PACKET_NUMBER_INDEX] = 0;
 80019d8:	4b04      	ldr	r3, [pc, #16]	; (80019ec <Ymodem_Transmit+0x280>)
 80019da:	2200      	movs	r2, #0
 80019dc:	709a      	strb	r2, [r3, #2]
    aPacketData[PACKET_CNUMBER_INDEX] = 0xFF;
 80019de:	4b03      	ldr	r3, [pc, #12]	; (80019ec <Ymodem_Transmit+0x280>)
 80019e0:	22ff      	movs	r2, #255	; 0xff
 80019e2:	70da      	strb	r2, [r3, #3]
    for (i = PACKET_DATA_INDEX; i < (PACKET_SIZE + PACKET_DATA_INDEX); i++)
 80019e4:	2304      	movs	r3, #4
 80019e6:	76fb      	strb	r3, [r7, #27]
 80019e8:	e00f      	b.n	8001a0a <Ymodem_Transmit+0x29e>
 80019ea:	bf00      	nop
 80019ec:	200000c0 	.word	0x200000c0
 80019f0:	200000c1 	.word	0x200000c1
 80019f4:	20000030 	.word	0x20000030
 80019f8:	200000c4 	.word	0x200000c4
    {
      aPacketData [i] = 0x00;
 80019fc:	7efb      	ldrb	r3, [r7, #27]
 80019fe:	4a1f      	ldr	r2, [pc, #124]	; (8001a7c <Ymodem_Transmit+0x310>)
 8001a00:	2100      	movs	r1, #0
 8001a02:	54d1      	strb	r1, [r2, r3]
    for (i = PACKET_DATA_INDEX; i < (PACKET_SIZE + PACKET_DATA_INDEX); i++)
 8001a04:	7efb      	ldrb	r3, [r7, #27]
 8001a06:	3301      	adds	r3, #1
 8001a08:	76fb      	strb	r3, [r7, #27]
 8001a0a:	7efb      	ldrb	r3, [r7, #27]
 8001a0c:	2b83      	cmp	r3, #131	; 0x83
 8001a0e:	d9f5      	bls.n	80019fc <Ymodem_Transmit+0x290>
    }

    /* Send Packet */
    HAL_UART_Transmit(&UartHandle, &aPacketData[PACKET_START_INDEX], PACKET_SIZE + PACKET_HEADER_SIZE, NAK_TIMEOUT);
 8001a10:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8001a14:	2283      	movs	r2, #131	; 0x83
 8001a16:	491a      	ldr	r1, [pc, #104]	; (8001a80 <Ymodem_Transmit+0x314>)
 8001a18:	481a      	ldr	r0, [pc, #104]	; (8001a84 <Ymodem_Transmit+0x318>)
 8001a1a:	f001 fd0e 	bl	800343a <HAL_UART_Transmit>

    /* Send CRC or Check Sum based on CRC16_F */
#ifdef CRC16_F    
    temp_crc = Cal_CRC16(&aPacketData[PACKET_DATA_INDEX], PACKET_SIZE);
 8001a1e:	2180      	movs	r1, #128	; 0x80
 8001a20:	4819      	ldr	r0, [pc, #100]	; (8001a88 <Ymodem_Transmit+0x31c>)
 8001a22:	f7ff fd4a 	bl	80014ba <Cal_CRC16>
 8001a26:	4603      	mov	r3, r0
 8001a28:	617b      	str	r3, [r7, #20]
    Serial_PutByte(temp_crc >> 8);
 8001a2a:	697b      	ldr	r3, [r7, #20]
 8001a2c:	0a1b      	lsrs	r3, r3, #8
 8001a2e:	b2db      	uxtb	r3, r3
 8001a30:	4618      	mov	r0, r3
 8001a32:	f7fe feb1 	bl	8000798 <Serial_PutByte>
    Serial_PutByte(temp_crc & 0xFF);
 8001a36:	697b      	ldr	r3, [r7, #20]
 8001a38:	b2db      	uxtb	r3, r3
 8001a3a:	4618      	mov	r0, r3
 8001a3c:	f7fe feac 	bl	8000798 <Serial_PutByte>
    temp_chksum = CalcChecksum (&aPacketData[PACKET_DATA_INDEX], PACKET_SIZE);
    Serial_PutByte(temp_chksum);
#endif /* CRC16_F */

    /* Wait for Ack and 'C' */
    if (HAL_UART_Receive(&UartHandle, &a_rx_ctrl[0], 1, NAK_TIMEOUT) == HAL_OK)
 8001a40:	f107 0110 	add.w	r1, r7, #16
 8001a44:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8001a48:	2201      	movs	r2, #1
 8001a4a:	480e      	ldr	r0, [pc, #56]	; (8001a84 <Ymodem_Transmit+0x318>)
 8001a4c:	f001 fd8e 	bl	800356c <HAL_UART_Receive>
 8001a50:	4603      	mov	r3, r0
 8001a52:	2b00      	cmp	r3, #0
 8001a54:	d10b      	bne.n	8001a6e <Ymodem_Transmit+0x302>
    {
      if (a_rx_ctrl[0] == CA)
 8001a56:	7c3b      	ldrb	r3, [r7, #16]
 8001a58:	2b18      	cmp	r3, #24
 8001a5a:	d108      	bne.n	8001a6e <Ymodem_Transmit+0x302>
      {
          HAL_Delay( 2 );
 8001a5c:	2002      	movs	r0, #2
 8001a5e:	f000 f8b1 	bl	8001bc4 <HAL_Delay>
          __HAL_UART_FLUSH_DRREGISTER(&UartHandle);
 8001a62:	4b08      	ldr	r3, [pc, #32]	; (8001a84 <Ymodem_Transmit+0x318>)
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	685b      	ldr	r3, [r3, #4]
          result = COM_ABORT;
 8001a68:	2302      	movs	r3, #2
 8001a6a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
      }
    }
  }

  return result; /* file transmitted successfully */
 8001a6e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 8001a72:	4618      	mov	r0, r3
 8001a74:	3738      	adds	r7, #56	; 0x38
 8001a76:	46bd      	mov	sp, r7
 8001a78:	bd80      	pop	{r7, pc}
 8001a7a:	bf00      	nop
 8001a7c:	200000c0 	.word	0x200000c0
 8001a80:	200000c1 	.word	0x200000c1
 8001a84:	20000030 	.word	0x20000030
 8001a88:	200000c4 	.word	0x200000c4

08001a8c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001a8c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001ac4 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8001a90:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8001a92:	e003      	b.n	8001a9c <LoopCopyDataInit>

08001a94 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8001a94:	4b0c      	ldr	r3, [pc, #48]	; (8001ac8 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8001a96:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8001a98:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8001a9a:	3104      	adds	r1, #4

08001a9c <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8001a9c:	480b      	ldr	r0, [pc, #44]	; (8001acc <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8001a9e:	4b0c      	ldr	r3, [pc, #48]	; (8001ad0 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8001aa0:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8001aa2:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8001aa4:	d3f6      	bcc.n	8001a94 <CopyDataInit>
  ldr  r2, =_sbss
 8001aa6:	4a0b      	ldr	r2, [pc, #44]	; (8001ad4 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8001aa8:	e002      	b.n	8001ab0 <LoopFillZerobss>

08001aaa <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8001aaa:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8001aac:	f842 3b04 	str.w	r3, [r2], #4

08001ab0 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8001ab0:	4b09      	ldr	r3, [pc, #36]	; (8001ad8 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8001ab2:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8001ab4:	d3f9      	bcc.n	8001aaa <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001ab6:	f7ff fb5b 	bl	8001170 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001aba:	f002 fc4f 	bl	800435c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001abe:	f7fe ffe7 	bl	8000a90 <main>
  bx  lr    
 8001ac2:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001ac4:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8001ac8:	0800489c 	.word	0x0800489c
  ldr  r0, =_sdata
 8001acc:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8001ad0:	20000010 	.word	0x20000010
  ldr  r2, =_sbss
 8001ad4:	20000010 	.word	0x20000010
  ldr  r3, = _ebss
 8001ad8:	200004f0 	.word	0x200004f0

08001adc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001adc:	e7fe      	b.n	8001adc <ADC_IRQHandler>
	...

08001ae0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001ae0:	b580      	push	{r7, lr}
 8001ae2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001ae4:	4b0e      	ldr	r3, [pc, #56]	; (8001b20 <HAL_Init+0x40>)
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	4a0d      	ldr	r2, [pc, #52]	; (8001b20 <HAL_Init+0x40>)
 8001aea:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001aee:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001af0:	4b0b      	ldr	r3, [pc, #44]	; (8001b20 <HAL_Init+0x40>)
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	4a0a      	ldr	r2, [pc, #40]	; (8001b20 <HAL_Init+0x40>)
 8001af6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001afa:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001afc:	4b08      	ldr	r3, [pc, #32]	; (8001b20 <HAL_Init+0x40>)
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	4a07      	ldr	r2, [pc, #28]	; (8001b20 <HAL_Init+0x40>)
 8001b02:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001b06:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001b08:	2003      	movs	r0, #3
 8001b0a:	f000 f94d 	bl	8001da8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001b0e:	2000      	movs	r0, #0
 8001b10:	f000 f808 	bl	8001b24 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001b14:	f7ff fa7c 	bl	8001010 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001b18:	2300      	movs	r3, #0
}
 8001b1a:	4618      	mov	r0, r3
 8001b1c:	bd80      	pop	{r7, pc}
 8001b1e:	bf00      	nop
 8001b20:	40023c00 	.word	0x40023c00

08001b24 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001b24:	b580      	push	{r7, lr}
 8001b26:	b082      	sub	sp, #8
 8001b28:	af00      	add	r7, sp, #0
 8001b2a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001b2c:	4b12      	ldr	r3, [pc, #72]	; (8001b78 <HAL_InitTick+0x54>)
 8001b2e:	681a      	ldr	r2, [r3, #0]
 8001b30:	4b12      	ldr	r3, [pc, #72]	; (8001b7c <HAL_InitTick+0x58>)
 8001b32:	781b      	ldrb	r3, [r3, #0]
 8001b34:	4619      	mov	r1, r3
 8001b36:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001b3a:	fbb3 f3f1 	udiv	r3, r3, r1
 8001b3e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001b42:	4618      	mov	r0, r3
 8001b44:	f000 f965 	bl	8001e12 <HAL_SYSTICK_Config>
 8001b48:	4603      	mov	r3, r0
 8001b4a:	2b00      	cmp	r3, #0
 8001b4c:	d001      	beq.n	8001b52 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001b4e:	2301      	movs	r3, #1
 8001b50:	e00e      	b.n	8001b70 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	2b0f      	cmp	r3, #15
 8001b56:	d80a      	bhi.n	8001b6e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001b58:	2200      	movs	r2, #0
 8001b5a:	6879      	ldr	r1, [r7, #4]
 8001b5c:	f04f 30ff 	mov.w	r0, #4294967295
 8001b60:	f000 f92d 	bl	8001dbe <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001b64:	4a06      	ldr	r2, [pc, #24]	; (8001b80 <HAL_InitTick+0x5c>)
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001b6a:	2300      	movs	r3, #0
 8001b6c:	e000      	b.n	8001b70 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001b6e:	2301      	movs	r3, #1
}
 8001b70:	4618      	mov	r0, r3
 8001b72:	3708      	adds	r7, #8
 8001b74:	46bd      	mov	sp, r7
 8001b76:	bd80      	pop	{r7, pc}
 8001b78:	20000004 	.word	0x20000004
 8001b7c:	2000000c 	.word	0x2000000c
 8001b80:	20000008 	.word	0x20000008

08001b84 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001b84:	b480      	push	{r7}
 8001b86:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001b88:	4b06      	ldr	r3, [pc, #24]	; (8001ba4 <HAL_IncTick+0x20>)
 8001b8a:	781b      	ldrb	r3, [r3, #0]
 8001b8c:	461a      	mov	r2, r3
 8001b8e:	4b06      	ldr	r3, [pc, #24]	; (8001ba8 <HAL_IncTick+0x24>)
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	4413      	add	r3, r2
 8001b94:	4a04      	ldr	r2, [pc, #16]	; (8001ba8 <HAL_IncTick+0x24>)
 8001b96:	6013      	str	r3, [r2, #0]
}
 8001b98:	bf00      	nop
 8001b9a:	46bd      	mov	sp, r7
 8001b9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ba0:	4770      	bx	lr
 8001ba2:	bf00      	nop
 8001ba4:	2000000c 	.word	0x2000000c
 8001ba8:	200004cc 	.word	0x200004cc

08001bac <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001bac:	b480      	push	{r7}
 8001bae:	af00      	add	r7, sp, #0
  return uwTick;
 8001bb0:	4b03      	ldr	r3, [pc, #12]	; (8001bc0 <HAL_GetTick+0x14>)
 8001bb2:	681b      	ldr	r3, [r3, #0]
}
 8001bb4:	4618      	mov	r0, r3
 8001bb6:	46bd      	mov	sp, r7
 8001bb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bbc:	4770      	bx	lr
 8001bbe:	bf00      	nop
 8001bc0:	200004cc 	.word	0x200004cc

08001bc4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001bc4:	b580      	push	{r7, lr}
 8001bc6:	b084      	sub	sp, #16
 8001bc8:	af00      	add	r7, sp, #0
 8001bca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001bcc:	f7ff ffee 	bl	8001bac <HAL_GetTick>
 8001bd0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001bd6:	68fb      	ldr	r3, [r7, #12]
 8001bd8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001bdc:	d005      	beq.n	8001bea <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001bde:	4b09      	ldr	r3, [pc, #36]	; (8001c04 <HAL_Delay+0x40>)
 8001be0:	781b      	ldrb	r3, [r3, #0]
 8001be2:	461a      	mov	r2, r3
 8001be4:	68fb      	ldr	r3, [r7, #12]
 8001be6:	4413      	add	r3, r2
 8001be8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001bea:	bf00      	nop
 8001bec:	f7ff ffde 	bl	8001bac <HAL_GetTick>
 8001bf0:	4602      	mov	r2, r0
 8001bf2:	68bb      	ldr	r3, [r7, #8]
 8001bf4:	1ad3      	subs	r3, r2, r3
 8001bf6:	68fa      	ldr	r2, [r7, #12]
 8001bf8:	429a      	cmp	r2, r3
 8001bfa:	d8f7      	bhi.n	8001bec <HAL_Delay+0x28>
  {
  }
}
 8001bfc:	bf00      	nop
 8001bfe:	3710      	adds	r7, #16
 8001c00:	46bd      	mov	sp, r7
 8001c02:	bd80      	pop	{r7, pc}
 8001c04:	2000000c 	.word	0x2000000c

08001c08 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001c08:	b480      	push	{r7}
 8001c0a:	b085      	sub	sp, #20
 8001c0c:	af00      	add	r7, sp, #0
 8001c0e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	f003 0307 	and.w	r3, r3, #7
 8001c16:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001c18:	4b0c      	ldr	r3, [pc, #48]	; (8001c4c <__NVIC_SetPriorityGrouping+0x44>)
 8001c1a:	68db      	ldr	r3, [r3, #12]
 8001c1c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001c1e:	68ba      	ldr	r2, [r7, #8]
 8001c20:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001c24:	4013      	ands	r3, r2
 8001c26:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001c28:	68fb      	ldr	r3, [r7, #12]
 8001c2a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001c2c:	68bb      	ldr	r3, [r7, #8]
 8001c2e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001c30:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001c34:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001c38:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001c3a:	4a04      	ldr	r2, [pc, #16]	; (8001c4c <__NVIC_SetPriorityGrouping+0x44>)
 8001c3c:	68bb      	ldr	r3, [r7, #8]
 8001c3e:	60d3      	str	r3, [r2, #12]
}
 8001c40:	bf00      	nop
 8001c42:	3714      	adds	r7, #20
 8001c44:	46bd      	mov	sp, r7
 8001c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c4a:	4770      	bx	lr
 8001c4c:	e000ed00 	.word	0xe000ed00

08001c50 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001c50:	b480      	push	{r7}
 8001c52:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001c54:	4b04      	ldr	r3, [pc, #16]	; (8001c68 <__NVIC_GetPriorityGrouping+0x18>)
 8001c56:	68db      	ldr	r3, [r3, #12]
 8001c58:	0a1b      	lsrs	r3, r3, #8
 8001c5a:	f003 0307 	and.w	r3, r3, #7
}
 8001c5e:	4618      	mov	r0, r3
 8001c60:	46bd      	mov	sp, r7
 8001c62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c66:	4770      	bx	lr
 8001c68:	e000ed00 	.word	0xe000ed00

08001c6c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001c6c:	b480      	push	{r7}
 8001c6e:	b083      	sub	sp, #12
 8001c70:	af00      	add	r7, sp, #0
 8001c72:	4603      	mov	r3, r0
 8001c74:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001c76:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c7a:	2b00      	cmp	r3, #0
 8001c7c:	db0b      	blt.n	8001c96 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001c7e:	79fb      	ldrb	r3, [r7, #7]
 8001c80:	f003 021f 	and.w	r2, r3, #31
 8001c84:	4907      	ldr	r1, [pc, #28]	; (8001ca4 <__NVIC_EnableIRQ+0x38>)
 8001c86:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c8a:	095b      	lsrs	r3, r3, #5
 8001c8c:	2001      	movs	r0, #1
 8001c8e:	fa00 f202 	lsl.w	r2, r0, r2
 8001c92:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001c96:	bf00      	nop
 8001c98:	370c      	adds	r7, #12
 8001c9a:	46bd      	mov	sp, r7
 8001c9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ca0:	4770      	bx	lr
 8001ca2:	bf00      	nop
 8001ca4:	e000e100 	.word	0xe000e100

08001ca8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001ca8:	b480      	push	{r7}
 8001caa:	b083      	sub	sp, #12
 8001cac:	af00      	add	r7, sp, #0
 8001cae:	4603      	mov	r3, r0
 8001cb0:	6039      	str	r1, [r7, #0]
 8001cb2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001cb4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001cb8:	2b00      	cmp	r3, #0
 8001cba:	db0a      	blt.n	8001cd2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001cbc:	683b      	ldr	r3, [r7, #0]
 8001cbe:	b2da      	uxtb	r2, r3
 8001cc0:	490c      	ldr	r1, [pc, #48]	; (8001cf4 <__NVIC_SetPriority+0x4c>)
 8001cc2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001cc6:	0112      	lsls	r2, r2, #4
 8001cc8:	b2d2      	uxtb	r2, r2
 8001cca:	440b      	add	r3, r1
 8001ccc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001cd0:	e00a      	b.n	8001ce8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001cd2:	683b      	ldr	r3, [r7, #0]
 8001cd4:	b2da      	uxtb	r2, r3
 8001cd6:	4908      	ldr	r1, [pc, #32]	; (8001cf8 <__NVIC_SetPriority+0x50>)
 8001cd8:	79fb      	ldrb	r3, [r7, #7]
 8001cda:	f003 030f 	and.w	r3, r3, #15
 8001cde:	3b04      	subs	r3, #4
 8001ce0:	0112      	lsls	r2, r2, #4
 8001ce2:	b2d2      	uxtb	r2, r2
 8001ce4:	440b      	add	r3, r1
 8001ce6:	761a      	strb	r2, [r3, #24]
}
 8001ce8:	bf00      	nop
 8001cea:	370c      	adds	r7, #12
 8001cec:	46bd      	mov	sp, r7
 8001cee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cf2:	4770      	bx	lr
 8001cf4:	e000e100 	.word	0xe000e100
 8001cf8:	e000ed00 	.word	0xe000ed00

08001cfc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001cfc:	b480      	push	{r7}
 8001cfe:	b089      	sub	sp, #36	; 0x24
 8001d00:	af00      	add	r7, sp, #0
 8001d02:	60f8      	str	r0, [r7, #12]
 8001d04:	60b9      	str	r1, [r7, #8]
 8001d06:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001d08:	68fb      	ldr	r3, [r7, #12]
 8001d0a:	f003 0307 	and.w	r3, r3, #7
 8001d0e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001d10:	69fb      	ldr	r3, [r7, #28]
 8001d12:	f1c3 0307 	rsb	r3, r3, #7
 8001d16:	2b04      	cmp	r3, #4
 8001d18:	bf28      	it	cs
 8001d1a:	2304      	movcs	r3, #4
 8001d1c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001d1e:	69fb      	ldr	r3, [r7, #28]
 8001d20:	3304      	adds	r3, #4
 8001d22:	2b06      	cmp	r3, #6
 8001d24:	d902      	bls.n	8001d2c <NVIC_EncodePriority+0x30>
 8001d26:	69fb      	ldr	r3, [r7, #28]
 8001d28:	3b03      	subs	r3, #3
 8001d2a:	e000      	b.n	8001d2e <NVIC_EncodePriority+0x32>
 8001d2c:	2300      	movs	r3, #0
 8001d2e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001d30:	f04f 32ff 	mov.w	r2, #4294967295
 8001d34:	69bb      	ldr	r3, [r7, #24]
 8001d36:	fa02 f303 	lsl.w	r3, r2, r3
 8001d3a:	43da      	mvns	r2, r3
 8001d3c:	68bb      	ldr	r3, [r7, #8]
 8001d3e:	401a      	ands	r2, r3
 8001d40:	697b      	ldr	r3, [r7, #20]
 8001d42:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001d44:	f04f 31ff 	mov.w	r1, #4294967295
 8001d48:	697b      	ldr	r3, [r7, #20]
 8001d4a:	fa01 f303 	lsl.w	r3, r1, r3
 8001d4e:	43d9      	mvns	r1, r3
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001d54:	4313      	orrs	r3, r2
         );
}
 8001d56:	4618      	mov	r0, r3
 8001d58:	3724      	adds	r7, #36	; 0x24
 8001d5a:	46bd      	mov	sp, r7
 8001d5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d60:	4770      	bx	lr
	...

08001d64 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001d64:	b580      	push	{r7, lr}
 8001d66:	b082      	sub	sp, #8
 8001d68:	af00      	add	r7, sp, #0
 8001d6a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	3b01      	subs	r3, #1
 8001d70:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001d74:	d301      	bcc.n	8001d7a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001d76:	2301      	movs	r3, #1
 8001d78:	e00f      	b.n	8001d9a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001d7a:	4a0a      	ldr	r2, [pc, #40]	; (8001da4 <SysTick_Config+0x40>)
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	3b01      	subs	r3, #1
 8001d80:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001d82:	210f      	movs	r1, #15
 8001d84:	f04f 30ff 	mov.w	r0, #4294967295
 8001d88:	f7ff ff8e 	bl	8001ca8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001d8c:	4b05      	ldr	r3, [pc, #20]	; (8001da4 <SysTick_Config+0x40>)
 8001d8e:	2200      	movs	r2, #0
 8001d90:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001d92:	4b04      	ldr	r3, [pc, #16]	; (8001da4 <SysTick_Config+0x40>)
 8001d94:	2207      	movs	r2, #7
 8001d96:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001d98:	2300      	movs	r3, #0
}
 8001d9a:	4618      	mov	r0, r3
 8001d9c:	3708      	adds	r7, #8
 8001d9e:	46bd      	mov	sp, r7
 8001da0:	bd80      	pop	{r7, pc}
 8001da2:	bf00      	nop
 8001da4:	e000e010 	.word	0xe000e010

08001da8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001da8:	b580      	push	{r7, lr}
 8001daa:	b082      	sub	sp, #8
 8001dac:	af00      	add	r7, sp, #0
 8001dae:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001db0:	6878      	ldr	r0, [r7, #4]
 8001db2:	f7ff ff29 	bl	8001c08 <__NVIC_SetPriorityGrouping>
}
 8001db6:	bf00      	nop
 8001db8:	3708      	adds	r7, #8
 8001dba:	46bd      	mov	sp, r7
 8001dbc:	bd80      	pop	{r7, pc}

08001dbe <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001dbe:	b580      	push	{r7, lr}
 8001dc0:	b086      	sub	sp, #24
 8001dc2:	af00      	add	r7, sp, #0
 8001dc4:	4603      	mov	r3, r0
 8001dc6:	60b9      	str	r1, [r7, #8]
 8001dc8:	607a      	str	r2, [r7, #4]
 8001dca:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001dcc:	2300      	movs	r3, #0
 8001dce:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001dd0:	f7ff ff3e 	bl	8001c50 <__NVIC_GetPriorityGrouping>
 8001dd4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001dd6:	687a      	ldr	r2, [r7, #4]
 8001dd8:	68b9      	ldr	r1, [r7, #8]
 8001dda:	6978      	ldr	r0, [r7, #20]
 8001ddc:	f7ff ff8e 	bl	8001cfc <NVIC_EncodePriority>
 8001de0:	4602      	mov	r2, r0
 8001de2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001de6:	4611      	mov	r1, r2
 8001de8:	4618      	mov	r0, r3
 8001dea:	f7ff ff5d 	bl	8001ca8 <__NVIC_SetPriority>
}
 8001dee:	bf00      	nop
 8001df0:	3718      	adds	r7, #24
 8001df2:	46bd      	mov	sp, r7
 8001df4:	bd80      	pop	{r7, pc}

08001df6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001df6:	b580      	push	{r7, lr}
 8001df8:	b082      	sub	sp, #8
 8001dfa:	af00      	add	r7, sp, #0
 8001dfc:	4603      	mov	r3, r0
 8001dfe:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001e00:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e04:	4618      	mov	r0, r3
 8001e06:	f7ff ff31 	bl	8001c6c <__NVIC_EnableIRQ>
}
 8001e0a:	bf00      	nop
 8001e0c:	3708      	adds	r7, #8
 8001e0e:	46bd      	mov	sp, r7
 8001e10:	bd80      	pop	{r7, pc}

08001e12 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001e12:	b580      	push	{r7, lr}
 8001e14:	b082      	sub	sp, #8
 8001e16:	af00      	add	r7, sp, #0
 8001e18:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001e1a:	6878      	ldr	r0, [r7, #4]
 8001e1c:	f7ff ffa2 	bl	8001d64 <SysTick_Config>
 8001e20:	4603      	mov	r3, r0
}
 8001e22:	4618      	mov	r0, r3
 8001e24:	3708      	adds	r7, #8
 8001e26:	46bd      	mov	sp, r7
 8001e28:	bd80      	pop	{r7, pc}

08001e2a <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001e2a:	b480      	push	{r7}
 8001e2c:	b083      	sub	sp, #12
 8001e2e:	af00      	add	r7, sp, #0
 8001e30:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001e38:	b2db      	uxtb	r3, r3
 8001e3a:	2b02      	cmp	r3, #2
 8001e3c:	d004      	beq.n	8001e48 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	2280      	movs	r2, #128	; 0x80
 8001e42:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8001e44:	2301      	movs	r3, #1
 8001e46:	e00c      	b.n	8001e62 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	2205      	movs	r2, #5
 8001e4c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	681a      	ldr	r2, [r3, #0]
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	f022 0201 	bic.w	r2, r2, #1
 8001e5e:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001e60:	2300      	movs	r3, #0
}
 8001e62:	4618      	mov	r0, r3
 8001e64:	370c      	adds	r7, #12
 8001e66:	46bd      	mov	sp, r7
 8001e68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e6c:	4770      	bx	lr
	...

08001e70 <HAL_FLASH_Program>:
  * @param  Data specifies the data to be programmed
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 8001e70:	b580      	push	{r7, lr}
 8001e72:	b086      	sub	sp, #24
 8001e74:	af00      	add	r7, sp, #0
 8001e76:	60f8      	str	r0, [r7, #12]
 8001e78:	60b9      	str	r1, [r7, #8]
 8001e7a:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status = HAL_ERROR;
 8001e7e:	2301      	movs	r3, #1
 8001e80:	75fb      	strb	r3, [r7, #23]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8001e82:	4b23      	ldr	r3, [pc, #140]	; (8001f10 <HAL_FLASH_Program+0xa0>)
 8001e84:	7e1b      	ldrb	r3, [r3, #24]
 8001e86:	2b01      	cmp	r3, #1
 8001e88:	d101      	bne.n	8001e8e <HAL_FLASH_Program+0x1e>
 8001e8a:	2302      	movs	r3, #2
 8001e8c:	e03b      	b.n	8001f06 <HAL_FLASH_Program+0x96>
 8001e8e:	4b20      	ldr	r3, [pc, #128]	; (8001f10 <HAL_FLASH_Program+0xa0>)
 8001e90:	2201      	movs	r2, #1
 8001e92:	761a      	strb	r2, [r3, #24]
  
  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));
  
  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8001e94:	f24c 3050 	movw	r0, #50000	; 0xc350
 8001e98:	f000 f8a0 	bl	8001fdc <FLASH_WaitForLastOperation>
 8001e9c:	4603      	mov	r3, r0
 8001e9e:	75fb      	strb	r3, [r7, #23]
  
  if(status == HAL_OK)
 8001ea0:	7dfb      	ldrb	r3, [r7, #23]
 8001ea2:	2b00      	cmp	r3, #0
 8001ea4:	d12b      	bne.n	8001efe <HAL_FLASH_Program+0x8e>
  {
    if(TypeProgram == FLASH_TYPEPROGRAM_BYTE)
 8001ea6:	68fb      	ldr	r3, [r7, #12]
 8001ea8:	2b00      	cmp	r3, #0
 8001eaa:	d105      	bne.n	8001eb8 <HAL_FLASH_Program+0x48>
    {
      /*Program byte (8-bit) at a specified address.*/
      FLASH_Program_Byte(Address, (uint8_t) Data);
 8001eac:	783b      	ldrb	r3, [r7, #0]
 8001eae:	4619      	mov	r1, r3
 8001eb0:	68b8      	ldr	r0, [r7, #8]
 8001eb2:	f000 f949 	bl	8002148 <FLASH_Program_Byte>
 8001eb6:	e016      	b.n	8001ee6 <HAL_FLASH_Program+0x76>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 8001eb8:	68fb      	ldr	r3, [r7, #12]
 8001eba:	2b01      	cmp	r3, #1
 8001ebc:	d105      	bne.n	8001eca <HAL_FLASH_Program+0x5a>
    {
      /*Program halfword (16-bit) at a specified address.*/
      FLASH_Program_HalfWord(Address, (uint16_t) Data);
 8001ebe:	883b      	ldrh	r3, [r7, #0]
 8001ec0:	4619      	mov	r1, r3
 8001ec2:	68b8      	ldr	r0, [r7, #8]
 8001ec4:	f000 f91c 	bl	8002100 <FLASH_Program_HalfWord>
 8001ec8:	e00d      	b.n	8001ee6 <HAL_FLASH_Program+0x76>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
 8001eca:	68fb      	ldr	r3, [r7, #12]
 8001ecc:	2b02      	cmp	r3, #2
 8001ece:	d105      	bne.n	8001edc <HAL_FLASH_Program+0x6c>
    {
      /*Program word (32-bit) at a specified address.*/
      FLASH_Program_Word(Address, (uint32_t) Data);
 8001ed0:	683b      	ldr	r3, [r7, #0]
 8001ed2:	4619      	mov	r1, r3
 8001ed4:	68b8      	ldr	r0, [r7, #8]
 8001ed6:	f000 f8f1 	bl	80020bc <FLASH_Program_Word>
 8001eda:	e004      	b.n	8001ee6 <HAL_FLASH_Program+0x76>
    }
    else
    {
      /*Program double word (64-bit) at a specified address.*/
      FLASH_Program_DoubleWord(Address, Data);
 8001edc:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001ee0:	68b8      	ldr	r0, [r7, #8]
 8001ee2:	f000 f8bb 	bl	800205c <FLASH_Program_DoubleWord>
    }
    
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8001ee6:	f24c 3050 	movw	r0, #50000	; 0xc350
 8001eea:	f000 f877 	bl	8001fdc <FLASH_WaitForLastOperation>
 8001eee:	4603      	mov	r3, r0
 8001ef0:	75fb      	strb	r3, [r7, #23]
    
    /* If the program operation is completed, disable the PG Bit */
    FLASH->CR &= (~FLASH_CR_PG);  
 8001ef2:	4b08      	ldr	r3, [pc, #32]	; (8001f14 <HAL_FLASH_Program+0xa4>)
 8001ef4:	691b      	ldr	r3, [r3, #16]
 8001ef6:	4a07      	ldr	r2, [pc, #28]	; (8001f14 <HAL_FLASH_Program+0xa4>)
 8001ef8:	f023 0301 	bic.w	r3, r3, #1
 8001efc:	6113      	str	r3, [r2, #16]
  }
  
  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8001efe:	4b04      	ldr	r3, [pc, #16]	; (8001f10 <HAL_FLASH_Program+0xa0>)
 8001f00:	2200      	movs	r2, #0
 8001f02:	761a      	strb	r2, [r3, #24]
  
  return status;
 8001f04:	7dfb      	ldrb	r3, [r7, #23]
}
 8001f06:	4618      	mov	r0, r3
 8001f08:	3718      	adds	r7, #24
 8001f0a:	46bd      	mov	sp, r7
 8001f0c:	bd80      	pop	{r7, pc}
 8001f0e:	bf00      	nop
 8001f10:	200004d0 	.word	0x200004d0
 8001f14:	40023c00 	.word	0x40023c00

08001f18 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 8001f18:	b480      	push	{r7}
 8001f1a:	b083      	sub	sp, #12
 8001f1c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 8001f1e:	2300      	movs	r3, #0
 8001f20:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8001f22:	4b0b      	ldr	r3, [pc, #44]	; (8001f50 <HAL_FLASH_Unlock+0x38>)
 8001f24:	691b      	ldr	r3, [r3, #16]
 8001f26:	2b00      	cmp	r3, #0
 8001f28:	da0b      	bge.n	8001f42 <HAL_FLASH_Unlock+0x2a>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 8001f2a:	4b09      	ldr	r3, [pc, #36]	; (8001f50 <HAL_FLASH_Unlock+0x38>)
 8001f2c:	4a09      	ldr	r2, [pc, #36]	; (8001f54 <HAL_FLASH_Unlock+0x3c>)
 8001f2e:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8001f30:	4b07      	ldr	r3, [pc, #28]	; (8001f50 <HAL_FLASH_Unlock+0x38>)
 8001f32:	4a09      	ldr	r2, [pc, #36]	; (8001f58 <HAL_FLASH_Unlock+0x40>)
 8001f34:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8001f36:	4b06      	ldr	r3, [pc, #24]	; (8001f50 <HAL_FLASH_Unlock+0x38>)
 8001f38:	691b      	ldr	r3, [r3, #16]
 8001f3a:	2b00      	cmp	r3, #0
 8001f3c:	da01      	bge.n	8001f42 <HAL_FLASH_Unlock+0x2a>
    {
      status = HAL_ERROR;
 8001f3e:	2301      	movs	r3, #1
 8001f40:	71fb      	strb	r3, [r7, #7]
    }
  }

  return status;
 8001f42:	79fb      	ldrb	r3, [r7, #7]
}
 8001f44:	4618      	mov	r0, r3
 8001f46:	370c      	adds	r7, #12
 8001f48:	46bd      	mov	sp, r7
 8001f4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f4e:	4770      	bx	lr
 8001f50:	40023c00 	.word	0x40023c00
 8001f54:	45670123 	.word	0x45670123
 8001f58:	cdef89ab 	.word	0xcdef89ab

08001f5c <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 8001f5c:	b480      	push	{r7}
 8001f5e:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  FLASH->CR |= FLASH_CR_LOCK;
 8001f60:	4b05      	ldr	r3, [pc, #20]	; (8001f78 <HAL_FLASH_Lock+0x1c>)
 8001f62:	691b      	ldr	r3, [r3, #16]
 8001f64:	4a04      	ldr	r2, [pc, #16]	; (8001f78 <HAL_FLASH_Lock+0x1c>)
 8001f66:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8001f6a:	6113      	str	r3, [r2, #16]
  
  return HAL_OK;  
 8001f6c:	2300      	movs	r3, #0
}
 8001f6e:	4618      	mov	r0, r3
 8001f70:	46bd      	mov	sp, r7
 8001f72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f76:	4770      	bx	lr
 8001f78:	40023c00 	.word	0x40023c00

08001f7c <HAL_FLASH_OB_Unlock>:
/**
  * @brief  Unlock the FLASH Option Control Registers access.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_OB_Unlock(void)
{
 8001f7c:	b480      	push	{r7}
 8001f7e:	af00      	add	r7, sp, #0
  if((FLASH->OPTCR & FLASH_OPTCR_OPTLOCK) != RESET)
 8001f80:	4b09      	ldr	r3, [pc, #36]	; (8001fa8 <HAL_FLASH_OB_Unlock+0x2c>)
 8001f82:	695b      	ldr	r3, [r3, #20]
 8001f84:	f003 0301 	and.w	r3, r3, #1
 8001f88:	2b00      	cmp	r3, #0
 8001f8a:	d007      	beq.n	8001f9c <HAL_FLASH_OB_Unlock+0x20>
  {
    /* Authorizes the Option Byte register programming */
    FLASH->OPTKEYR = FLASH_OPT_KEY1;
 8001f8c:	4b06      	ldr	r3, [pc, #24]	; (8001fa8 <HAL_FLASH_OB_Unlock+0x2c>)
 8001f8e:	4a07      	ldr	r2, [pc, #28]	; (8001fac <HAL_FLASH_OB_Unlock+0x30>)
 8001f90:	609a      	str	r2, [r3, #8]
    FLASH->OPTKEYR = FLASH_OPT_KEY2;
 8001f92:	4b05      	ldr	r3, [pc, #20]	; (8001fa8 <HAL_FLASH_OB_Unlock+0x2c>)
 8001f94:	4a06      	ldr	r2, [pc, #24]	; (8001fb0 <HAL_FLASH_OB_Unlock+0x34>)
 8001f96:	609a      	str	r2, [r3, #8]
  else
  {
    return HAL_ERROR;
  }  
  
  return HAL_OK;  
 8001f98:	2300      	movs	r3, #0
 8001f9a:	e000      	b.n	8001f9e <HAL_FLASH_OB_Unlock+0x22>
    return HAL_ERROR;
 8001f9c:	2301      	movs	r3, #1
}
 8001f9e:	4618      	mov	r0, r3
 8001fa0:	46bd      	mov	sp, r7
 8001fa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fa6:	4770      	bx	lr
 8001fa8:	40023c00 	.word	0x40023c00
 8001fac:	08192a3b 	.word	0x08192a3b
 8001fb0:	4c5d6e7f 	.word	0x4c5d6e7f

08001fb4 <HAL_FLASH_OB_Launch>:
/**
  * @brief  Launch the option byte loading.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_OB_Launch(void)
{
 8001fb4:	b580      	push	{r7, lr}
 8001fb6:	af00      	add	r7, sp, #0
  /* Set the OPTSTRT bit in OPTCR register */
  *(__IO uint8_t *)OPTCR_BYTE0_ADDRESS |= FLASH_OPTCR_OPTSTRT;
 8001fb8:	4b07      	ldr	r3, [pc, #28]	; (8001fd8 <HAL_FLASH_OB_Launch+0x24>)
 8001fba:	781b      	ldrb	r3, [r3, #0]
 8001fbc:	b2db      	uxtb	r3, r3
 8001fbe:	4a06      	ldr	r2, [pc, #24]	; (8001fd8 <HAL_FLASH_OB_Launch+0x24>)
 8001fc0:	f043 0302 	orr.w	r3, r3, #2
 8001fc4:	b2db      	uxtb	r3, r3
 8001fc6:	7013      	strb	r3, [r2, #0]

  /* Wait for last operation to be completed */
  return(FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE)); 
 8001fc8:	f24c 3050 	movw	r0, #50000	; 0xc350
 8001fcc:	f000 f806 	bl	8001fdc <FLASH_WaitForLastOperation>
 8001fd0:	4603      	mov	r3, r0
}
 8001fd2:	4618      	mov	r0, r3
 8001fd4:	bd80      	pop	{r7, pc}
 8001fd6:	bf00      	nop
 8001fd8:	40023c14 	.word	0x40023c14

08001fdc <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout maximum flash operationtimeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{ 
 8001fdc:	b580      	push	{r7, lr}
 8001fde:	b084      	sub	sp, #16
 8001fe0:	af00      	add	r7, sp, #0
 8001fe2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001fe4:	2300      	movs	r3, #0
 8001fe6:	60fb      	str	r3, [r7, #12]
  
  /* Clear Error Code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8001fe8:	4b1a      	ldr	r3, [pc, #104]	; (8002054 <FLASH_WaitForLastOperation+0x78>)
 8001fea:	2200      	movs	r2, #0
 8001fec:	61da      	str	r2, [r3, #28]
  
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
  /* Get tick */
  tickstart = HAL_GetTick();
 8001fee:	f7ff fddd 	bl	8001bac <HAL_GetTick>
 8001ff2:	60f8      	str	r0, [r7, #12]

  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 8001ff4:	e010      	b.n	8002018 <FLASH_WaitForLastOperation+0x3c>
  { 
    if(Timeout != HAL_MAX_DELAY)
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001ffc:	d00c      	beq.n	8002018 <FLASH_WaitForLastOperation+0x3c>
    {
      if((Timeout == 0U)||((HAL_GetTick() - tickstart ) > Timeout))
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	2b00      	cmp	r3, #0
 8002002:	d007      	beq.n	8002014 <FLASH_WaitForLastOperation+0x38>
 8002004:	f7ff fdd2 	bl	8001bac <HAL_GetTick>
 8002008:	4602      	mov	r2, r0
 800200a:	68fb      	ldr	r3, [r7, #12]
 800200c:	1ad3      	subs	r3, r2, r3
 800200e:	687a      	ldr	r2, [r7, #4]
 8002010:	429a      	cmp	r2, r3
 8002012:	d201      	bcs.n	8002018 <FLASH_WaitForLastOperation+0x3c>
      {
        return HAL_TIMEOUT;
 8002014:	2303      	movs	r3, #3
 8002016:	e019      	b.n	800204c <FLASH_WaitForLastOperation+0x70>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 8002018:	4b0f      	ldr	r3, [pc, #60]	; (8002058 <FLASH_WaitForLastOperation+0x7c>)
 800201a:	68db      	ldr	r3, [r3, #12]
 800201c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002020:	2b00      	cmp	r3, #0
 8002022:	d1e8      	bne.n	8001ff6 <FLASH_WaitForLastOperation+0x1a>
      }
    } 
  }

  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP) != RESET)
 8002024:	4b0c      	ldr	r3, [pc, #48]	; (8002058 <FLASH_WaitForLastOperation+0x7c>)
 8002026:	68db      	ldr	r3, [r3, #12]
 8002028:	f003 0301 	and.w	r3, r3, #1
 800202c:	2b00      	cmp	r3, #0
 800202e:	d002      	beq.n	8002036 <FLASH_WaitForLastOperation+0x5a>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8002030:	4b09      	ldr	r3, [pc, #36]	; (8002058 <FLASH_WaitForLastOperation+0x7c>)
 8002032:	2201      	movs	r2, #1
 8002034:	60da      	str	r2, [r3, #12]
  }
#if defined(FLASH_SR_RDERR)  
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
                           FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR | FLASH_FLAG_RDERR)) != RESET)
#else
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
 8002036:	4b08      	ldr	r3, [pc, #32]	; (8002058 <FLASH_WaitForLastOperation+0x7c>)
 8002038:	68db      	ldr	r3, [r3, #12]
 800203a:	f003 03f2 	and.w	r3, r3, #242	; 0xf2
 800203e:	2b00      	cmp	r3, #0
 8002040:	d003      	beq.n	800204a <FLASH_WaitForLastOperation+0x6e>
                           FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR)) != RESET)
#endif /* FLASH_SR_RDERR */
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 8002042:	f000 f8a3 	bl	800218c <FLASH_SetErrorCode>
    return HAL_ERROR;
 8002046:	2301      	movs	r3, #1
 8002048:	e000      	b.n	800204c <FLASH_WaitForLastOperation+0x70>
  }

  /* If there is no error flag set */
  return HAL_OK;
 800204a:	2300      	movs	r3, #0
  
}  
 800204c:	4618      	mov	r0, r3
 800204e:	3710      	adds	r7, #16
 8002050:	46bd      	mov	sp, r7
 8002052:	bd80      	pop	{r7, pc}
 8002054:	200004d0 	.word	0x200004d0
 8002058:	40023c00 	.word	0x40023c00

0800205c <FLASH_Program_DoubleWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 800205c:	b490      	push	{r4, r7}
 800205e:	b084      	sub	sp, #16
 8002060:	af00      	add	r7, sp, #0
 8002062:	60f8      	str	r0, [r7, #12]
 8002064:	e9c7 2300 	strd	r2, r3, [r7]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8002068:	4b13      	ldr	r3, [pc, #76]	; (80020b8 <FLASH_Program_DoubleWord+0x5c>)
 800206a:	691b      	ldr	r3, [r3, #16]
 800206c:	4a12      	ldr	r2, [pc, #72]	; (80020b8 <FLASH_Program_DoubleWord+0x5c>)
 800206e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002072:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_DOUBLE_WORD;
 8002074:	4b10      	ldr	r3, [pc, #64]	; (80020b8 <FLASH_Program_DoubleWord+0x5c>)
 8002076:	691b      	ldr	r3, [r3, #16]
 8002078:	4a0f      	ldr	r2, [pc, #60]	; (80020b8 <FLASH_Program_DoubleWord+0x5c>)
 800207a:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 800207e:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8002080:	4b0d      	ldr	r3, [pc, #52]	; (80020b8 <FLASH_Program_DoubleWord+0x5c>)
 8002082:	691b      	ldr	r3, [r3, #16]
 8002084:	4a0c      	ldr	r2, [pc, #48]	; (80020b8 <FLASH_Program_DoubleWord+0x5c>)
 8002086:	f043 0301 	orr.w	r3, r3, #1
 800208a:	6113      	str	r3, [r2, #16]

  /* Program first word */
  *(__IO uint32_t*)Address = (uint32_t)Data;
 800208c:	68fb      	ldr	r3, [r7, #12]
 800208e:	683a      	ldr	r2, [r7, #0]
 8002090:	601a      	str	r2, [r3, #0]
           so that all instructions following the ISB are fetched from cache or memory,
           after the instruction has been completed.
 */
__STATIC_FORCEINLINE void __ISB(void)
{
  __ASM volatile ("isb 0xF":::"memory");
 8002092:	f3bf 8f6f 	isb	sy
  /* Barrier to ensure programming is performed in 2 steps, in right order
    (independently of compiler optimization behavior) */
  __ISB();

  /* Program second word */
  *(__IO uint32_t*)(Address+4) = (uint32_t)(Data >> 32);
 8002096:	e9d7 1200 	ldrd	r1, r2, [r7]
 800209a:	f04f 0300 	mov.w	r3, #0
 800209e:	f04f 0400 	mov.w	r4, #0
 80020a2:	0013      	movs	r3, r2
 80020a4:	2400      	movs	r4, #0
 80020a6:	68fa      	ldr	r2, [r7, #12]
 80020a8:	3204      	adds	r2, #4
 80020aa:	6013      	str	r3, [r2, #0]
}
 80020ac:	bf00      	nop
 80020ae:	3710      	adds	r7, #16
 80020b0:	46bd      	mov	sp, r7
 80020b2:	bc90      	pop	{r4, r7}
 80020b4:	4770      	bx	lr
 80020b6:	bf00      	nop
 80020b8:	40023c00 	.word	0x40023c00

080020bc <FLASH_Program_Word>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Word(uint32_t Address, uint32_t Data)
{
 80020bc:	b480      	push	{r7}
 80020be:	b083      	sub	sp, #12
 80020c0:	af00      	add	r7, sp, #0
 80020c2:	6078      	str	r0, [r7, #4]
 80020c4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 80020c6:	4b0d      	ldr	r3, [pc, #52]	; (80020fc <FLASH_Program_Word+0x40>)
 80020c8:	691b      	ldr	r3, [r3, #16]
 80020ca:	4a0c      	ldr	r2, [pc, #48]	; (80020fc <FLASH_Program_Word+0x40>)
 80020cc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80020d0:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_WORD;
 80020d2:	4b0a      	ldr	r3, [pc, #40]	; (80020fc <FLASH_Program_Word+0x40>)
 80020d4:	691b      	ldr	r3, [r3, #16]
 80020d6:	4a09      	ldr	r2, [pc, #36]	; (80020fc <FLASH_Program_Word+0x40>)
 80020d8:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80020dc:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 80020de:	4b07      	ldr	r3, [pc, #28]	; (80020fc <FLASH_Program_Word+0x40>)
 80020e0:	691b      	ldr	r3, [r3, #16]
 80020e2:	4a06      	ldr	r2, [pc, #24]	; (80020fc <FLASH_Program_Word+0x40>)
 80020e4:	f043 0301 	orr.w	r3, r3, #1
 80020e8:	6113      	str	r3, [r2, #16]

  *(__IO uint32_t*)Address = Data;
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	683a      	ldr	r2, [r7, #0]
 80020ee:	601a      	str	r2, [r3, #0]
}
 80020f0:	bf00      	nop
 80020f2:	370c      	adds	r7, #12
 80020f4:	46bd      	mov	sp, r7
 80020f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020fa:	4770      	bx	lr
 80020fc:	40023c00 	.word	0x40023c00

08002100 <FLASH_Program_HalfWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 8002100:	b480      	push	{r7}
 8002102:	b083      	sub	sp, #12
 8002104:	af00      	add	r7, sp, #0
 8002106:	6078      	str	r0, [r7, #4]
 8002108:	460b      	mov	r3, r1
 800210a:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 800210c:	4b0d      	ldr	r3, [pc, #52]	; (8002144 <FLASH_Program_HalfWord+0x44>)
 800210e:	691b      	ldr	r3, [r3, #16]
 8002110:	4a0c      	ldr	r2, [pc, #48]	; (8002144 <FLASH_Program_HalfWord+0x44>)
 8002112:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002116:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_HALF_WORD;
 8002118:	4b0a      	ldr	r3, [pc, #40]	; (8002144 <FLASH_Program_HalfWord+0x44>)
 800211a:	691b      	ldr	r3, [r3, #16]
 800211c:	4a09      	ldr	r2, [pc, #36]	; (8002144 <FLASH_Program_HalfWord+0x44>)
 800211e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002122:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8002124:	4b07      	ldr	r3, [pc, #28]	; (8002144 <FLASH_Program_HalfWord+0x44>)
 8002126:	691b      	ldr	r3, [r3, #16]
 8002128:	4a06      	ldr	r2, [pc, #24]	; (8002144 <FLASH_Program_HalfWord+0x44>)
 800212a:	f043 0301 	orr.w	r3, r3, #1
 800212e:	6113      	str	r3, [r2, #16]

  *(__IO uint16_t*)Address = Data;
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	887a      	ldrh	r2, [r7, #2]
 8002134:	801a      	strh	r2, [r3, #0]
}
 8002136:	bf00      	nop
 8002138:	370c      	adds	r7, #12
 800213a:	46bd      	mov	sp, r7
 800213c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002140:	4770      	bx	lr
 8002142:	bf00      	nop
 8002144:	40023c00 	.word	0x40023c00

08002148 <FLASH_Program_Byte>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Byte(uint32_t Address, uint8_t Data)
{
 8002148:	b480      	push	{r7}
 800214a:	b083      	sub	sp, #12
 800214c:	af00      	add	r7, sp, #0
 800214e:	6078      	str	r0, [r7, #4]
 8002150:	460b      	mov	r3, r1
 8002152:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8002154:	4b0c      	ldr	r3, [pc, #48]	; (8002188 <FLASH_Program_Byte+0x40>)
 8002156:	691b      	ldr	r3, [r3, #16]
 8002158:	4a0b      	ldr	r2, [pc, #44]	; (8002188 <FLASH_Program_Byte+0x40>)
 800215a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800215e:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_BYTE;
 8002160:	4b09      	ldr	r3, [pc, #36]	; (8002188 <FLASH_Program_Byte+0x40>)
 8002162:	4a09      	ldr	r2, [pc, #36]	; (8002188 <FLASH_Program_Byte+0x40>)
 8002164:	691b      	ldr	r3, [r3, #16]
 8002166:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8002168:	4b07      	ldr	r3, [pc, #28]	; (8002188 <FLASH_Program_Byte+0x40>)
 800216a:	691b      	ldr	r3, [r3, #16]
 800216c:	4a06      	ldr	r2, [pc, #24]	; (8002188 <FLASH_Program_Byte+0x40>)
 800216e:	f043 0301 	orr.w	r3, r3, #1
 8002172:	6113      	str	r3, [r2, #16]

  *(__IO uint8_t*)Address = Data;
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	78fa      	ldrb	r2, [r7, #3]
 8002178:	701a      	strb	r2, [r3, #0]
}
 800217a:	bf00      	nop
 800217c:	370c      	adds	r7, #12
 800217e:	46bd      	mov	sp, r7
 8002180:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002184:	4770      	bx	lr
 8002186:	bf00      	nop
 8002188:	40023c00 	.word	0x40023c00

0800218c <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{ 
 800218c:	b480      	push	{r7}
 800218e:	af00      	add	r7, sp, #0
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) != RESET)
 8002190:	4b27      	ldr	r3, [pc, #156]	; (8002230 <FLASH_SetErrorCode+0xa4>)
 8002192:	68db      	ldr	r3, [r3, #12]
 8002194:	f003 0310 	and.w	r3, r3, #16
 8002198:	2b00      	cmp	r3, #0
 800219a:	d008      	beq.n	80021ae <FLASH_SetErrorCode+0x22>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 800219c:	4b25      	ldr	r3, [pc, #148]	; (8002234 <FLASH_SetErrorCode+0xa8>)
 800219e:	69db      	ldr	r3, [r3, #28]
 80021a0:	f043 0310 	orr.w	r3, r3, #16
 80021a4:	4a23      	ldr	r2, [pc, #140]	; (8002234 <FLASH_SetErrorCode+0xa8>)
 80021a6:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH write protection error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_WRPERR);
 80021a8:	4b21      	ldr	r3, [pc, #132]	; (8002230 <FLASH_SetErrorCode+0xa4>)
 80021aa:	2210      	movs	r2, #16
 80021ac:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR) != RESET)
 80021ae:	4b20      	ldr	r3, [pc, #128]	; (8002230 <FLASH_SetErrorCode+0xa4>)
 80021b0:	68db      	ldr	r3, [r3, #12]
 80021b2:	f003 0320 	and.w	r3, r3, #32
 80021b6:	2b00      	cmp	r3, #0
 80021b8:	d008      	beq.n	80021cc <FLASH_SetErrorCode+0x40>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_PGA;
 80021ba:	4b1e      	ldr	r3, [pc, #120]	; (8002234 <FLASH_SetErrorCode+0xa8>)
 80021bc:	69db      	ldr	r3, [r3, #28]
 80021be:	f043 0308 	orr.w	r3, r3, #8
 80021c2:	4a1c      	ldr	r2, [pc, #112]	; (8002234 <FLASH_SetErrorCode+0xa8>)
 80021c4:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH Programming alignment error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGAERR);
 80021c6:	4b1a      	ldr	r3, [pc, #104]	; (8002230 <FLASH_SetErrorCode+0xa4>)
 80021c8:	2220      	movs	r2, #32
 80021ca:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGPERR) != RESET)
 80021cc:	4b18      	ldr	r3, [pc, #96]	; (8002230 <FLASH_SetErrorCode+0xa4>)
 80021ce:	68db      	ldr	r3, [r3, #12]
 80021d0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80021d4:	2b00      	cmp	r3, #0
 80021d6:	d008      	beq.n	80021ea <FLASH_SetErrorCode+0x5e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGP;
 80021d8:	4b16      	ldr	r3, [pc, #88]	; (8002234 <FLASH_SetErrorCode+0xa8>)
 80021da:	69db      	ldr	r3, [r3, #28]
 80021dc:	f043 0304 	orr.w	r3, r3, #4
 80021e0:	4a14      	ldr	r2, [pc, #80]	; (8002234 <FLASH_SetErrorCode+0xa8>)
 80021e2:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming parallelism error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGPERR);
 80021e4:	4b12      	ldr	r3, [pc, #72]	; (8002230 <FLASH_SetErrorCode+0xa4>)
 80021e6:	2240      	movs	r2, #64	; 0x40
 80021e8:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGSERR) != RESET)
 80021ea:	4b11      	ldr	r3, [pc, #68]	; (8002230 <FLASH_SetErrorCode+0xa4>)
 80021ec:	68db      	ldr	r3, [r3, #12]
 80021ee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80021f2:	2b00      	cmp	r3, #0
 80021f4:	d008      	beq.n	8002208 <FLASH_SetErrorCode+0x7c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGS;
 80021f6:	4b0f      	ldr	r3, [pc, #60]	; (8002234 <FLASH_SetErrorCode+0xa8>)
 80021f8:	69db      	ldr	r3, [r3, #28]
 80021fa:	f043 0302 	orr.w	r3, r3, #2
 80021fe:	4a0d      	ldr	r2, [pc, #52]	; (8002234 <FLASH_SetErrorCode+0xa8>)
 8002200:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming sequence error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGSERR);
 8002202:	4b0b      	ldr	r3, [pc, #44]	; (8002230 <FLASH_SetErrorCode+0xa4>)
 8002204:	2280      	movs	r2, #128	; 0x80
 8002206:	60da      	str	r2, [r3, #12]
    
    /* Clear FLASH Proprietary readout protection error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_RDERR);
  }
#endif /* FLASH_SR_RDERR */  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPERR) != RESET)
 8002208:	4b09      	ldr	r3, [pc, #36]	; (8002230 <FLASH_SetErrorCode+0xa4>)
 800220a:	68db      	ldr	r3, [r3, #12]
 800220c:	f003 0302 	and.w	r3, r3, #2
 8002210:	2b00      	cmp	r3, #0
 8002212:	d008      	beq.n	8002226 <FLASH_SetErrorCode+0x9a>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPERATION;
 8002214:	4b07      	ldr	r3, [pc, #28]	; (8002234 <FLASH_SetErrorCode+0xa8>)
 8002216:	69db      	ldr	r3, [r3, #28]
 8002218:	f043 0320 	orr.w	r3, r3, #32
 800221c:	4a05      	ldr	r2, [pc, #20]	; (8002234 <FLASH_SetErrorCode+0xa8>)
 800221e:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Operation error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPERR);
 8002220:	4b03      	ldr	r3, [pc, #12]	; (8002230 <FLASH_SetErrorCode+0xa4>)
 8002222:	2202      	movs	r2, #2
 8002224:	60da      	str	r2, [r3, #12]
  }
}
 8002226:	bf00      	nop
 8002228:	46bd      	mov	sp, r7
 800222a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800222e:	4770      	bx	lr
 8002230:	40023c00 	.word	0x40023c00
 8002234:	200004d0 	.word	0x200004d0

08002238 <HAL_FLASHEx_Erase>:
  *         (0xFFFFFFFFU means that all the sectors have been correctly erased)
  * 
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *SectorError)
{
 8002238:	b580      	push	{r7, lr}
 800223a:	b084      	sub	sp, #16
 800223c:	af00      	add	r7, sp, #0
 800223e:	6078      	str	r0, [r7, #4]
 8002240:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_ERROR;
 8002242:	2301      	movs	r3, #1
 8002244:	73fb      	strb	r3, [r7, #15]
  uint32_t index = 0U;
 8002246:	2300      	movs	r3, #0
 8002248:	60bb      	str	r3, [r7, #8]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 800224a:	4b31      	ldr	r3, [pc, #196]	; (8002310 <HAL_FLASHEx_Erase+0xd8>)
 800224c:	7e1b      	ldrb	r3, [r3, #24]
 800224e:	2b01      	cmp	r3, #1
 8002250:	d101      	bne.n	8002256 <HAL_FLASHEx_Erase+0x1e>
 8002252:	2302      	movs	r3, #2
 8002254:	e058      	b.n	8002308 <HAL_FLASHEx_Erase+0xd0>
 8002256:	4b2e      	ldr	r3, [pc, #184]	; (8002310 <HAL_FLASHEx_Erase+0xd8>)
 8002258:	2201      	movs	r2, #1
 800225a:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800225c:	f24c 3050 	movw	r0, #50000	; 0xc350
 8002260:	f7ff febc 	bl	8001fdc <FLASH_WaitForLastOperation>
 8002264:	4603      	mov	r3, r0
 8002266:	73fb      	strb	r3, [r7, #15]

  if(status == HAL_OK)
 8002268:	7bfb      	ldrb	r3, [r7, #15]
 800226a:	2b00      	cmp	r3, #0
 800226c:	d148      	bne.n	8002300 <HAL_FLASHEx_Erase+0xc8>
  {
    /*Initialization of SectorError variable*/
    *SectorError = 0xFFFFFFFFU;
 800226e:	683b      	ldr	r3, [r7, #0]
 8002270:	f04f 32ff 	mov.w	r2, #4294967295
 8002274:	601a      	str	r2, [r3, #0]
    
    if(pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	2b01      	cmp	r3, #1
 800227c:	d115      	bne.n	80022aa <HAL_FLASHEx_Erase+0x72>
    {
      /*Mass erase to be done*/
      FLASH_MassErase((uint8_t) pEraseInit->VoltageRange, pEraseInit->Banks);
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	691b      	ldr	r3, [r3, #16]
 8002282:	b2da      	uxtb	r2, r3
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	685b      	ldr	r3, [r3, #4]
 8002288:	4619      	mov	r1, r3
 800228a:	4610      	mov	r0, r2
 800228c:	f000 f8d6 	bl	800243c <FLASH_MassErase>

      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8002290:	f24c 3050 	movw	r0, #50000	; 0xc350
 8002294:	f7ff fea2 	bl	8001fdc <FLASH_WaitForLastOperation>
 8002298:	4603      	mov	r3, r0
 800229a:	73fb      	strb	r3, [r7, #15]
      
      /* if the erase operation is completed, disable the MER Bit */
      FLASH->CR &= (~FLASH_MER_BIT);
 800229c:	4b1d      	ldr	r3, [pc, #116]	; (8002314 <HAL_FLASHEx_Erase+0xdc>)
 800229e:	691b      	ldr	r3, [r3, #16]
 80022a0:	4a1c      	ldr	r2, [pc, #112]	; (8002314 <HAL_FLASHEx_Erase+0xdc>)
 80022a2:	f023 0304 	bic.w	r3, r3, #4
 80022a6:	6113      	str	r3, [r2, #16]
 80022a8:	e028      	b.n	80022fc <HAL_FLASHEx_Erase+0xc4>
    {
      /* Check the parameters */
      assert_param(IS_FLASH_NBSECTORS(pEraseInit->NbSectors + pEraseInit->Sector));

      /* Erase by sector by sector to be done*/
      for(index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	689b      	ldr	r3, [r3, #8]
 80022ae:	60bb      	str	r3, [r7, #8]
 80022b0:	e01c      	b.n	80022ec <HAL_FLASHEx_Erase+0xb4>
      {
        FLASH_Erase_Sector(index, (uint8_t) pEraseInit->VoltageRange);
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	691b      	ldr	r3, [r3, #16]
 80022b6:	b2db      	uxtb	r3, r3
 80022b8:	4619      	mov	r1, r3
 80022ba:	68b8      	ldr	r0, [r7, #8]
 80022bc:	f000 f8e2 	bl	8002484 <FLASH_Erase_Sector>

        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80022c0:	f24c 3050 	movw	r0, #50000	; 0xc350
 80022c4:	f7ff fe8a 	bl	8001fdc <FLASH_WaitForLastOperation>
 80022c8:	4603      	mov	r3, r0
 80022ca:	73fb      	strb	r3, [r7, #15]
        
        /* If the erase operation is completed, disable the SER and SNB Bits */
        CLEAR_BIT(FLASH->CR, (FLASH_CR_SER | FLASH_CR_SNB));
 80022cc:	4b11      	ldr	r3, [pc, #68]	; (8002314 <HAL_FLASHEx_Erase+0xdc>)
 80022ce:	691b      	ldr	r3, [r3, #16]
 80022d0:	4a10      	ldr	r2, [pc, #64]	; (8002314 <HAL_FLASHEx_Erase+0xdc>)
 80022d2:	f023 03fa 	bic.w	r3, r3, #250	; 0xfa
 80022d6:	6113      	str	r3, [r2, #16]

        if(status != HAL_OK) 
 80022d8:	7bfb      	ldrb	r3, [r7, #15]
 80022da:	2b00      	cmp	r3, #0
 80022dc:	d003      	beq.n	80022e6 <HAL_FLASHEx_Erase+0xae>
        {
          /* In case of error, stop erase procedure and return the faulty sector*/
          *SectorError = index;
 80022de:	683b      	ldr	r3, [r7, #0]
 80022e0:	68ba      	ldr	r2, [r7, #8]
 80022e2:	601a      	str	r2, [r3, #0]
          break;
 80022e4:	e00a      	b.n	80022fc <HAL_FLASHEx_Erase+0xc4>
      for(index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 80022e6:	68bb      	ldr	r3, [r7, #8]
 80022e8:	3301      	adds	r3, #1
 80022ea:	60bb      	str	r3, [r7, #8]
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	68da      	ldr	r2, [r3, #12]
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	689b      	ldr	r3, [r3, #8]
 80022f4:	4413      	add	r3, r2
 80022f6:	68ba      	ldr	r2, [r7, #8]
 80022f8:	429a      	cmp	r2, r3
 80022fa:	d3da      	bcc.n	80022b2 <HAL_FLASHEx_Erase+0x7a>
        }
      }
    }
    /* Flush the caches to be sure of the data consistency */
    FLASH_FlushCaches();    
 80022fc:	f000 fa00 	bl	8002700 <FLASH_FlushCaches>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8002300:	4b03      	ldr	r3, [pc, #12]	; (8002310 <HAL_FLASHEx_Erase+0xd8>)
 8002302:	2200      	movs	r2, #0
 8002304:	761a      	strb	r2, [r3, #24]

  return status;
 8002306:	7bfb      	ldrb	r3, [r7, #15]
}
 8002308:	4618      	mov	r0, r3
 800230a:	3710      	adds	r7, #16
 800230c:	46bd      	mov	sp, r7
 800230e:	bd80      	pop	{r7, pc}
 8002310:	200004d0 	.word	0x200004d0
 8002314:	40023c00 	.word	0x40023c00

08002318 <HAL_FLASHEx_OBProgram>:
  *         contains the configuration information for the programming.
  * 
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_OBProgram(FLASH_OBProgramInitTypeDef *pOBInit)
{
 8002318:	b580      	push	{r7, lr}
 800231a:	b084      	sub	sp, #16
 800231c:	af00      	add	r7, sp, #0
 800231e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8002320:	2301      	movs	r3, #1
 8002322:	73fb      	strb	r3, [r7, #15]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8002324:	4b32      	ldr	r3, [pc, #200]	; (80023f0 <HAL_FLASHEx_OBProgram+0xd8>)
 8002326:	7e1b      	ldrb	r3, [r3, #24]
 8002328:	2b01      	cmp	r3, #1
 800232a:	d101      	bne.n	8002330 <HAL_FLASHEx_OBProgram+0x18>
 800232c:	2302      	movs	r3, #2
 800232e:	e05b      	b.n	80023e8 <HAL_FLASHEx_OBProgram+0xd0>
 8002330:	4b2f      	ldr	r3, [pc, #188]	; (80023f0 <HAL_FLASHEx_OBProgram+0xd8>)
 8002332:	2201      	movs	r2, #1
 8002334:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_OPTIONBYTE(pOBInit->OptionType));

  /*Write protection configuration*/
  if((pOBInit->OptionType & OPTIONBYTE_WRP) == OPTIONBYTE_WRP)
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	f003 0301 	and.w	r3, r3, #1
 800233e:	2b00      	cmp	r3, #0
 8002340:	d018      	beq.n	8002374 <HAL_FLASHEx_OBProgram+0x5c>
  {
    assert_param(IS_WRPSTATE(pOBInit->WRPState));
    if(pOBInit->WRPState == OB_WRPSTATE_ENABLE)
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	685b      	ldr	r3, [r3, #4]
 8002346:	2b01      	cmp	r3, #1
 8002348:	d10a      	bne.n	8002360 <HAL_FLASHEx_OBProgram+0x48>
    {
      /*Enable of Write protection on the selected Sector*/
      status = FLASH_OB_EnableWRP(pOBInit->WRPSector, pOBInit->Banks);
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	689a      	ldr	r2, [r3, #8]
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	68db      	ldr	r3, [r3, #12]
 8002352:	4619      	mov	r1, r3
 8002354:	4610      	mov	r0, r2
 8002356:	f000 f8dd 	bl	8002514 <FLASH_OB_EnableWRP>
 800235a:	4603      	mov	r3, r0
 800235c:	73fb      	strb	r3, [r7, #15]
 800235e:	e009      	b.n	8002374 <HAL_FLASHEx_OBProgram+0x5c>
    }
    else
    {
      /*Disable of Write protection on the selected Sector*/
      status = FLASH_OB_DisableWRP(pOBInit->WRPSector, pOBInit->Banks);
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	689a      	ldr	r2, [r3, #8]
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	68db      	ldr	r3, [r3, #12]
 8002368:	4619      	mov	r1, r3
 800236a:	4610      	mov	r0, r2
 800236c:	f000 f8f4 	bl	8002558 <FLASH_OB_DisableWRP>
 8002370:	4603      	mov	r3, r0
 8002372:	73fb      	strb	r3, [r7, #15]
    }
  }

  /*Read protection configuration*/
  if((pOBInit->OptionType & OPTIONBYTE_RDP) == OPTIONBYTE_RDP)
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	f003 0302 	and.w	r3, r3, #2
 800237c:	2b00      	cmp	r3, #0
 800237e:	d007      	beq.n	8002390 <HAL_FLASHEx_OBProgram+0x78>
  {
    status = FLASH_OB_RDP_LevelConfig(pOBInit->RDPLevel);
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	691b      	ldr	r3, [r3, #16]
 8002384:	b2db      	uxtb	r3, r3
 8002386:	4618      	mov	r0, r3
 8002388:	f000 f906 	bl	8002598 <FLASH_OB_RDP_LevelConfig>
 800238c:	4603      	mov	r3, r0
 800238e:	73fb      	strb	r3, [r7, #15]
  }

  /*USER  configuration*/
  if((pOBInit->OptionType & OPTIONBYTE_USER) == OPTIONBYTE_USER)
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	f003 0304 	and.w	r3, r3, #4
 8002398:	2b00      	cmp	r3, #0
 800239a:	d013      	beq.n	80023c4 <HAL_FLASHEx_OBProgram+0xac>
  {
    status = FLASH_OB_UserConfig(pOBInit->USERConfig&OB_IWDG_SW, 
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	7e1b      	ldrb	r3, [r3, #24]
 80023a0:	f003 0320 	and.w	r3, r3, #32
 80023a4:	b2d8      	uxtb	r0, r3
                                     pOBInit->USERConfig&OB_STOP_NO_RST,
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	7e1b      	ldrb	r3, [r3, #24]
    status = FLASH_OB_UserConfig(pOBInit->USERConfig&OB_IWDG_SW, 
 80023aa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80023ae:	b2d9      	uxtb	r1, r3
                                     pOBInit->USERConfig&OB_STDBY_NO_RST);
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	7e1b      	ldrb	r3, [r3, #24]
    status = FLASH_OB_UserConfig(pOBInit->USERConfig&OB_IWDG_SW, 
 80023b4:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80023b8:	b2db      	uxtb	r3, r3
 80023ba:	461a      	mov	r2, r3
 80023bc:	f000 f906 	bl	80025cc <FLASH_OB_UserConfig>
 80023c0:	4603      	mov	r3, r0
 80023c2:	73fb      	strb	r3, [r7, #15]
  }

  /*BOR Level  configuration*/
  if((pOBInit->OptionType & OPTIONBYTE_BOR) == OPTIONBYTE_BOR)
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	f003 0308 	and.w	r3, r3, #8
 80023cc:	2b00      	cmp	r3, #0
 80023ce:	d007      	beq.n	80023e0 <HAL_FLASHEx_OBProgram+0xc8>
  {
    status = FLASH_OB_BOR_LevelConfig(pOBInit->BORLevel);
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	695b      	ldr	r3, [r3, #20]
 80023d4:	b2db      	uxtb	r3, r3
 80023d6:	4618      	mov	r0, r3
 80023d8:	f000 f928 	bl	800262c <FLASH_OB_BOR_LevelConfig>
 80023dc:	4603      	mov	r3, r0
 80023de:	73fb      	strb	r3, [r7, #15]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 80023e0:	4b03      	ldr	r3, [pc, #12]	; (80023f0 <HAL_FLASHEx_OBProgram+0xd8>)
 80023e2:	2200      	movs	r2, #0
 80023e4:	761a      	strb	r2, [r3, #24]

  return status;
 80023e6:	7bfb      	ldrb	r3, [r7, #15]
}
 80023e8:	4618      	mov	r0, r3
 80023ea:	3710      	adds	r7, #16
 80023ec:	46bd      	mov	sp, r7
 80023ee:	bd80      	pop	{r7, pc}
 80023f0:	200004d0 	.word	0x200004d0

080023f4 <HAL_FLASHEx_OBGetConfig>:
  *         contains the configuration information for the programming.
  * 
  * @retval None
  */
void HAL_FLASHEx_OBGetConfig(FLASH_OBProgramInitTypeDef *pOBInit)
{
 80023f4:	b580      	push	{r7, lr}
 80023f6:	b082      	sub	sp, #8
 80023f8:	af00      	add	r7, sp, #0
 80023fa:	6078      	str	r0, [r7, #4]
  pOBInit->OptionType = OPTIONBYTE_WRP | OPTIONBYTE_RDP | OPTIONBYTE_USER | OPTIONBYTE_BOR;
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	220f      	movs	r2, #15
 8002400:	601a      	str	r2, [r3, #0]

  /*Get WRP*/
  pOBInit->WRPSector = (uint32_t)FLASH_OB_GetWRP();
 8002402:	f000 f941 	bl	8002688 <FLASH_OB_GetWRP>
 8002406:	4603      	mov	r3, r0
 8002408:	461a      	mov	r2, r3
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	609a      	str	r2, [r3, #8]

  /*Get RDP Level*/
  pOBInit->RDPLevel = (uint32_t)FLASH_OB_GetRDP();
 800240e:	f000 f947 	bl	80026a0 <FLASH_OB_GetRDP>
 8002412:	4603      	mov	r3, r0
 8002414:	461a      	mov	r2, r3
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	611a      	str	r2, [r3, #16]

  /*Get USER*/
  pOBInit->USERConfig = (uint8_t)FLASH_OB_GetUser();
 800241a:	f000 f925 	bl	8002668 <FLASH_OB_GetUser>
 800241e:	4603      	mov	r3, r0
 8002420:	461a      	mov	r2, r3
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	761a      	strb	r2, [r3, #24]

  /*Get BOR Level*/
  pOBInit->BORLevel = (uint32_t)FLASH_OB_GetBOR();
 8002426:	f000 f95b 	bl	80026e0 <FLASH_OB_GetBOR>
 800242a:	4603      	mov	r3, r0
 800242c:	461a      	mov	r2, r3
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	615a      	str	r2, [r3, #20]
}
 8002432:	bf00      	nop
 8002434:	3708      	adds	r7, #8
 8002436:	46bd      	mov	sp, r7
 8002438:	bd80      	pop	{r7, pc}
	...

0800243c <FLASH_MassErase>:
  *            @arg FLASH_BANK_1: Bank1 to be erased
  *
  * @retval None
  */
static void FLASH_MassErase(uint8_t VoltageRange, uint32_t Banks)
{
 800243c:	b480      	push	{r7}
 800243e:	b083      	sub	sp, #12
 8002440:	af00      	add	r7, sp, #0
 8002442:	4603      	mov	r3, r0
 8002444:	6039      	str	r1, [r7, #0]
 8002446:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_VOLTAGERANGE(VoltageRange));
  assert_param(IS_FLASH_BANK(Banks));
  
  /* If the previous operation is completed, proceed to erase all sectors */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8002448:	4b0d      	ldr	r3, [pc, #52]	; (8002480 <FLASH_MassErase+0x44>)
 800244a:	691b      	ldr	r3, [r3, #16]
 800244c:	4a0c      	ldr	r2, [pc, #48]	; (8002480 <FLASH_MassErase+0x44>)
 800244e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002452:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_MER;
 8002454:	4b0a      	ldr	r3, [pc, #40]	; (8002480 <FLASH_MassErase+0x44>)
 8002456:	691b      	ldr	r3, [r3, #16]
 8002458:	4a09      	ldr	r2, [pc, #36]	; (8002480 <FLASH_MassErase+0x44>)
 800245a:	f043 0304 	orr.w	r3, r3, #4
 800245e:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT | ((uint32_t)VoltageRange <<8U);
 8002460:	4b07      	ldr	r3, [pc, #28]	; (8002480 <FLASH_MassErase+0x44>)
 8002462:	691a      	ldr	r2, [r3, #16]
 8002464:	79fb      	ldrb	r3, [r7, #7]
 8002466:	021b      	lsls	r3, r3, #8
 8002468:	4313      	orrs	r3, r2
 800246a:	4a05      	ldr	r2, [pc, #20]	; (8002480 <FLASH_MassErase+0x44>)
 800246c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002470:	6113      	str	r3, [r2, #16]
}
 8002472:	bf00      	nop
 8002474:	370c      	adds	r7, #12
 8002476:	46bd      	mov	sp, r7
 8002478:	f85d 7b04 	ldr.w	r7, [sp], #4
 800247c:	4770      	bx	lr
 800247e:	bf00      	nop
 8002480:	40023c00 	.word	0x40023c00

08002484 <FLASH_Erase_Sector>:
  *                                  the operation will be done by double word (64-bit)
  * 
  * @retval None
  */
void FLASH_Erase_Sector(uint32_t Sector, uint8_t VoltageRange)
{
 8002484:	b480      	push	{r7}
 8002486:	b085      	sub	sp, #20
 8002488:	af00      	add	r7, sp, #0
 800248a:	6078      	str	r0, [r7, #4]
 800248c:	460b      	mov	r3, r1
 800248e:	70fb      	strb	r3, [r7, #3]
  uint32_t tmp_psize = 0U;
 8002490:	2300      	movs	r3, #0
 8002492:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_FLASH_SECTOR(Sector));
  assert_param(IS_VOLTAGERANGE(VoltageRange));
  
  if(VoltageRange == FLASH_VOLTAGE_RANGE_1)
 8002494:	78fb      	ldrb	r3, [r7, #3]
 8002496:	2b00      	cmp	r3, #0
 8002498:	d102      	bne.n	80024a0 <FLASH_Erase_Sector+0x1c>
  {
     tmp_psize = FLASH_PSIZE_BYTE;
 800249a:	2300      	movs	r3, #0
 800249c:	60fb      	str	r3, [r7, #12]
 800249e:	e010      	b.n	80024c2 <FLASH_Erase_Sector+0x3e>
  }
  else if(VoltageRange == FLASH_VOLTAGE_RANGE_2)
 80024a0:	78fb      	ldrb	r3, [r7, #3]
 80024a2:	2b01      	cmp	r3, #1
 80024a4:	d103      	bne.n	80024ae <FLASH_Erase_Sector+0x2a>
  {
    tmp_psize = FLASH_PSIZE_HALF_WORD;
 80024a6:	f44f 7380 	mov.w	r3, #256	; 0x100
 80024aa:	60fb      	str	r3, [r7, #12]
 80024ac:	e009      	b.n	80024c2 <FLASH_Erase_Sector+0x3e>
  }
  else if(VoltageRange == FLASH_VOLTAGE_RANGE_3)
 80024ae:	78fb      	ldrb	r3, [r7, #3]
 80024b0:	2b02      	cmp	r3, #2
 80024b2:	d103      	bne.n	80024bc <FLASH_Erase_Sector+0x38>
  {
    tmp_psize = FLASH_PSIZE_WORD;
 80024b4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80024b8:	60fb      	str	r3, [r7, #12]
 80024ba:	e002      	b.n	80024c2 <FLASH_Erase_Sector+0x3e>
  }
  else
  {
    tmp_psize = FLASH_PSIZE_DOUBLE_WORD;
 80024bc:	f44f 7340 	mov.w	r3, #768	; 0x300
 80024c0:	60fb      	str	r3, [r7, #12]
  }

  /* If the previous operation is completed, proceed to erase the sector */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 80024c2:	4b13      	ldr	r3, [pc, #76]	; (8002510 <FLASH_Erase_Sector+0x8c>)
 80024c4:	691b      	ldr	r3, [r3, #16]
 80024c6:	4a12      	ldr	r2, [pc, #72]	; (8002510 <FLASH_Erase_Sector+0x8c>)
 80024c8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80024cc:	6113      	str	r3, [r2, #16]
  FLASH->CR |= tmp_psize;
 80024ce:	4b10      	ldr	r3, [pc, #64]	; (8002510 <FLASH_Erase_Sector+0x8c>)
 80024d0:	691a      	ldr	r2, [r3, #16]
 80024d2:	490f      	ldr	r1, [pc, #60]	; (8002510 <FLASH_Erase_Sector+0x8c>)
 80024d4:	68fb      	ldr	r3, [r7, #12]
 80024d6:	4313      	orrs	r3, r2
 80024d8:	610b      	str	r3, [r1, #16]
  CLEAR_BIT(FLASH->CR, FLASH_CR_SNB);
 80024da:	4b0d      	ldr	r3, [pc, #52]	; (8002510 <FLASH_Erase_Sector+0x8c>)
 80024dc:	691b      	ldr	r3, [r3, #16]
 80024de:	4a0c      	ldr	r2, [pc, #48]	; (8002510 <FLASH_Erase_Sector+0x8c>)
 80024e0:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 80024e4:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_SER | (Sector << FLASH_CR_SNB_Pos);
 80024e6:	4b0a      	ldr	r3, [pc, #40]	; (8002510 <FLASH_Erase_Sector+0x8c>)
 80024e8:	691a      	ldr	r2, [r3, #16]
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	00db      	lsls	r3, r3, #3
 80024ee:	4313      	orrs	r3, r2
 80024f0:	4a07      	ldr	r2, [pc, #28]	; (8002510 <FLASH_Erase_Sector+0x8c>)
 80024f2:	f043 0302 	orr.w	r3, r3, #2
 80024f6:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT;
 80024f8:	4b05      	ldr	r3, [pc, #20]	; (8002510 <FLASH_Erase_Sector+0x8c>)
 80024fa:	691b      	ldr	r3, [r3, #16]
 80024fc:	4a04      	ldr	r2, [pc, #16]	; (8002510 <FLASH_Erase_Sector+0x8c>)
 80024fe:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002502:	6113      	str	r3, [r2, #16]
}
 8002504:	bf00      	nop
 8002506:	3714      	adds	r7, #20
 8002508:	46bd      	mov	sp, r7
 800250a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800250e:	4770      	bx	lr
 8002510:	40023c00 	.word	0x40023c00

08002514 <FLASH_OB_EnableWRP>:
  *            @arg FLASH_BANK_1: WRP on all sectors of bank1
  *
  * @retval HAL Status 
  */
static HAL_StatusTypeDef FLASH_OB_EnableWRP(uint32_t WRPSector, uint32_t Banks)
{
 8002514:	b580      	push	{r7, lr}
 8002516:	b084      	sub	sp, #16
 8002518:	af00      	add	r7, sp, #0
 800251a:	6078      	str	r0, [r7, #4]
 800251c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800251e:	2300      	movs	r3, #0
 8002520:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_OB_WRP_SECTOR(WRPSector));
  assert_param(IS_FLASH_BANK(Banks));
    
  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8002522:	f24c 3050 	movw	r0, #50000	; 0xc350
 8002526:	f7ff fd59 	bl	8001fdc <FLASH_WaitForLastOperation>
 800252a:	4603      	mov	r3, r0
 800252c:	73fb      	strb	r3, [r7, #15]

  if(status == HAL_OK)
 800252e:	7bfb      	ldrb	r3, [r7, #15]
 8002530:	2b00      	cmp	r3, #0
 8002532:	d10a      	bne.n	800254a <FLASH_OB_EnableWRP+0x36>
  { 
    *(__IO uint16_t*)OPTCR_BYTE2_ADDRESS &= (~WRPSector);  
 8002534:	4b07      	ldr	r3, [pc, #28]	; (8002554 <FLASH_OB_EnableWRP+0x40>)
 8002536:	881b      	ldrh	r3, [r3, #0]
 8002538:	b29a      	uxth	r2, r3
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	b29b      	uxth	r3, r3
 800253e:	43db      	mvns	r3, r3
 8002540:	b29b      	uxth	r3, r3
 8002542:	4904      	ldr	r1, [pc, #16]	; (8002554 <FLASH_OB_EnableWRP+0x40>)
 8002544:	4013      	ands	r3, r2
 8002546:	b29b      	uxth	r3, r3
 8002548:	800b      	strh	r3, [r1, #0]
  }
  
  return status;
 800254a:	7bfb      	ldrb	r3, [r7, #15]
}
 800254c:	4618      	mov	r0, r3
 800254e:	3710      	adds	r7, #16
 8002550:	46bd      	mov	sp, r7
 8002552:	bd80      	pop	{r7, pc}
 8002554:	40023c16 	.word	0x40023c16

08002558 <FLASH_OB_DisableWRP>:
  *            @arg FLASH_BANK_1: WRP on all sectors of bank1
  *
  * @retval HAL Status 
  */
static HAL_StatusTypeDef FLASH_OB_DisableWRP(uint32_t WRPSector, uint32_t Banks)
{
 8002558:	b580      	push	{r7, lr}
 800255a:	b084      	sub	sp, #16
 800255c:	af00      	add	r7, sp, #0
 800255e:	6078      	str	r0, [r7, #4]
 8002560:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002562:	2300      	movs	r3, #0
 8002564:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_OB_WRP_SECTOR(WRPSector));
  assert_param(IS_FLASH_BANK(Banks));
    
  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8002566:	f24c 3050 	movw	r0, #50000	; 0xc350
 800256a:	f7ff fd37 	bl	8001fdc <FLASH_WaitForLastOperation>
 800256e:	4603      	mov	r3, r0
 8002570:	73fb      	strb	r3, [r7, #15]

  if(status == HAL_OK)
 8002572:	7bfb      	ldrb	r3, [r7, #15]
 8002574:	2b00      	cmp	r3, #0
 8002576:	d108      	bne.n	800258a <FLASH_OB_DisableWRP+0x32>
  { 
    *(__IO uint16_t*)OPTCR_BYTE2_ADDRESS |= (uint16_t)WRPSector; 
 8002578:	4b06      	ldr	r3, [pc, #24]	; (8002594 <FLASH_OB_DisableWRP+0x3c>)
 800257a:	881b      	ldrh	r3, [r3, #0]
 800257c:	b29a      	uxth	r2, r3
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	b29b      	uxth	r3, r3
 8002582:	4904      	ldr	r1, [pc, #16]	; (8002594 <FLASH_OB_DisableWRP+0x3c>)
 8002584:	4313      	orrs	r3, r2
 8002586:	b29b      	uxth	r3, r3
 8002588:	800b      	strh	r3, [r1, #0]
  }
  
  return status;
 800258a:	7bfb      	ldrb	r3, [r7, #15]
}
 800258c:	4618      	mov	r0, r3
 800258e:	3710      	adds	r7, #16
 8002590:	46bd      	mov	sp, r7
 8002592:	bd80      	pop	{r7, pc}
 8002594:	40023c16 	.word	0x40023c16

08002598 <FLASH_OB_RDP_LevelConfig>:
  * @note WARNING: When enabling OB_RDP level 2 it's no more possible to go back to level 1 or 0
  *    
  * @retval HAL Status
  */
static HAL_StatusTypeDef FLASH_OB_RDP_LevelConfig(uint8_t Level)
{
 8002598:	b580      	push	{r7, lr}
 800259a:	b084      	sub	sp, #16
 800259c:	af00      	add	r7, sp, #0
 800259e:	4603      	mov	r3, r0
 80025a0:	71fb      	strb	r3, [r7, #7]
  HAL_StatusTypeDef status = HAL_OK;
 80025a2:	2300      	movs	r3, #0
 80025a4:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_OB_RDP_LEVEL(Level));
    
  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80025a6:	f24c 3050 	movw	r0, #50000	; 0xc350
 80025aa:	f7ff fd17 	bl	8001fdc <FLASH_WaitForLastOperation>
 80025ae:	4603      	mov	r3, r0
 80025b0:	73fb      	strb	r3, [r7, #15]

  if(status == HAL_OK)
 80025b2:	7bfb      	ldrb	r3, [r7, #15]
 80025b4:	2b00      	cmp	r3, #0
 80025b6:	d102      	bne.n	80025be <FLASH_OB_RDP_LevelConfig+0x26>
  { 
    *(__IO uint8_t*)OPTCR_BYTE1_ADDRESS = Level;
 80025b8:	4a03      	ldr	r2, [pc, #12]	; (80025c8 <FLASH_OB_RDP_LevelConfig+0x30>)
 80025ba:	79fb      	ldrb	r3, [r7, #7]
 80025bc:	7013      	strb	r3, [r2, #0]
  }
  
  return status;
 80025be:	7bfb      	ldrb	r3, [r7, #15]
}
 80025c0:	4618      	mov	r0, r3
 80025c2:	3710      	adds	r7, #16
 80025c4:	46bd      	mov	sp, r7
 80025c6:	bd80      	pop	{r7, pc}
 80025c8:	40023c15 	.word	0x40023c15

080025cc <FLASH_OB_UserConfig>:
  *            @arg OB_STDBY_NO_RST: No reset generated when entering in STANDBY
  *            @arg OB_STDBY_RST: Reset generated when entering in STANDBY
  * @retval HAL Status
  */
static HAL_StatusTypeDef FLASH_OB_UserConfig(uint8_t Iwdg, uint8_t Stop, uint8_t Stdby)
{
 80025cc:	b580      	push	{r7, lr}
 80025ce:	b084      	sub	sp, #16
 80025d0:	af00      	add	r7, sp, #0
 80025d2:	4603      	mov	r3, r0
 80025d4:	71fb      	strb	r3, [r7, #7]
 80025d6:	460b      	mov	r3, r1
 80025d8:	71bb      	strb	r3, [r7, #6]
 80025da:	4613      	mov	r3, r2
 80025dc:	717b      	strb	r3, [r7, #5]
  uint8_t optiontmp = 0xFF;
 80025de:	23ff      	movs	r3, #255	; 0xff
 80025e0:	73fb      	strb	r3, [r7, #15]
  HAL_StatusTypeDef status = HAL_OK;
 80025e2:	2300      	movs	r3, #0
 80025e4:	73bb      	strb	r3, [r7, #14]
  assert_param(IS_OB_IWDG_SOURCE(Iwdg));
  assert_param(IS_OB_STOP_SOURCE(Stop));
  assert_param(IS_OB_STDBY_SOURCE(Stdby));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80025e6:	f24c 3050 	movw	r0, #50000	; 0xc350
 80025ea:	f7ff fcf7 	bl	8001fdc <FLASH_WaitForLastOperation>
 80025ee:	4603      	mov	r3, r0
 80025f0:	73bb      	strb	r3, [r7, #14]
  
  if(status == HAL_OK)
 80025f2:	7bbb      	ldrb	r3, [r7, #14]
 80025f4:	2b00      	cmp	r3, #0
 80025f6:	d111      	bne.n	800261c <FLASH_OB_UserConfig+0x50>
  {     
    /* Mask OPTLOCK, OPTSTRT, BOR_LEV and BFB2 bits */
    optiontmp =  (uint8_t)((*(__IO uint8_t *)OPTCR_BYTE0_ADDRESS) & (uint8_t)0x1F);
 80025f8:	4b0b      	ldr	r3, [pc, #44]	; (8002628 <FLASH_OB_UserConfig+0x5c>)
 80025fa:	781b      	ldrb	r3, [r3, #0]
 80025fc:	b2db      	uxtb	r3, r3
 80025fe:	f003 031f 	and.w	r3, r3, #31
 8002602:	73fb      	strb	r3, [r7, #15]

    /* Update User Option Byte */
    *(__IO uint8_t *)OPTCR_BYTE0_ADDRESS = Iwdg | (uint8_t)(Stdby | (uint8_t)(Stop | ((uint8_t)optiontmp))); 
 8002604:	79ba      	ldrb	r2, [r7, #6]
 8002606:	7bfb      	ldrb	r3, [r7, #15]
 8002608:	4313      	orrs	r3, r2
 800260a:	b2da      	uxtb	r2, r3
 800260c:	797b      	ldrb	r3, [r7, #5]
 800260e:	4313      	orrs	r3, r2
 8002610:	b2da      	uxtb	r2, r3
 8002612:	4905      	ldr	r1, [pc, #20]	; (8002628 <FLASH_OB_UserConfig+0x5c>)
 8002614:	79fb      	ldrb	r3, [r7, #7]
 8002616:	4313      	orrs	r3, r2
 8002618:	b2db      	uxtb	r3, r3
 800261a:	700b      	strb	r3, [r1, #0]
  }
  
  return status; 
 800261c:	7bbb      	ldrb	r3, [r7, #14]
}
 800261e:	4618      	mov	r0, r3
 8002620:	3710      	adds	r7, #16
 8002622:	46bd      	mov	sp, r7
 8002624:	bd80      	pop	{r7, pc}
 8002626:	bf00      	nop
 8002628:	40023c14 	.word	0x40023c14

0800262c <FLASH_OB_BOR_LevelConfig>:
  *            @arg OB_BOR_LEVEL1: Supply voltage ranges from 2.1 to 2.4 V
  *            @arg OB_BOR_OFF: Supply voltage ranges from 1.62 to 2.1 V
  * @retval HAL Status
  */
static HAL_StatusTypeDef FLASH_OB_BOR_LevelConfig(uint8_t Level)
{
 800262c:	b480      	push	{r7}
 800262e:	b083      	sub	sp, #12
 8002630:	af00      	add	r7, sp, #0
 8002632:	4603      	mov	r3, r0
 8002634:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_OB_BOR_LEVEL(Level));

  /* Set the BOR Level */
  *(__IO uint8_t *)OPTCR_BYTE0_ADDRESS &= (~FLASH_OPTCR_BOR_LEV);
 8002636:	4b0b      	ldr	r3, [pc, #44]	; (8002664 <FLASH_OB_BOR_LevelConfig+0x38>)
 8002638:	781b      	ldrb	r3, [r3, #0]
 800263a:	b2db      	uxtb	r3, r3
 800263c:	4a09      	ldr	r2, [pc, #36]	; (8002664 <FLASH_OB_BOR_LevelConfig+0x38>)
 800263e:	f023 030c 	bic.w	r3, r3, #12
 8002642:	b2db      	uxtb	r3, r3
 8002644:	7013      	strb	r3, [r2, #0]
  *(__IO uint8_t *)OPTCR_BYTE0_ADDRESS |= Level;
 8002646:	4b07      	ldr	r3, [pc, #28]	; (8002664 <FLASH_OB_BOR_LevelConfig+0x38>)
 8002648:	781b      	ldrb	r3, [r3, #0]
 800264a:	b2da      	uxtb	r2, r3
 800264c:	4905      	ldr	r1, [pc, #20]	; (8002664 <FLASH_OB_BOR_LevelConfig+0x38>)
 800264e:	79fb      	ldrb	r3, [r7, #7]
 8002650:	4313      	orrs	r3, r2
 8002652:	b2db      	uxtb	r3, r3
 8002654:	700b      	strb	r3, [r1, #0]
  
  return HAL_OK;
 8002656:	2300      	movs	r3, #0
  
}
 8002658:	4618      	mov	r0, r3
 800265a:	370c      	adds	r7, #12
 800265c:	46bd      	mov	sp, r7
 800265e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002662:	4770      	bx	lr
 8002664:	40023c14 	.word	0x40023c14

08002668 <FLASH_OB_GetUser>:
  * @brief  Return the FLASH User Option Byte value.
  * @retval uint8_t FLASH User Option Bytes values: IWDG_SW(Bit0), RST_STOP(Bit1)
  *         and RST_STDBY(Bit2).
  */
static uint8_t FLASH_OB_GetUser(void)
{
 8002668:	b480      	push	{r7}
 800266a:	af00      	add	r7, sp, #0
  /* Return the User Option Byte */
  return ((uint8_t)(FLASH->OPTCR & 0xE0));
 800266c:	4b05      	ldr	r3, [pc, #20]	; (8002684 <FLASH_OB_GetUser+0x1c>)
 800266e:	695b      	ldr	r3, [r3, #20]
 8002670:	b2db      	uxtb	r3, r3
 8002672:	f023 031f 	bic.w	r3, r3, #31
 8002676:	b2db      	uxtb	r3, r3
}
 8002678:	4618      	mov	r0, r3
 800267a:	46bd      	mov	sp, r7
 800267c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002680:	4770      	bx	lr
 8002682:	bf00      	nop
 8002684:	40023c00 	.word	0x40023c00

08002688 <FLASH_OB_GetWRP>:
/**
  * @brief  Return the FLASH Write Protection Option Bytes value.
  * @retval uint16_t FLASH Write Protection Option Bytes value
  */
static uint16_t FLASH_OB_GetWRP(void)
{
 8002688:	b480      	push	{r7}
 800268a:	af00      	add	r7, sp, #0
  /* Return the FLASH write protection Register value */
  return (*(__IO uint16_t *)(OPTCR_BYTE2_ADDRESS));
 800268c:	4b03      	ldr	r3, [pc, #12]	; (800269c <FLASH_OB_GetWRP+0x14>)
 800268e:	881b      	ldrh	r3, [r3, #0]
 8002690:	b29b      	uxth	r3, r3
}
 8002692:	4618      	mov	r0, r3
 8002694:	46bd      	mov	sp, r7
 8002696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800269a:	4770      	bx	lr
 800269c:	40023c16 	.word	0x40023c16

080026a0 <FLASH_OB_GetRDP>:
  *            @arg OB_RDP_LEVEL_0: No protection
  *            @arg OB_RDP_LEVEL_1: Read protection of the memory
  *            @arg OB_RDP_LEVEL_2: Full chip protection
  */
static uint8_t FLASH_OB_GetRDP(void)
{
 80026a0:	b480      	push	{r7}
 80026a2:	b083      	sub	sp, #12
 80026a4:	af00      	add	r7, sp, #0
  uint8_t readstatus = OB_RDP_LEVEL_0;
 80026a6:	23aa      	movs	r3, #170	; 0xaa
 80026a8:	71fb      	strb	r3, [r7, #7]

  if((*(__IO uint8_t*)(OPTCR_BYTE1_ADDRESS) == (uint8_t)OB_RDP_LEVEL_2))
 80026aa:	4b0c      	ldr	r3, [pc, #48]	; (80026dc <FLASH_OB_GetRDP+0x3c>)
 80026ac:	781b      	ldrb	r3, [r3, #0]
 80026ae:	b2db      	uxtb	r3, r3
 80026b0:	2bcc      	cmp	r3, #204	; 0xcc
 80026b2:	d102      	bne.n	80026ba <FLASH_OB_GetRDP+0x1a>
  {
    readstatus = OB_RDP_LEVEL_2;
 80026b4:	23cc      	movs	r3, #204	; 0xcc
 80026b6:	71fb      	strb	r3, [r7, #7]
 80026b8:	e009      	b.n	80026ce <FLASH_OB_GetRDP+0x2e>
  }
  else if((*(__IO uint8_t*)(OPTCR_BYTE1_ADDRESS) == (uint8_t)OB_RDP_LEVEL_0))
 80026ba:	4b08      	ldr	r3, [pc, #32]	; (80026dc <FLASH_OB_GetRDP+0x3c>)
 80026bc:	781b      	ldrb	r3, [r3, #0]
 80026be:	b2db      	uxtb	r3, r3
 80026c0:	2baa      	cmp	r3, #170	; 0xaa
 80026c2:	d102      	bne.n	80026ca <FLASH_OB_GetRDP+0x2a>
  {
    readstatus = OB_RDP_LEVEL_0;
 80026c4:	23aa      	movs	r3, #170	; 0xaa
 80026c6:	71fb      	strb	r3, [r7, #7]
 80026c8:	e001      	b.n	80026ce <FLASH_OB_GetRDP+0x2e>
  }
  else 
  {
    readstatus = OB_RDP_LEVEL_1;
 80026ca:	2355      	movs	r3, #85	; 0x55
 80026cc:	71fb      	strb	r3, [r7, #7]
  }

  return readstatus;
 80026ce:	79fb      	ldrb	r3, [r7, #7]
}
 80026d0:	4618      	mov	r0, r3
 80026d2:	370c      	adds	r7, #12
 80026d4:	46bd      	mov	sp, r7
 80026d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026da:	4770      	bx	lr
 80026dc:	40023c15 	.word	0x40023c15

080026e0 <FLASH_OB_GetBOR>:
  *           - OB_BOR_LEVEL2: Supply voltage ranges from 2.4 to 2.7 V
  *           - OB_BOR_LEVEL1: Supply voltage ranges from 2.1 to 2.4 V
  *           - OB_BOR_OFF   : Supply voltage ranges from 1.62 to 2.1 V  
  */
static uint8_t FLASH_OB_GetBOR(void)
{
 80026e0:	b480      	push	{r7}
 80026e2:	af00      	add	r7, sp, #0
  /* Return the FLASH BOR level */
  return (uint8_t)(*(__IO uint8_t *)(OPTCR_BYTE0_ADDRESS) & (uint8_t)0x0C);
 80026e4:	4b05      	ldr	r3, [pc, #20]	; (80026fc <FLASH_OB_GetBOR+0x1c>)
 80026e6:	781b      	ldrb	r3, [r3, #0]
 80026e8:	b2db      	uxtb	r3, r3
 80026ea:	f003 030c 	and.w	r3, r3, #12
 80026ee:	b2db      	uxtb	r3, r3
}
 80026f0:	4618      	mov	r0, r3
 80026f2:	46bd      	mov	sp, r7
 80026f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026f8:	4770      	bx	lr
 80026fa:	bf00      	nop
 80026fc:	40023c14 	.word	0x40023c14

08002700 <FLASH_FlushCaches>:
/**
  * @brief  Flush the instruction and data caches
  * @retval None
  */
void FLASH_FlushCaches(void)
{
 8002700:	b480      	push	{r7}
 8002702:	af00      	add	r7, sp, #0
  /* Flush instruction cache  */
  if(READ_BIT(FLASH->ACR, FLASH_ACR_ICEN)!= RESET)
 8002704:	4b20      	ldr	r3, [pc, #128]	; (8002788 <FLASH_FlushCaches+0x88>)
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800270c:	2b00      	cmp	r3, #0
 800270e:	d017      	beq.n	8002740 <FLASH_FlushCaches+0x40>
  {
    /* Disable instruction cache  */
    __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
 8002710:	4b1d      	ldr	r3, [pc, #116]	; (8002788 <FLASH_FlushCaches+0x88>)
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	4a1c      	ldr	r2, [pc, #112]	; (8002788 <FLASH_FlushCaches+0x88>)
 8002716:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800271a:	6013      	str	r3, [r2, #0]
    /* Reset instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_RESET();
 800271c:	4b1a      	ldr	r3, [pc, #104]	; (8002788 <FLASH_FlushCaches+0x88>)
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	4a19      	ldr	r2, [pc, #100]	; (8002788 <FLASH_FlushCaches+0x88>)
 8002722:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002726:	6013      	str	r3, [r2, #0]
 8002728:	4b17      	ldr	r3, [pc, #92]	; (8002788 <FLASH_FlushCaches+0x88>)
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	4a16      	ldr	r2, [pc, #88]	; (8002788 <FLASH_FlushCaches+0x88>)
 800272e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002732:	6013      	str	r3, [r2, #0]
    /* Enable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002734:	4b14      	ldr	r3, [pc, #80]	; (8002788 <FLASH_FlushCaches+0x88>)
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	4a13      	ldr	r2, [pc, #76]	; (8002788 <FLASH_FlushCaches+0x88>)
 800273a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800273e:	6013      	str	r3, [r2, #0]
  }
  
  /* Flush data cache */
  if(READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != RESET)
 8002740:	4b11      	ldr	r3, [pc, #68]	; (8002788 <FLASH_FlushCaches+0x88>)
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002748:	2b00      	cmp	r3, #0
 800274a:	d017      	beq.n	800277c <FLASH_FlushCaches+0x7c>
  {
    /* Disable data cache  */
    __HAL_FLASH_DATA_CACHE_DISABLE();
 800274c:	4b0e      	ldr	r3, [pc, #56]	; (8002788 <FLASH_FlushCaches+0x88>)
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	4a0d      	ldr	r2, [pc, #52]	; (8002788 <FLASH_FlushCaches+0x88>)
 8002752:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002756:	6013      	str	r3, [r2, #0]
    /* Reset data cache */
    __HAL_FLASH_DATA_CACHE_RESET();
 8002758:	4b0b      	ldr	r3, [pc, #44]	; (8002788 <FLASH_FlushCaches+0x88>)
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	4a0a      	ldr	r2, [pc, #40]	; (8002788 <FLASH_FlushCaches+0x88>)
 800275e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002762:	6013      	str	r3, [r2, #0]
 8002764:	4b08      	ldr	r3, [pc, #32]	; (8002788 <FLASH_FlushCaches+0x88>)
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	4a07      	ldr	r2, [pc, #28]	; (8002788 <FLASH_FlushCaches+0x88>)
 800276a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800276e:	6013      	str	r3, [r2, #0]
    /* Enable data cache */
    __HAL_FLASH_DATA_CACHE_ENABLE();
 8002770:	4b05      	ldr	r3, [pc, #20]	; (8002788 <FLASH_FlushCaches+0x88>)
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	4a04      	ldr	r2, [pc, #16]	; (8002788 <FLASH_FlushCaches+0x88>)
 8002776:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800277a:	6013      	str	r3, [r2, #0]
  }
}
 800277c:	bf00      	nop
 800277e:	46bd      	mov	sp, r7
 8002780:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002784:	4770      	bx	lr
 8002786:	bf00      	nop
 8002788:	40023c00 	.word	0x40023c00

0800278c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800278c:	b480      	push	{r7}
 800278e:	b089      	sub	sp, #36	; 0x24
 8002790:	af00      	add	r7, sp, #0
 8002792:	6078      	str	r0, [r7, #4]
 8002794:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002796:	2300      	movs	r3, #0
 8002798:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800279a:	2300      	movs	r3, #0
 800279c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800279e:	2300      	movs	r3, #0
 80027a0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80027a2:	2300      	movs	r3, #0
 80027a4:	61fb      	str	r3, [r7, #28]
 80027a6:	e16b      	b.n	8002a80 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80027a8:	2201      	movs	r2, #1
 80027aa:	69fb      	ldr	r3, [r7, #28]
 80027ac:	fa02 f303 	lsl.w	r3, r2, r3
 80027b0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80027b2:	683b      	ldr	r3, [r7, #0]
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	697a      	ldr	r2, [r7, #20]
 80027b8:	4013      	ands	r3, r2
 80027ba:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80027bc:	693a      	ldr	r2, [r7, #16]
 80027be:	697b      	ldr	r3, [r7, #20]
 80027c0:	429a      	cmp	r2, r3
 80027c2:	f040 815a 	bne.w	8002a7a <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80027c6:	683b      	ldr	r3, [r7, #0]
 80027c8:	685b      	ldr	r3, [r3, #4]
 80027ca:	2b01      	cmp	r3, #1
 80027cc:	d00b      	beq.n	80027e6 <HAL_GPIO_Init+0x5a>
 80027ce:	683b      	ldr	r3, [r7, #0]
 80027d0:	685b      	ldr	r3, [r3, #4]
 80027d2:	2b02      	cmp	r3, #2
 80027d4:	d007      	beq.n	80027e6 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80027d6:	683b      	ldr	r3, [r7, #0]
 80027d8:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80027da:	2b11      	cmp	r3, #17
 80027dc:	d003      	beq.n	80027e6 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80027de:	683b      	ldr	r3, [r7, #0]
 80027e0:	685b      	ldr	r3, [r3, #4]
 80027e2:	2b12      	cmp	r3, #18
 80027e4:	d130      	bne.n	8002848 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	689b      	ldr	r3, [r3, #8]
 80027ea:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80027ec:	69fb      	ldr	r3, [r7, #28]
 80027ee:	005b      	lsls	r3, r3, #1
 80027f0:	2203      	movs	r2, #3
 80027f2:	fa02 f303 	lsl.w	r3, r2, r3
 80027f6:	43db      	mvns	r3, r3
 80027f8:	69ba      	ldr	r2, [r7, #24]
 80027fa:	4013      	ands	r3, r2
 80027fc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80027fe:	683b      	ldr	r3, [r7, #0]
 8002800:	68da      	ldr	r2, [r3, #12]
 8002802:	69fb      	ldr	r3, [r7, #28]
 8002804:	005b      	lsls	r3, r3, #1
 8002806:	fa02 f303 	lsl.w	r3, r2, r3
 800280a:	69ba      	ldr	r2, [r7, #24]
 800280c:	4313      	orrs	r3, r2
 800280e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	69ba      	ldr	r2, [r7, #24]
 8002814:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	685b      	ldr	r3, [r3, #4]
 800281a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800281c:	2201      	movs	r2, #1
 800281e:	69fb      	ldr	r3, [r7, #28]
 8002820:	fa02 f303 	lsl.w	r3, r2, r3
 8002824:	43db      	mvns	r3, r3
 8002826:	69ba      	ldr	r2, [r7, #24]
 8002828:	4013      	ands	r3, r2
 800282a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 800282c:	683b      	ldr	r3, [r7, #0]
 800282e:	685b      	ldr	r3, [r3, #4]
 8002830:	091b      	lsrs	r3, r3, #4
 8002832:	f003 0201 	and.w	r2, r3, #1
 8002836:	69fb      	ldr	r3, [r7, #28]
 8002838:	fa02 f303 	lsl.w	r3, r2, r3
 800283c:	69ba      	ldr	r2, [r7, #24]
 800283e:	4313      	orrs	r3, r2
 8002840:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	69ba      	ldr	r2, [r7, #24]
 8002846:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	68db      	ldr	r3, [r3, #12]
 800284c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800284e:	69fb      	ldr	r3, [r7, #28]
 8002850:	005b      	lsls	r3, r3, #1
 8002852:	2203      	movs	r2, #3
 8002854:	fa02 f303 	lsl.w	r3, r2, r3
 8002858:	43db      	mvns	r3, r3
 800285a:	69ba      	ldr	r2, [r7, #24]
 800285c:	4013      	ands	r3, r2
 800285e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002860:	683b      	ldr	r3, [r7, #0]
 8002862:	689a      	ldr	r2, [r3, #8]
 8002864:	69fb      	ldr	r3, [r7, #28]
 8002866:	005b      	lsls	r3, r3, #1
 8002868:	fa02 f303 	lsl.w	r3, r2, r3
 800286c:	69ba      	ldr	r2, [r7, #24]
 800286e:	4313      	orrs	r3, r2
 8002870:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	69ba      	ldr	r2, [r7, #24]
 8002876:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002878:	683b      	ldr	r3, [r7, #0]
 800287a:	685b      	ldr	r3, [r3, #4]
 800287c:	2b02      	cmp	r3, #2
 800287e:	d003      	beq.n	8002888 <HAL_GPIO_Init+0xfc>
 8002880:	683b      	ldr	r3, [r7, #0]
 8002882:	685b      	ldr	r3, [r3, #4]
 8002884:	2b12      	cmp	r3, #18
 8002886:	d123      	bne.n	80028d0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002888:	69fb      	ldr	r3, [r7, #28]
 800288a:	08da      	lsrs	r2, r3, #3
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	3208      	adds	r2, #8
 8002890:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002894:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002896:	69fb      	ldr	r3, [r7, #28]
 8002898:	f003 0307 	and.w	r3, r3, #7
 800289c:	009b      	lsls	r3, r3, #2
 800289e:	220f      	movs	r2, #15
 80028a0:	fa02 f303 	lsl.w	r3, r2, r3
 80028a4:	43db      	mvns	r3, r3
 80028a6:	69ba      	ldr	r2, [r7, #24]
 80028a8:	4013      	ands	r3, r2
 80028aa:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80028ac:	683b      	ldr	r3, [r7, #0]
 80028ae:	691a      	ldr	r2, [r3, #16]
 80028b0:	69fb      	ldr	r3, [r7, #28]
 80028b2:	f003 0307 	and.w	r3, r3, #7
 80028b6:	009b      	lsls	r3, r3, #2
 80028b8:	fa02 f303 	lsl.w	r3, r2, r3
 80028bc:	69ba      	ldr	r2, [r7, #24]
 80028be:	4313      	orrs	r3, r2
 80028c0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80028c2:	69fb      	ldr	r3, [r7, #28]
 80028c4:	08da      	lsrs	r2, r3, #3
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	3208      	adds	r2, #8
 80028ca:	69b9      	ldr	r1, [r7, #24]
 80028cc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80028d6:	69fb      	ldr	r3, [r7, #28]
 80028d8:	005b      	lsls	r3, r3, #1
 80028da:	2203      	movs	r2, #3
 80028dc:	fa02 f303 	lsl.w	r3, r2, r3
 80028e0:	43db      	mvns	r3, r3
 80028e2:	69ba      	ldr	r2, [r7, #24]
 80028e4:	4013      	ands	r3, r2
 80028e6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80028e8:	683b      	ldr	r3, [r7, #0]
 80028ea:	685b      	ldr	r3, [r3, #4]
 80028ec:	f003 0203 	and.w	r2, r3, #3
 80028f0:	69fb      	ldr	r3, [r7, #28]
 80028f2:	005b      	lsls	r3, r3, #1
 80028f4:	fa02 f303 	lsl.w	r3, r2, r3
 80028f8:	69ba      	ldr	r2, [r7, #24]
 80028fa:	4313      	orrs	r3, r2
 80028fc:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	69ba      	ldr	r2, [r7, #24]
 8002902:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002904:	683b      	ldr	r3, [r7, #0]
 8002906:	685b      	ldr	r3, [r3, #4]
 8002908:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800290c:	2b00      	cmp	r3, #0
 800290e:	f000 80b4 	beq.w	8002a7a <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002912:	2300      	movs	r3, #0
 8002914:	60fb      	str	r3, [r7, #12]
 8002916:	4b5f      	ldr	r3, [pc, #380]	; (8002a94 <HAL_GPIO_Init+0x308>)
 8002918:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800291a:	4a5e      	ldr	r2, [pc, #376]	; (8002a94 <HAL_GPIO_Init+0x308>)
 800291c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002920:	6453      	str	r3, [r2, #68]	; 0x44
 8002922:	4b5c      	ldr	r3, [pc, #368]	; (8002a94 <HAL_GPIO_Init+0x308>)
 8002924:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002926:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800292a:	60fb      	str	r3, [r7, #12]
 800292c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800292e:	4a5a      	ldr	r2, [pc, #360]	; (8002a98 <HAL_GPIO_Init+0x30c>)
 8002930:	69fb      	ldr	r3, [r7, #28]
 8002932:	089b      	lsrs	r3, r3, #2
 8002934:	3302      	adds	r3, #2
 8002936:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800293a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800293c:	69fb      	ldr	r3, [r7, #28]
 800293e:	f003 0303 	and.w	r3, r3, #3
 8002942:	009b      	lsls	r3, r3, #2
 8002944:	220f      	movs	r2, #15
 8002946:	fa02 f303 	lsl.w	r3, r2, r3
 800294a:	43db      	mvns	r3, r3
 800294c:	69ba      	ldr	r2, [r7, #24]
 800294e:	4013      	ands	r3, r2
 8002950:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	4a51      	ldr	r2, [pc, #324]	; (8002a9c <HAL_GPIO_Init+0x310>)
 8002956:	4293      	cmp	r3, r2
 8002958:	d02b      	beq.n	80029b2 <HAL_GPIO_Init+0x226>
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	4a50      	ldr	r2, [pc, #320]	; (8002aa0 <HAL_GPIO_Init+0x314>)
 800295e:	4293      	cmp	r3, r2
 8002960:	d025      	beq.n	80029ae <HAL_GPIO_Init+0x222>
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	4a4f      	ldr	r2, [pc, #316]	; (8002aa4 <HAL_GPIO_Init+0x318>)
 8002966:	4293      	cmp	r3, r2
 8002968:	d01f      	beq.n	80029aa <HAL_GPIO_Init+0x21e>
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	4a4e      	ldr	r2, [pc, #312]	; (8002aa8 <HAL_GPIO_Init+0x31c>)
 800296e:	4293      	cmp	r3, r2
 8002970:	d019      	beq.n	80029a6 <HAL_GPIO_Init+0x21a>
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	4a4d      	ldr	r2, [pc, #308]	; (8002aac <HAL_GPIO_Init+0x320>)
 8002976:	4293      	cmp	r3, r2
 8002978:	d013      	beq.n	80029a2 <HAL_GPIO_Init+0x216>
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	4a4c      	ldr	r2, [pc, #304]	; (8002ab0 <HAL_GPIO_Init+0x324>)
 800297e:	4293      	cmp	r3, r2
 8002980:	d00d      	beq.n	800299e <HAL_GPIO_Init+0x212>
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	4a4b      	ldr	r2, [pc, #300]	; (8002ab4 <HAL_GPIO_Init+0x328>)
 8002986:	4293      	cmp	r3, r2
 8002988:	d007      	beq.n	800299a <HAL_GPIO_Init+0x20e>
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	4a4a      	ldr	r2, [pc, #296]	; (8002ab8 <HAL_GPIO_Init+0x32c>)
 800298e:	4293      	cmp	r3, r2
 8002990:	d101      	bne.n	8002996 <HAL_GPIO_Init+0x20a>
 8002992:	2307      	movs	r3, #7
 8002994:	e00e      	b.n	80029b4 <HAL_GPIO_Init+0x228>
 8002996:	2308      	movs	r3, #8
 8002998:	e00c      	b.n	80029b4 <HAL_GPIO_Init+0x228>
 800299a:	2306      	movs	r3, #6
 800299c:	e00a      	b.n	80029b4 <HAL_GPIO_Init+0x228>
 800299e:	2305      	movs	r3, #5
 80029a0:	e008      	b.n	80029b4 <HAL_GPIO_Init+0x228>
 80029a2:	2304      	movs	r3, #4
 80029a4:	e006      	b.n	80029b4 <HAL_GPIO_Init+0x228>
 80029a6:	2303      	movs	r3, #3
 80029a8:	e004      	b.n	80029b4 <HAL_GPIO_Init+0x228>
 80029aa:	2302      	movs	r3, #2
 80029ac:	e002      	b.n	80029b4 <HAL_GPIO_Init+0x228>
 80029ae:	2301      	movs	r3, #1
 80029b0:	e000      	b.n	80029b4 <HAL_GPIO_Init+0x228>
 80029b2:	2300      	movs	r3, #0
 80029b4:	69fa      	ldr	r2, [r7, #28]
 80029b6:	f002 0203 	and.w	r2, r2, #3
 80029ba:	0092      	lsls	r2, r2, #2
 80029bc:	4093      	lsls	r3, r2
 80029be:	69ba      	ldr	r2, [r7, #24]
 80029c0:	4313      	orrs	r3, r2
 80029c2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80029c4:	4934      	ldr	r1, [pc, #208]	; (8002a98 <HAL_GPIO_Init+0x30c>)
 80029c6:	69fb      	ldr	r3, [r7, #28]
 80029c8:	089b      	lsrs	r3, r3, #2
 80029ca:	3302      	adds	r3, #2
 80029cc:	69ba      	ldr	r2, [r7, #24]
 80029ce:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80029d2:	4b3a      	ldr	r3, [pc, #232]	; (8002abc <HAL_GPIO_Init+0x330>)
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80029d8:	693b      	ldr	r3, [r7, #16]
 80029da:	43db      	mvns	r3, r3
 80029dc:	69ba      	ldr	r2, [r7, #24]
 80029de:	4013      	ands	r3, r2
 80029e0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80029e2:	683b      	ldr	r3, [r7, #0]
 80029e4:	685b      	ldr	r3, [r3, #4]
 80029e6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80029ea:	2b00      	cmp	r3, #0
 80029ec:	d003      	beq.n	80029f6 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80029ee:	69ba      	ldr	r2, [r7, #24]
 80029f0:	693b      	ldr	r3, [r7, #16]
 80029f2:	4313      	orrs	r3, r2
 80029f4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80029f6:	4a31      	ldr	r2, [pc, #196]	; (8002abc <HAL_GPIO_Init+0x330>)
 80029f8:	69bb      	ldr	r3, [r7, #24]
 80029fa:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80029fc:	4b2f      	ldr	r3, [pc, #188]	; (8002abc <HAL_GPIO_Init+0x330>)
 80029fe:	685b      	ldr	r3, [r3, #4]
 8002a00:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002a02:	693b      	ldr	r3, [r7, #16]
 8002a04:	43db      	mvns	r3, r3
 8002a06:	69ba      	ldr	r2, [r7, #24]
 8002a08:	4013      	ands	r3, r2
 8002a0a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002a0c:	683b      	ldr	r3, [r7, #0]
 8002a0e:	685b      	ldr	r3, [r3, #4]
 8002a10:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a14:	2b00      	cmp	r3, #0
 8002a16:	d003      	beq.n	8002a20 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8002a18:	69ba      	ldr	r2, [r7, #24]
 8002a1a:	693b      	ldr	r3, [r7, #16]
 8002a1c:	4313      	orrs	r3, r2
 8002a1e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002a20:	4a26      	ldr	r2, [pc, #152]	; (8002abc <HAL_GPIO_Init+0x330>)
 8002a22:	69bb      	ldr	r3, [r7, #24]
 8002a24:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002a26:	4b25      	ldr	r3, [pc, #148]	; (8002abc <HAL_GPIO_Init+0x330>)
 8002a28:	689b      	ldr	r3, [r3, #8]
 8002a2a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002a2c:	693b      	ldr	r3, [r7, #16]
 8002a2e:	43db      	mvns	r3, r3
 8002a30:	69ba      	ldr	r2, [r7, #24]
 8002a32:	4013      	ands	r3, r2
 8002a34:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002a36:	683b      	ldr	r3, [r7, #0]
 8002a38:	685b      	ldr	r3, [r3, #4]
 8002a3a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002a3e:	2b00      	cmp	r3, #0
 8002a40:	d003      	beq.n	8002a4a <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8002a42:	69ba      	ldr	r2, [r7, #24]
 8002a44:	693b      	ldr	r3, [r7, #16]
 8002a46:	4313      	orrs	r3, r2
 8002a48:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002a4a:	4a1c      	ldr	r2, [pc, #112]	; (8002abc <HAL_GPIO_Init+0x330>)
 8002a4c:	69bb      	ldr	r3, [r7, #24]
 8002a4e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002a50:	4b1a      	ldr	r3, [pc, #104]	; (8002abc <HAL_GPIO_Init+0x330>)
 8002a52:	68db      	ldr	r3, [r3, #12]
 8002a54:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002a56:	693b      	ldr	r3, [r7, #16]
 8002a58:	43db      	mvns	r3, r3
 8002a5a:	69ba      	ldr	r2, [r7, #24]
 8002a5c:	4013      	ands	r3, r2
 8002a5e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002a60:	683b      	ldr	r3, [r7, #0]
 8002a62:	685b      	ldr	r3, [r3, #4]
 8002a64:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002a68:	2b00      	cmp	r3, #0
 8002a6a:	d003      	beq.n	8002a74 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8002a6c:	69ba      	ldr	r2, [r7, #24]
 8002a6e:	693b      	ldr	r3, [r7, #16]
 8002a70:	4313      	orrs	r3, r2
 8002a72:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002a74:	4a11      	ldr	r2, [pc, #68]	; (8002abc <HAL_GPIO_Init+0x330>)
 8002a76:	69bb      	ldr	r3, [r7, #24]
 8002a78:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002a7a:	69fb      	ldr	r3, [r7, #28]
 8002a7c:	3301      	adds	r3, #1
 8002a7e:	61fb      	str	r3, [r7, #28]
 8002a80:	69fb      	ldr	r3, [r7, #28]
 8002a82:	2b0f      	cmp	r3, #15
 8002a84:	f67f ae90 	bls.w	80027a8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002a88:	bf00      	nop
 8002a8a:	3724      	adds	r7, #36	; 0x24
 8002a8c:	46bd      	mov	sp, r7
 8002a8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a92:	4770      	bx	lr
 8002a94:	40023800 	.word	0x40023800
 8002a98:	40013800 	.word	0x40013800
 8002a9c:	40020000 	.word	0x40020000
 8002aa0:	40020400 	.word	0x40020400
 8002aa4:	40020800 	.word	0x40020800
 8002aa8:	40020c00 	.word	0x40020c00
 8002aac:	40021000 	.word	0x40021000
 8002ab0:	40021400 	.word	0x40021400
 8002ab4:	40021800 	.word	0x40021800
 8002ab8:	40021c00 	.word	0x40021c00
 8002abc:	40013c00 	.word	0x40013c00

08002ac0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002ac0:	b480      	push	{r7}
 8002ac2:	b083      	sub	sp, #12
 8002ac4:	af00      	add	r7, sp, #0
 8002ac6:	6078      	str	r0, [r7, #4]
 8002ac8:	460b      	mov	r3, r1
 8002aca:	807b      	strh	r3, [r7, #2]
 8002acc:	4613      	mov	r3, r2
 8002ace:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002ad0:	787b      	ldrb	r3, [r7, #1]
 8002ad2:	2b00      	cmp	r3, #0
 8002ad4:	d003      	beq.n	8002ade <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002ad6:	887a      	ldrh	r2, [r7, #2]
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002adc:	e003      	b.n	8002ae6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002ade:	887b      	ldrh	r3, [r7, #2]
 8002ae0:	041a      	lsls	r2, r3, #16
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	619a      	str	r2, [r3, #24]
}
 8002ae6:	bf00      	nop
 8002ae8:	370c      	adds	r7, #12
 8002aea:	46bd      	mov	sp, r7
 8002aec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002af0:	4770      	bx	lr

08002af2 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002af2:	b480      	push	{r7}
 8002af4:	b083      	sub	sp, #12
 8002af6:	af00      	add	r7, sp, #0
 8002af8:	6078      	str	r0, [r7, #4]
 8002afa:	460b      	mov	r3, r1
 8002afc:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) == GPIO_Pin)
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	695a      	ldr	r2, [r3, #20]
 8002b02:	887b      	ldrh	r3, [r7, #2]
 8002b04:	401a      	ands	r2, r3
 8002b06:	887b      	ldrh	r3, [r7, #2]
 8002b08:	429a      	cmp	r2, r3
 8002b0a:	d104      	bne.n	8002b16 <HAL_GPIO_TogglePin+0x24>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8002b0c:	887b      	ldrh	r3, [r7, #2]
 8002b0e:	041a      	lsls	r2, r3, #16
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = GPIO_Pin;
  }
}
 8002b14:	e002      	b.n	8002b1c <HAL_GPIO_TogglePin+0x2a>
    GPIOx->BSRR = GPIO_Pin;
 8002b16:	887a      	ldrh	r2, [r7, #2]
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	619a      	str	r2, [r3, #24]
}
 8002b1c:	bf00      	nop
 8002b1e:	370c      	adds	r7, #12
 8002b20:	46bd      	mov	sp, r7
 8002b22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b26:	4770      	bx	lr

08002b28 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002b28:	b580      	push	{r7, lr}
 8002b2a:	b086      	sub	sp, #24
 8002b2c:	af00      	add	r7, sp, #0
 8002b2e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	2b00      	cmp	r3, #0
 8002b34:	d101      	bne.n	8002b3a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002b36:	2301      	movs	r3, #1
 8002b38:	e25b      	b.n	8002ff2 <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	f003 0301 	and.w	r3, r3, #1
 8002b42:	2b00      	cmp	r3, #0
 8002b44:	d075      	beq.n	8002c32 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002b46:	4ba3      	ldr	r3, [pc, #652]	; (8002dd4 <HAL_RCC_OscConfig+0x2ac>)
 8002b48:	689b      	ldr	r3, [r3, #8]
 8002b4a:	f003 030c 	and.w	r3, r3, #12
 8002b4e:	2b04      	cmp	r3, #4
 8002b50:	d00c      	beq.n	8002b6c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002b52:	4ba0      	ldr	r3, [pc, #640]	; (8002dd4 <HAL_RCC_OscConfig+0x2ac>)
 8002b54:	689b      	ldr	r3, [r3, #8]
 8002b56:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002b5a:	2b08      	cmp	r3, #8
 8002b5c:	d112      	bne.n	8002b84 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002b5e:	4b9d      	ldr	r3, [pc, #628]	; (8002dd4 <HAL_RCC_OscConfig+0x2ac>)
 8002b60:	685b      	ldr	r3, [r3, #4]
 8002b62:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002b66:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002b6a:	d10b      	bne.n	8002b84 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002b6c:	4b99      	ldr	r3, [pc, #612]	; (8002dd4 <HAL_RCC_OscConfig+0x2ac>)
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b74:	2b00      	cmp	r3, #0
 8002b76:	d05b      	beq.n	8002c30 <HAL_RCC_OscConfig+0x108>
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	685b      	ldr	r3, [r3, #4]
 8002b7c:	2b00      	cmp	r3, #0
 8002b7e:	d157      	bne.n	8002c30 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002b80:	2301      	movs	r3, #1
 8002b82:	e236      	b.n	8002ff2 <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	685b      	ldr	r3, [r3, #4]
 8002b88:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002b8c:	d106      	bne.n	8002b9c <HAL_RCC_OscConfig+0x74>
 8002b8e:	4b91      	ldr	r3, [pc, #580]	; (8002dd4 <HAL_RCC_OscConfig+0x2ac>)
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	4a90      	ldr	r2, [pc, #576]	; (8002dd4 <HAL_RCC_OscConfig+0x2ac>)
 8002b94:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002b98:	6013      	str	r3, [r2, #0]
 8002b9a:	e01d      	b.n	8002bd8 <HAL_RCC_OscConfig+0xb0>
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	685b      	ldr	r3, [r3, #4]
 8002ba0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002ba4:	d10c      	bne.n	8002bc0 <HAL_RCC_OscConfig+0x98>
 8002ba6:	4b8b      	ldr	r3, [pc, #556]	; (8002dd4 <HAL_RCC_OscConfig+0x2ac>)
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	4a8a      	ldr	r2, [pc, #552]	; (8002dd4 <HAL_RCC_OscConfig+0x2ac>)
 8002bac:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002bb0:	6013      	str	r3, [r2, #0]
 8002bb2:	4b88      	ldr	r3, [pc, #544]	; (8002dd4 <HAL_RCC_OscConfig+0x2ac>)
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	4a87      	ldr	r2, [pc, #540]	; (8002dd4 <HAL_RCC_OscConfig+0x2ac>)
 8002bb8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002bbc:	6013      	str	r3, [r2, #0]
 8002bbe:	e00b      	b.n	8002bd8 <HAL_RCC_OscConfig+0xb0>
 8002bc0:	4b84      	ldr	r3, [pc, #528]	; (8002dd4 <HAL_RCC_OscConfig+0x2ac>)
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	4a83      	ldr	r2, [pc, #524]	; (8002dd4 <HAL_RCC_OscConfig+0x2ac>)
 8002bc6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002bca:	6013      	str	r3, [r2, #0]
 8002bcc:	4b81      	ldr	r3, [pc, #516]	; (8002dd4 <HAL_RCC_OscConfig+0x2ac>)
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	4a80      	ldr	r2, [pc, #512]	; (8002dd4 <HAL_RCC_OscConfig+0x2ac>)
 8002bd2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002bd6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	685b      	ldr	r3, [r3, #4]
 8002bdc:	2b00      	cmp	r3, #0
 8002bde:	d013      	beq.n	8002c08 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002be0:	f7fe ffe4 	bl	8001bac <HAL_GetTick>
 8002be4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002be6:	e008      	b.n	8002bfa <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002be8:	f7fe ffe0 	bl	8001bac <HAL_GetTick>
 8002bec:	4602      	mov	r2, r0
 8002bee:	693b      	ldr	r3, [r7, #16]
 8002bf0:	1ad3      	subs	r3, r2, r3
 8002bf2:	2b64      	cmp	r3, #100	; 0x64
 8002bf4:	d901      	bls.n	8002bfa <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002bf6:	2303      	movs	r3, #3
 8002bf8:	e1fb      	b.n	8002ff2 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002bfa:	4b76      	ldr	r3, [pc, #472]	; (8002dd4 <HAL_RCC_OscConfig+0x2ac>)
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c02:	2b00      	cmp	r3, #0
 8002c04:	d0f0      	beq.n	8002be8 <HAL_RCC_OscConfig+0xc0>
 8002c06:	e014      	b.n	8002c32 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c08:	f7fe ffd0 	bl	8001bac <HAL_GetTick>
 8002c0c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002c0e:	e008      	b.n	8002c22 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002c10:	f7fe ffcc 	bl	8001bac <HAL_GetTick>
 8002c14:	4602      	mov	r2, r0
 8002c16:	693b      	ldr	r3, [r7, #16]
 8002c18:	1ad3      	subs	r3, r2, r3
 8002c1a:	2b64      	cmp	r3, #100	; 0x64
 8002c1c:	d901      	bls.n	8002c22 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002c1e:	2303      	movs	r3, #3
 8002c20:	e1e7      	b.n	8002ff2 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002c22:	4b6c      	ldr	r3, [pc, #432]	; (8002dd4 <HAL_RCC_OscConfig+0x2ac>)
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c2a:	2b00      	cmp	r3, #0
 8002c2c:	d1f0      	bne.n	8002c10 <HAL_RCC_OscConfig+0xe8>
 8002c2e:	e000      	b.n	8002c32 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002c30:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	f003 0302 	and.w	r3, r3, #2
 8002c3a:	2b00      	cmp	r3, #0
 8002c3c:	d063      	beq.n	8002d06 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002c3e:	4b65      	ldr	r3, [pc, #404]	; (8002dd4 <HAL_RCC_OscConfig+0x2ac>)
 8002c40:	689b      	ldr	r3, [r3, #8]
 8002c42:	f003 030c 	and.w	r3, r3, #12
 8002c46:	2b00      	cmp	r3, #0
 8002c48:	d00b      	beq.n	8002c62 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002c4a:	4b62      	ldr	r3, [pc, #392]	; (8002dd4 <HAL_RCC_OscConfig+0x2ac>)
 8002c4c:	689b      	ldr	r3, [r3, #8]
 8002c4e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002c52:	2b08      	cmp	r3, #8
 8002c54:	d11c      	bne.n	8002c90 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002c56:	4b5f      	ldr	r3, [pc, #380]	; (8002dd4 <HAL_RCC_OscConfig+0x2ac>)
 8002c58:	685b      	ldr	r3, [r3, #4]
 8002c5a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002c5e:	2b00      	cmp	r3, #0
 8002c60:	d116      	bne.n	8002c90 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002c62:	4b5c      	ldr	r3, [pc, #368]	; (8002dd4 <HAL_RCC_OscConfig+0x2ac>)
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	f003 0302 	and.w	r3, r3, #2
 8002c6a:	2b00      	cmp	r3, #0
 8002c6c:	d005      	beq.n	8002c7a <HAL_RCC_OscConfig+0x152>
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	68db      	ldr	r3, [r3, #12]
 8002c72:	2b01      	cmp	r3, #1
 8002c74:	d001      	beq.n	8002c7a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002c76:	2301      	movs	r3, #1
 8002c78:	e1bb      	b.n	8002ff2 <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002c7a:	4b56      	ldr	r3, [pc, #344]	; (8002dd4 <HAL_RCC_OscConfig+0x2ac>)
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	691b      	ldr	r3, [r3, #16]
 8002c86:	00db      	lsls	r3, r3, #3
 8002c88:	4952      	ldr	r1, [pc, #328]	; (8002dd4 <HAL_RCC_OscConfig+0x2ac>)
 8002c8a:	4313      	orrs	r3, r2
 8002c8c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002c8e:	e03a      	b.n	8002d06 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	68db      	ldr	r3, [r3, #12]
 8002c94:	2b00      	cmp	r3, #0
 8002c96:	d020      	beq.n	8002cda <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002c98:	4b4f      	ldr	r3, [pc, #316]	; (8002dd8 <HAL_RCC_OscConfig+0x2b0>)
 8002c9a:	2201      	movs	r2, #1
 8002c9c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c9e:	f7fe ff85 	bl	8001bac <HAL_GetTick>
 8002ca2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002ca4:	e008      	b.n	8002cb8 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002ca6:	f7fe ff81 	bl	8001bac <HAL_GetTick>
 8002caa:	4602      	mov	r2, r0
 8002cac:	693b      	ldr	r3, [r7, #16]
 8002cae:	1ad3      	subs	r3, r2, r3
 8002cb0:	2b02      	cmp	r3, #2
 8002cb2:	d901      	bls.n	8002cb8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002cb4:	2303      	movs	r3, #3
 8002cb6:	e19c      	b.n	8002ff2 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002cb8:	4b46      	ldr	r3, [pc, #280]	; (8002dd4 <HAL_RCC_OscConfig+0x2ac>)
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	f003 0302 	and.w	r3, r3, #2
 8002cc0:	2b00      	cmp	r3, #0
 8002cc2:	d0f0      	beq.n	8002ca6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002cc4:	4b43      	ldr	r3, [pc, #268]	; (8002dd4 <HAL_RCC_OscConfig+0x2ac>)
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	691b      	ldr	r3, [r3, #16]
 8002cd0:	00db      	lsls	r3, r3, #3
 8002cd2:	4940      	ldr	r1, [pc, #256]	; (8002dd4 <HAL_RCC_OscConfig+0x2ac>)
 8002cd4:	4313      	orrs	r3, r2
 8002cd6:	600b      	str	r3, [r1, #0]
 8002cd8:	e015      	b.n	8002d06 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002cda:	4b3f      	ldr	r3, [pc, #252]	; (8002dd8 <HAL_RCC_OscConfig+0x2b0>)
 8002cdc:	2200      	movs	r2, #0
 8002cde:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ce0:	f7fe ff64 	bl	8001bac <HAL_GetTick>
 8002ce4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002ce6:	e008      	b.n	8002cfa <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002ce8:	f7fe ff60 	bl	8001bac <HAL_GetTick>
 8002cec:	4602      	mov	r2, r0
 8002cee:	693b      	ldr	r3, [r7, #16]
 8002cf0:	1ad3      	subs	r3, r2, r3
 8002cf2:	2b02      	cmp	r3, #2
 8002cf4:	d901      	bls.n	8002cfa <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002cf6:	2303      	movs	r3, #3
 8002cf8:	e17b      	b.n	8002ff2 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002cfa:	4b36      	ldr	r3, [pc, #216]	; (8002dd4 <HAL_RCC_OscConfig+0x2ac>)
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	f003 0302 	and.w	r3, r3, #2
 8002d02:	2b00      	cmp	r3, #0
 8002d04:	d1f0      	bne.n	8002ce8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	f003 0308 	and.w	r3, r3, #8
 8002d0e:	2b00      	cmp	r3, #0
 8002d10:	d030      	beq.n	8002d74 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	695b      	ldr	r3, [r3, #20]
 8002d16:	2b00      	cmp	r3, #0
 8002d18:	d016      	beq.n	8002d48 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002d1a:	4b30      	ldr	r3, [pc, #192]	; (8002ddc <HAL_RCC_OscConfig+0x2b4>)
 8002d1c:	2201      	movs	r2, #1
 8002d1e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002d20:	f7fe ff44 	bl	8001bac <HAL_GetTick>
 8002d24:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002d26:	e008      	b.n	8002d3a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002d28:	f7fe ff40 	bl	8001bac <HAL_GetTick>
 8002d2c:	4602      	mov	r2, r0
 8002d2e:	693b      	ldr	r3, [r7, #16]
 8002d30:	1ad3      	subs	r3, r2, r3
 8002d32:	2b02      	cmp	r3, #2
 8002d34:	d901      	bls.n	8002d3a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002d36:	2303      	movs	r3, #3
 8002d38:	e15b      	b.n	8002ff2 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002d3a:	4b26      	ldr	r3, [pc, #152]	; (8002dd4 <HAL_RCC_OscConfig+0x2ac>)
 8002d3c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002d3e:	f003 0302 	and.w	r3, r3, #2
 8002d42:	2b00      	cmp	r3, #0
 8002d44:	d0f0      	beq.n	8002d28 <HAL_RCC_OscConfig+0x200>
 8002d46:	e015      	b.n	8002d74 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002d48:	4b24      	ldr	r3, [pc, #144]	; (8002ddc <HAL_RCC_OscConfig+0x2b4>)
 8002d4a:	2200      	movs	r2, #0
 8002d4c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002d4e:	f7fe ff2d 	bl	8001bac <HAL_GetTick>
 8002d52:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002d54:	e008      	b.n	8002d68 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002d56:	f7fe ff29 	bl	8001bac <HAL_GetTick>
 8002d5a:	4602      	mov	r2, r0
 8002d5c:	693b      	ldr	r3, [r7, #16]
 8002d5e:	1ad3      	subs	r3, r2, r3
 8002d60:	2b02      	cmp	r3, #2
 8002d62:	d901      	bls.n	8002d68 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8002d64:	2303      	movs	r3, #3
 8002d66:	e144      	b.n	8002ff2 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002d68:	4b1a      	ldr	r3, [pc, #104]	; (8002dd4 <HAL_RCC_OscConfig+0x2ac>)
 8002d6a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002d6c:	f003 0302 	and.w	r3, r3, #2
 8002d70:	2b00      	cmp	r3, #0
 8002d72:	d1f0      	bne.n	8002d56 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	f003 0304 	and.w	r3, r3, #4
 8002d7c:	2b00      	cmp	r3, #0
 8002d7e:	f000 80a0 	beq.w	8002ec2 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002d82:	2300      	movs	r3, #0
 8002d84:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002d86:	4b13      	ldr	r3, [pc, #76]	; (8002dd4 <HAL_RCC_OscConfig+0x2ac>)
 8002d88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d8a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002d8e:	2b00      	cmp	r3, #0
 8002d90:	d10f      	bne.n	8002db2 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002d92:	2300      	movs	r3, #0
 8002d94:	60bb      	str	r3, [r7, #8]
 8002d96:	4b0f      	ldr	r3, [pc, #60]	; (8002dd4 <HAL_RCC_OscConfig+0x2ac>)
 8002d98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d9a:	4a0e      	ldr	r2, [pc, #56]	; (8002dd4 <HAL_RCC_OscConfig+0x2ac>)
 8002d9c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002da0:	6413      	str	r3, [r2, #64]	; 0x40
 8002da2:	4b0c      	ldr	r3, [pc, #48]	; (8002dd4 <HAL_RCC_OscConfig+0x2ac>)
 8002da4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002da6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002daa:	60bb      	str	r3, [r7, #8]
 8002dac:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002dae:	2301      	movs	r3, #1
 8002db0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002db2:	4b0b      	ldr	r3, [pc, #44]	; (8002de0 <HAL_RCC_OscConfig+0x2b8>)
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002dba:	2b00      	cmp	r3, #0
 8002dbc:	d121      	bne.n	8002e02 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002dbe:	4b08      	ldr	r3, [pc, #32]	; (8002de0 <HAL_RCC_OscConfig+0x2b8>)
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	4a07      	ldr	r2, [pc, #28]	; (8002de0 <HAL_RCC_OscConfig+0x2b8>)
 8002dc4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002dc8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002dca:	f7fe feef 	bl	8001bac <HAL_GetTick>
 8002dce:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002dd0:	e011      	b.n	8002df6 <HAL_RCC_OscConfig+0x2ce>
 8002dd2:	bf00      	nop
 8002dd4:	40023800 	.word	0x40023800
 8002dd8:	42470000 	.word	0x42470000
 8002ddc:	42470e80 	.word	0x42470e80
 8002de0:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002de4:	f7fe fee2 	bl	8001bac <HAL_GetTick>
 8002de8:	4602      	mov	r2, r0
 8002dea:	693b      	ldr	r3, [r7, #16]
 8002dec:	1ad3      	subs	r3, r2, r3
 8002dee:	2b02      	cmp	r3, #2
 8002df0:	d901      	bls.n	8002df6 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8002df2:	2303      	movs	r3, #3
 8002df4:	e0fd      	b.n	8002ff2 <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002df6:	4b81      	ldr	r3, [pc, #516]	; (8002ffc <HAL_RCC_OscConfig+0x4d4>)
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002dfe:	2b00      	cmp	r3, #0
 8002e00:	d0f0      	beq.n	8002de4 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	689b      	ldr	r3, [r3, #8]
 8002e06:	2b01      	cmp	r3, #1
 8002e08:	d106      	bne.n	8002e18 <HAL_RCC_OscConfig+0x2f0>
 8002e0a:	4b7d      	ldr	r3, [pc, #500]	; (8003000 <HAL_RCC_OscConfig+0x4d8>)
 8002e0c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e0e:	4a7c      	ldr	r2, [pc, #496]	; (8003000 <HAL_RCC_OscConfig+0x4d8>)
 8002e10:	f043 0301 	orr.w	r3, r3, #1
 8002e14:	6713      	str	r3, [r2, #112]	; 0x70
 8002e16:	e01c      	b.n	8002e52 <HAL_RCC_OscConfig+0x32a>
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	689b      	ldr	r3, [r3, #8]
 8002e1c:	2b05      	cmp	r3, #5
 8002e1e:	d10c      	bne.n	8002e3a <HAL_RCC_OscConfig+0x312>
 8002e20:	4b77      	ldr	r3, [pc, #476]	; (8003000 <HAL_RCC_OscConfig+0x4d8>)
 8002e22:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e24:	4a76      	ldr	r2, [pc, #472]	; (8003000 <HAL_RCC_OscConfig+0x4d8>)
 8002e26:	f043 0304 	orr.w	r3, r3, #4
 8002e2a:	6713      	str	r3, [r2, #112]	; 0x70
 8002e2c:	4b74      	ldr	r3, [pc, #464]	; (8003000 <HAL_RCC_OscConfig+0x4d8>)
 8002e2e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e30:	4a73      	ldr	r2, [pc, #460]	; (8003000 <HAL_RCC_OscConfig+0x4d8>)
 8002e32:	f043 0301 	orr.w	r3, r3, #1
 8002e36:	6713      	str	r3, [r2, #112]	; 0x70
 8002e38:	e00b      	b.n	8002e52 <HAL_RCC_OscConfig+0x32a>
 8002e3a:	4b71      	ldr	r3, [pc, #452]	; (8003000 <HAL_RCC_OscConfig+0x4d8>)
 8002e3c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e3e:	4a70      	ldr	r2, [pc, #448]	; (8003000 <HAL_RCC_OscConfig+0x4d8>)
 8002e40:	f023 0301 	bic.w	r3, r3, #1
 8002e44:	6713      	str	r3, [r2, #112]	; 0x70
 8002e46:	4b6e      	ldr	r3, [pc, #440]	; (8003000 <HAL_RCC_OscConfig+0x4d8>)
 8002e48:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e4a:	4a6d      	ldr	r2, [pc, #436]	; (8003000 <HAL_RCC_OscConfig+0x4d8>)
 8002e4c:	f023 0304 	bic.w	r3, r3, #4
 8002e50:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	689b      	ldr	r3, [r3, #8]
 8002e56:	2b00      	cmp	r3, #0
 8002e58:	d015      	beq.n	8002e86 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002e5a:	f7fe fea7 	bl	8001bac <HAL_GetTick>
 8002e5e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002e60:	e00a      	b.n	8002e78 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002e62:	f7fe fea3 	bl	8001bac <HAL_GetTick>
 8002e66:	4602      	mov	r2, r0
 8002e68:	693b      	ldr	r3, [r7, #16]
 8002e6a:	1ad3      	subs	r3, r2, r3
 8002e6c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002e70:	4293      	cmp	r3, r2
 8002e72:	d901      	bls.n	8002e78 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8002e74:	2303      	movs	r3, #3
 8002e76:	e0bc      	b.n	8002ff2 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002e78:	4b61      	ldr	r3, [pc, #388]	; (8003000 <HAL_RCC_OscConfig+0x4d8>)
 8002e7a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e7c:	f003 0302 	and.w	r3, r3, #2
 8002e80:	2b00      	cmp	r3, #0
 8002e82:	d0ee      	beq.n	8002e62 <HAL_RCC_OscConfig+0x33a>
 8002e84:	e014      	b.n	8002eb0 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002e86:	f7fe fe91 	bl	8001bac <HAL_GetTick>
 8002e8a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002e8c:	e00a      	b.n	8002ea4 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002e8e:	f7fe fe8d 	bl	8001bac <HAL_GetTick>
 8002e92:	4602      	mov	r2, r0
 8002e94:	693b      	ldr	r3, [r7, #16]
 8002e96:	1ad3      	subs	r3, r2, r3
 8002e98:	f241 3288 	movw	r2, #5000	; 0x1388
 8002e9c:	4293      	cmp	r3, r2
 8002e9e:	d901      	bls.n	8002ea4 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8002ea0:	2303      	movs	r3, #3
 8002ea2:	e0a6      	b.n	8002ff2 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002ea4:	4b56      	ldr	r3, [pc, #344]	; (8003000 <HAL_RCC_OscConfig+0x4d8>)
 8002ea6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ea8:	f003 0302 	and.w	r3, r3, #2
 8002eac:	2b00      	cmp	r3, #0
 8002eae:	d1ee      	bne.n	8002e8e <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002eb0:	7dfb      	ldrb	r3, [r7, #23]
 8002eb2:	2b01      	cmp	r3, #1
 8002eb4:	d105      	bne.n	8002ec2 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002eb6:	4b52      	ldr	r3, [pc, #328]	; (8003000 <HAL_RCC_OscConfig+0x4d8>)
 8002eb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002eba:	4a51      	ldr	r2, [pc, #324]	; (8003000 <HAL_RCC_OscConfig+0x4d8>)
 8002ebc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002ec0:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	699b      	ldr	r3, [r3, #24]
 8002ec6:	2b00      	cmp	r3, #0
 8002ec8:	f000 8092 	beq.w	8002ff0 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002ecc:	4b4c      	ldr	r3, [pc, #304]	; (8003000 <HAL_RCC_OscConfig+0x4d8>)
 8002ece:	689b      	ldr	r3, [r3, #8]
 8002ed0:	f003 030c 	and.w	r3, r3, #12
 8002ed4:	2b08      	cmp	r3, #8
 8002ed6:	d05c      	beq.n	8002f92 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	699b      	ldr	r3, [r3, #24]
 8002edc:	2b02      	cmp	r3, #2
 8002ede:	d141      	bne.n	8002f64 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002ee0:	4b48      	ldr	r3, [pc, #288]	; (8003004 <HAL_RCC_OscConfig+0x4dc>)
 8002ee2:	2200      	movs	r2, #0
 8002ee4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ee6:	f7fe fe61 	bl	8001bac <HAL_GetTick>
 8002eea:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002eec:	e008      	b.n	8002f00 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002eee:	f7fe fe5d 	bl	8001bac <HAL_GetTick>
 8002ef2:	4602      	mov	r2, r0
 8002ef4:	693b      	ldr	r3, [r7, #16]
 8002ef6:	1ad3      	subs	r3, r2, r3
 8002ef8:	2b02      	cmp	r3, #2
 8002efa:	d901      	bls.n	8002f00 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8002efc:	2303      	movs	r3, #3
 8002efe:	e078      	b.n	8002ff2 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002f00:	4b3f      	ldr	r3, [pc, #252]	; (8003000 <HAL_RCC_OscConfig+0x4d8>)
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002f08:	2b00      	cmp	r3, #0
 8002f0a:	d1f0      	bne.n	8002eee <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	69da      	ldr	r2, [r3, #28]
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	6a1b      	ldr	r3, [r3, #32]
 8002f14:	431a      	orrs	r2, r3
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f1a:	019b      	lsls	r3, r3, #6
 8002f1c:	431a      	orrs	r2, r3
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f22:	085b      	lsrs	r3, r3, #1
 8002f24:	3b01      	subs	r3, #1
 8002f26:	041b      	lsls	r3, r3, #16
 8002f28:	431a      	orrs	r2, r3
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f2e:	061b      	lsls	r3, r3, #24
 8002f30:	4933      	ldr	r1, [pc, #204]	; (8003000 <HAL_RCC_OscConfig+0x4d8>)
 8002f32:	4313      	orrs	r3, r2
 8002f34:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002f36:	4b33      	ldr	r3, [pc, #204]	; (8003004 <HAL_RCC_OscConfig+0x4dc>)
 8002f38:	2201      	movs	r2, #1
 8002f3a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f3c:	f7fe fe36 	bl	8001bac <HAL_GetTick>
 8002f40:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002f42:	e008      	b.n	8002f56 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002f44:	f7fe fe32 	bl	8001bac <HAL_GetTick>
 8002f48:	4602      	mov	r2, r0
 8002f4a:	693b      	ldr	r3, [r7, #16]
 8002f4c:	1ad3      	subs	r3, r2, r3
 8002f4e:	2b02      	cmp	r3, #2
 8002f50:	d901      	bls.n	8002f56 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8002f52:	2303      	movs	r3, #3
 8002f54:	e04d      	b.n	8002ff2 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002f56:	4b2a      	ldr	r3, [pc, #168]	; (8003000 <HAL_RCC_OscConfig+0x4d8>)
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002f5e:	2b00      	cmp	r3, #0
 8002f60:	d0f0      	beq.n	8002f44 <HAL_RCC_OscConfig+0x41c>
 8002f62:	e045      	b.n	8002ff0 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002f64:	4b27      	ldr	r3, [pc, #156]	; (8003004 <HAL_RCC_OscConfig+0x4dc>)
 8002f66:	2200      	movs	r2, #0
 8002f68:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f6a:	f7fe fe1f 	bl	8001bac <HAL_GetTick>
 8002f6e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002f70:	e008      	b.n	8002f84 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002f72:	f7fe fe1b 	bl	8001bac <HAL_GetTick>
 8002f76:	4602      	mov	r2, r0
 8002f78:	693b      	ldr	r3, [r7, #16]
 8002f7a:	1ad3      	subs	r3, r2, r3
 8002f7c:	2b02      	cmp	r3, #2
 8002f7e:	d901      	bls.n	8002f84 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8002f80:	2303      	movs	r3, #3
 8002f82:	e036      	b.n	8002ff2 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002f84:	4b1e      	ldr	r3, [pc, #120]	; (8003000 <HAL_RCC_OscConfig+0x4d8>)
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002f8c:	2b00      	cmp	r3, #0
 8002f8e:	d1f0      	bne.n	8002f72 <HAL_RCC_OscConfig+0x44a>
 8002f90:	e02e      	b.n	8002ff0 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	699b      	ldr	r3, [r3, #24]
 8002f96:	2b01      	cmp	r3, #1
 8002f98:	d101      	bne.n	8002f9e <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8002f9a:	2301      	movs	r3, #1
 8002f9c:	e029      	b.n	8002ff2 <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002f9e:	4b18      	ldr	r3, [pc, #96]	; (8003000 <HAL_RCC_OscConfig+0x4d8>)
 8002fa0:	689b      	ldr	r3, [r3, #8]
 8002fa2:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002fa4:	68fb      	ldr	r3, [r7, #12]
 8002fa6:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	69db      	ldr	r3, [r3, #28]
 8002fae:	429a      	cmp	r2, r3
 8002fb0:	d11c      	bne.n	8002fec <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002fb2:	68fb      	ldr	r3, [r7, #12]
 8002fb4:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002fbc:	429a      	cmp	r2, r3
 8002fbe:	d115      	bne.n	8002fec <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8002fc0:	68fa      	ldr	r2, [r7, #12]
 8002fc2:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002fc6:	4013      	ands	r3, r2
 8002fc8:	687a      	ldr	r2, [r7, #4]
 8002fca:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002fcc:	4293      	cmp	r3, r2
 8002fce:	d10d      	bne.n	8002fec <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8002fd0:	68fb      	ldr	r3, [r7, #12]
 8002fd2:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8002fda:	429a      	cmp	r2, r3
 8002fdc:	d106      	bne.n	8002fec <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 8002fde:	68fb      	ldr	r3, [r7, #12]
 8002fe0:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8002fe8:	429a      	cmp	r2, r3
 8002fea:	d001      	beq.n	8002ff0 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 8002fec:	2301      	movs	r3, #1
 8002fee:	e000      	b.n	8002ff2 <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 8002ff0:	2300      	movs	r3, #0
}
 8002ff2:	4618      	mov	r0, r3
 8002ff4:	3718      	adds	r7, #24
 8002ff6:	46bd      	mov	sp, r7
 8002ff8:	bd80      	pop	{r7, pc}
 8002ffa:	bf00      	nop
 8002ffc:	40007000 	.word	0x40007000
 8003000:	40023800 	.word	0x40023800
 8003004:	42470060 	.word	0x42470060

08003008 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003008:	b580      	push	{r7, lr}
 800300a:	b084      	sub	sp, #16
 800300c:	af00      	add	r7, sp, #0
 800300e:	6078      	str	r0, [r7, #4]
 8003010:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	2b00      	cmp	r3, #0
 8003016:	d101      	bne.n	800301c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003018:	2301      	movs	r3, #1
 800301a:	e0cc      	b.n	80031b6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800301c:	4b68      	ldr	r3, [pc, #416]	; (80031c0 <HAL_RCC_ClockConfig+0x1b8>)
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	f003 030f 	and.w	r3, r3, #15
 8003024:	683a      	ldr	r2, [r7, #0]
 8003026:	429a      	cmp	r2, r3
 8003028:	d90c      	bls.n	8003044 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800302a:	4b65      	ldr	r3, [pc, #404]	; (80031c0 <HAL_RCC_ClockConfig+0x1b8>)
 800302c:	683a      	ldr	r2, [r7, #0]
 800302e:	b2d2      	uxtb	r2, r2
 8003030:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003032:	4b63      	ldr	r3, [pc, #396]	; (80031c0 <HAL_RCC_ClockConfig+0x1b8>)
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	f003 030f 	and.w	r3, r3, #15
 800303a:	683a      	ldr	r2, [r7, #0]
 800303c:	429a      	cmp	r2, r3
 800303e:	d001      	beq.n	8003044 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003040:	2301      	movs	r3, #1
 8003042:	e0b8      	b.n	80031b6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	f003 0302 	and.w	r3, r3, #2
 800304c:	2b00      	cmp	r3, #0
 800304e:	d020      	beq.n	8003092 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	f003 0304 	and.w	r3, r3, #4
 8003058:	2b00      	cmp	r3, #0
 800305a:	d005      	beq.n	8003068 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800305c:	4b59      	ldr	r3, [pc, #356]	; (80031c4 <HAL_RCC_ClockConfig+0x1bc>)
 800305e:	689b      	ldr	r3, [r3, #8]
 8003060:	4a58      	ldr	r2, [pc, #352]	; (80031c4 <HAL_RCC_ClockConfig+0x1bc>)
 8003062:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003066:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	f003 0308 	and.w	r3, r3, #8
 8003070:	2b00      	cmp	r3, #0
 8003072:	d005      	beq.n	8003080 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003074:	4b53      	ldr	r3, [pc, #332]	; (80031c4 <HAL_RCC_ClockConfig+0x1bc>)
 8003076:	689b      	ldr	r3, [r3, #8]
 8003078:	4a52      	ldr	r2, [pc, #328]	; (80031c4 <HAL_RCC_ClockConfig+0x1bc>)
 800307a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800307e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003080:	4b50      	ldr	r3, [pc, #320]	; (80031c4 <HAL_RCC_ClockConfig+0x1bc>)
 8003082:	689b      	ldr	r3, [r3, #8]
 8003084:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	689b      	ldr	r3, [r3, #8]
 800308c:	494d      	ldr	r1, [pc, #308]	; (80031c4 <HAL_RCC_ClockConfig+0x1bc>)
 800308e:	4313      	orrs	r3, r2
 8003090:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	f003 0301 	and.w	r3, r3, #1
 800309a:	2b00      	cmp	r3, #0
 800309c:	d044      	beq.n	8003128 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	685b      	ldr	r3, [r3, #4]
 80030a2:	2b01      	cmp	r3, #1
 80030a4:	d107      	bne.n	80030b6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80030a6:	4b47      	ldr	r3, [pc, #284]	; (80031c4 <HAL_RCC_ClockConfig+0x1bc>)
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80030ae:	2b00      	cmp	r3, #0
 80030b0:	d119      	bne.n	80030e6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80030b2:	2301      	movs	r3, #1
 80030b4:	e07f      	b.n	80031b6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	685b      	ldr	r3, [r3, #4]
 80030ba:	2b02      	cmp	r3, #2
 80030bc:	d003      	beq.n	80030c6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80030c2:	2b03      	cmp	r3, #3
 80030c4:	d107      	bne.n	80030d6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80030c6:	4b3f      	ldr	r3, [pc, #252]	; (80031c4 <HAL_RCC_ClockConfig+0x1bc>)
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80030ce:	2b00      	cmp	r3, #0
 80030d0:	d109      	bne.n	80030e6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80030d2:	2301      	movs	r3, #1
 80030d4:	e06f      	b.n	80031b6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80030d6:	4b3b      	ldr	r3, [pc, #236]	; (80031c4 <HAL_RCC_ClockConfig+0x1bc>)
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	f003 0302 	and.w	r3, r3, #2
 80030de:	2b00      	cmp	r3, #0
 80030e0:	d101      	bne.n	80030e6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80030e2:	2301      	movs	r3, #1
 80030e4:	e067      	b.n	80031b6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80030e6:	4b37      	ldr	r3, [pc, #220]	; (80031c4 <HAL_RCC_ClockConfig+0x1bc>)
 80030e8:	689b      	ldr	r3, [r3, #8]
 80030ea:	f023 0203 	bic.w	r2, r3, #3
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	685b      	ldr	r3, [r3, #4]
 80030f2:	4934      	ldr	r1, [pc, #208]	; (80031c4 <HAL_RCC_ClockConfig+0x1bc>)
 80030f4:	4313      	orrs	r3, r2
 80030f6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80030f8:	f7fe fd58 	bl	8001bac <HAL_GetTick>
 80030fc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80030fe:	e00a      	b.n	8003116 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003100:	f7fe fd54 	bl	8001bac <HAL_GetTick>
 8003104:	4602      	mov	r2, r0
 8003106:	68fb      	ldr	r3, [r7, #12]
 8003108:	1ad3      	subs	r3, r2, r3
 800310a:	f241 3288 	movw	r2, #5000	; 0x1388
 800310e:	4293      	cmp	r3, r2
 8003110:	d901      	bls.n	8003116 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003112:	2303      	movs	r3, #3
 8003114:	e04f      	b.n	80031b6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003116:	4b2b      	ldr	r3, [pc, #172]	; (80031c4 <HAL_RCC_ClockConfig+0x1bc>)
 8003118:	689b      	ldr	r3, [r3, #8]
 800311a:	f003 020c 	and.w	r2, r3, #12
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	685b      	ldr	r3, [r3, #4]
 8003122:	009b      	lsls	r3, r3, #2
 8003124:	429a      	cmp	r2, r3
 8003126:	d1eb      	bne.n	8003100 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003128:	4b25      	ldr	r3, [pc, #148]	; (80031c0 <HAL_RCC_ClockConfig+0x1b8>)
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	f003 030f 	and.w	r3, r3, #15
 8003130:	683a      	ldr	r2, [r7, #0]
 8003132:	429a      	cmp	r2, r3
 8003134:	d20c      	bcs.n	8003150 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003136:	4b22      	ldr	r3, [pc, #136]	; (80031c0 <HAL_RCC_ClockConfig+0x1b8>)
 8003138:	683a      	ldr	r2, [r7, #0]
 800313a:	b2d2      	uxtb	r2, r2
 800313c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800313e:	4b20      	ldr	r3, [pc, #128]	; (80031c0 <HAL_RCC_ClockConfig+0x1b8>)
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	f003 030f 	and.w	r3, r3, #15
 8003146:	683a      	ldr	r2, [r7, #0]
 8003148:	429a      	cmp	r2, r3
 800314a:	d001      	beq.n	8003150 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800314c:	2301      	movs	r3, #1
 800314e:	e032      	b.n	80031b6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	f003 0304 	and.w	r3, r3, #4
 8003158:	2b00      	cmp	r3, #0
 800315a:	d008      	beq.n	800316e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800315c:	4b19      	ldr	r3, [pc, #100]	; (80031c4 <HAL_RCC_ClockConfig+0x1bc>)
 800315e:	689b      	ldr	r3, [r3, #8]
 8003160:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	68db      	ldr	r3, [r3, #12]
 8003168:	4916      	ldr	r1, [pc, #88]	; (80031c4 <HAL_RCC_ClockConfig+0x1bc>)
 800316a:	4313      	orrs	r3, r2
 800316c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	f003 0308 	and.w	r3, r3, #8
 8003176:	2b00      	cmp	r3, #0
 8003178:	d009      	beq.n	800318e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800317a:	4b12      	ldr	r3, [pc, #72]	; (80031c4 <HAL_RCC_ClockConfig+0x1bc>)
 800317c:	689b      	ldr	r3, [r3, #8]
 800317e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	691b      	ldr	r3, [r3, #16]
 8003186:	00db      	lsls	r3, r3, #3
 8003188:	490e      	ldr	r1, [pc, #56]	; (80031c4 <HAL_RCC_ClockConfig+0x1bc>)
 800318a:	4313      	orrs	r3, r2
 800318c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800318e:	f000 f821 	bl	80031d4 <HAL_RCC_GetSysClockFreq>
 8003192:	4601      	mov	r1, r0
 8003194:	4b0b      	ldr	r3, [pc, #44]	; (80031c4 <HAL_RCC_ClockConfig+0x1bc>)
 8003196:	689b      	ldr	r3, [r3, #8]
 8003198:	091b      	lsrs	r3, r3, #4
 800319a:	f003 030f 	and.w	r3, r3, #15
 800319e:	4a0a      	ldr	r2, [pc, #40]	; (80031c8 <HAL_RCC_ClockConfig+0x1c0>)
 80031a0:	5cd3      	ldrb	r3, [r2, r3]
 80031a2:	fa21 f303 	lsr.w	r3, r1, r3
 80031a6:	4a09      	ldr	r2, [pc, #36]	; (80031cc <HAL_RCC_ClockConfig+0x1c4>)
 80031a8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80031aa:	4b09      	ldr	r3, [pc, #36]	; (80031d0 <HAL_RCC_ClockConfig+0x1c8>)
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	4618      	mov	r0, r3
 80031b0:	f7fe fcb8 	bl	8001b24 <HAL_InitTick>

  return HAL_OK;
 80031b4:	2300      	movs	r3, #0
}
 80031b6:	4618      	mov	r0, r3
 80031b8:	3710      	adds	r7, #16
 80031ba:	46bd      	mov	sp, r7
 80031bc:	bd80      	pop	{r7, pc}
 80031be:	bf00      	nop
 80031c0:	40023c00 	.word	0x40023c00
 80031c4:	40023800 	.word	0x40023800
 80031c8:	08004874 	.word	0x08004874
 80031cc:	20000004 	.word	0x20000004
 80031d0:	20000008 	.word	0x20000008

080031d4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80031d4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80031d6:	b085      	sub	sp, #20
 80031d8:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80031da:	2300      	movs	r3, #0
 80031dc:	607b      	str	r3, [r7, #4]
 80031de:	2300      	movs	r3, #0
 80031e0:	60fb      	str	r3, [r7, #12]
 80031e2:	2300      	movs	r3, #0
 80031e4:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 80031e6:	2300      	movs	r3, #0
 80031e8:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80031ea:	4b50      	ldr	r3, [pc, #320]	; (800332c <HAL_RCC_GetSysClockFreq+0x158>)
 80031ec:	689b      	ldr	r3, [r3, #8]
 80031ee:	f003 030c 	and.w	r3, r3, #12
 80031f2:	2b04      	cmp	r3, #4
 80031f4:	d007      	beq.n	8003206 <HAL_RCC_GetSysClockFreq+0x32>
 80031f6:	2b08      	cmp	r3, #8
 80031f8:	d008      	beq.n	800320c <HAL_RCC_GetSysClockFreq+0x38>
 80031fa:	2b00      	cmp	r3, #0
 80031fc:	f040 808d 	bne.w	800331a <HAL_RCC_GetSysClockFreq+0x146>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003200:	4b4b      	ldr	r3, [pc, #300]	; (8003330 <HAL_RCC_GetSysClockFreq+0x15c>)
 8003202:	60bb      	str	r3, [r7, #8]
       break;
 8003204:	e08c      	b.n	8003320 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003206:	4b4b      	ldr	r3, [pc, #300]	; (8003334 <HAL_RCC_GetSysClockFreq+0x160>)
 8003208:	60bb      	str	r3, [r7, #8]
      break;
 800320a:	e089      	b.n	8003320 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800320c:	4b47      	ldr	r3, [pc, #284]	; (800332c <HAL_RCC_GetSysClockFreq+0x158>)
 800320e:	685b      	ldr	r3, [r3, #4]
 8003210:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003214:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003216:	4b45      	ldr	r3, [pc, #276]	; (800332c <HAL_RCC_GetSysClockFreq+0x158>)
 8003218:	685b      	ldr	r3, [r3, #4]
 800321a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800321e:	2b00      	cmp	r3, #0
 8003220:	d023      	beq.n	800326a <HAL_RCC_GetSysClockFreq+0x96>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003222:	4b42      	ldr	r3, [pc, #264]	; (800332c <HAL_RCC_GetSysClockFreq+0x158>)
 8003224:	685b      	ldr	r3, [r3, #4]
 8003226:	099b      	lsrs	r3, r3, #6
 8003228:	f04f 0400 	mov.w	r4, #0
 800322c:	f240 11ff 	movw	r1, #511	; 0x1ff
 8003230:	f04f 0200 	mov.w	r2, #0
 8003234:	ea03 0501 	and.w	r5, r3, r1
 8003238:	ea04 0602 	and.w	r6, r4, r2
 800323c:	4a3d      	ldr	r2, [pc, #244]	; (8003334 <HAL_RCC_GetSysClockFreq+0x160>)
 800323e:	fb02 f106 	mul.w	r1, r2, r6
 8003242:	2200      	movs	r2, #0
 8003244:	fb02 f205 	mul.w	r2, r2, r5
 8003248:	440a      	add	r2, r1
 800324a:	493a      	ldr	r1, [pc, #232]	; (8003334 <HAL_RCC_GetSysClockFreq+0x160>)
 800324c:	fba5 0101 	umull	r0, r1, r5, r1
 8003250:	1853      	adds	r3, r2, r1
 8003252:	4619      	mov	r1, r3
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	f04f 0400 	mov.w	r4, #0
 800325a:	461a      	mov	r2, r3
 800325c:	4623      	mov	r3, r4
 800325e:	f7fc ffb3 	bl	80001c8 <__aeabi_uldivmod>
 8003262:	4603      	mov	r3, r0
 8003264:	460c      	mov	r4, r1
 8003266:	60fb      	str	r3, [r7, #12]
 8003268:	e049      	b.n	80032fe <HAL_RCC_GetSysClockFreq+0x12a>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800326a:	4b30      	ldr	r3, [pc, #192]	; (800332c <HAL_RCC_GetSysClockFreq+0x158>)
 800326c:	685b      	ldr	r3, [r3, #4]
 800326e:	099b      	lsrs	r3, r3, #6
 8003270:	f04f 0400 	mov.w	r4, #0
 8003274:	f240 11ff 	movw	r1, #511	; 0x1ff
 8003278:	f04f 0200 	mov.w	r2, #0
 800327c:	ea03 0501 	and.w	r5, r3, r1
 8003280:	ea04 0602 	and.w	r6, r4, r2
 8003284:	4629      	mov	r1, r5
 8003286:	4632      	mov	r2, r6
 8003288:	f04f 0300 	mov.w	r3, #0
 800328c:	f04f 0400 	mov.w	r4, #0
 8003290:	0154      	lsls	r4, r2, #5
 8003292:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8003296:	014b      	lsls	r3, r1, #5
 8003298:	4619      	mov	r1, r3
 800329a:	4622      	mov	r2, r4
 800329c:	1b49      	subs	r1, r1, r5
 800329e:	eb62 0206 	sbc.w	r2, r2, r6
 80032a2:	f04f 0300 	mov.w	r3, #0
 80032a6:	f04f 0400 	mov.w	r4, #0
 80032aa:	0194      	lsls	r4, r2, #6
 80032ac:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80032b0:	018b      	lsls	r3, r1, #6
 80032b2:	1a5b      	subs	r3, r3, r1
 80032b4:	eb64 0402 	sbc.w	r4, r4, r2
 80032b8:	f04f 0100 	mov.w	r1, #0
 80032bc:	f04f 0200 	mov.w	r2, #0
 80032c0:	00e2      	lsls	r2, r4, #3
 80032c2:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80032c6:	00d9      	lsls	r1, r3, #3
 80032c8:	460b      	mov	r3, r1
 80032ca:	4614      	mov	r4, r2
 80032cc:	195b      	adds	r3, r3, r5
 80032ce:	eb44 0406 	adc.w	r4, r4, r6
 80032d2:	f04f 0100 	mov.w	r1, #0
 80032d6:	f04f 0200 	mov.w	r2, #0
 80032da:	02a2      	lsls	r2, r4, #10
 80032dc:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 80032e0:	0299      	lsls	r1, r3, #10
 80032e2:	460b      	mov	r3, r1
 80032e4:	4614      	mov	r4, r2
 80032e6:	4618      	mov	r0, r3
 80032e8:	4621      	mov	r1, r4
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	f04f 0400 	mov.w	r4, #0
 80032f0:	461a      	mov	r2, r3
 80032f2:	4623      	mov	r3, r4
 80032f4:	f7fc ff68 	bl	80001c8 <__aeabi_uldivmod>
 80032f8:	4603      	mov	r3, r0
 80032fa:	460c      	mov	r4, r1
 80032fc:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80032fe:	4b0b      	ldr	r3, [pc, #44]	; (800332c <HAL_RCC_GetSysClockFreq+0x158>)
 8003300:	685b      	ldr	r3, [r3, #4]
 8003302:	0c1b      	lsrs	r3, r3, #16
 8003304:	f003 0303 	and.w	r3, r3, #3
 8003308:	3301      	adds	r3, #1
 800330a:	005b      	lsls	r3, r3, #1
 800330c:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 800330e:	68fa      	ldr	r2, [r7, #12]
 8003310:	683b      	ldr	r3, [r7, #0]
 8003312:	fbb2 f3f3 	udiv	r3, r2, r3
 8003316:	60bb      	str	r3, [r7, #8]
      break;
 8003318:	e002      	b.n	8003320 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800331a:	4b05      	ldr	r3, [pc, #20]	; (8003330 <HAL_RCC_GetSysClockFreq+0x15c>)
 800331c:	60bb      	str	r3, [r7, #8]
      break;
 800331e:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003320:	68bb      	ldr	r3, [r7, #8]
}
 8003322:	4618      	mov	r0, r3
 8003324:	3714      	adds	r7, #20
 8003326:	46bd      	mov	sp, r7
 8003328:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800332a:	bf00      	nop
 800332c:	40023800 	.word	0x40023800
 8003330:	00f42400 	.word	0x00f42400
 8003334:	017d7840 	.word	0x017d7840

08003338 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003338:	b480      	push	{r7}
 800333a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800333c:	4b03      	ldr	r3, [pc, #12]	; (800334c <HAL_RCC_GetHCLKFreq+0x14>)
 800333e:	681b      	ldr	r3, [r3, #0]
}
 8003340:	4618      	mov	r0, r3
 8003342:	46bd      	mov	sp, r7
 8003344:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003348:	4770      	bx	lr
 800334a:	bf00      	nop
 800334c:	20000004 	.word	0x20000004

08003350 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003350:	b580      	push	{r7, lr}
 8003352:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003354:	f7ff fff0 	bl	8003338 <HAL_RCC_GetHCLKFreq>
 8003358:	4601      	mov	r1, r0
 800335a:	4b05      	ldr	r3, [pc, #20]	; (8003370 <HAL_RCC_GetPCLK1Freq+0x20>)
 800335c:	689b      	ldr	r3, [r3, #8]
 800335e:	0a9b      	lsrs	r3, r3, #10
 8003360:	f003 0307 	and.w	r3, r3, #7
 8003364:	4a03      	ldr	r2, [pc, #12]	; (8003374 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003366:	5cd3      	ldrb	r3, [r2, r3]
 8003368:	fa21 f303 	lsr.w	r3, r1, r3
}
 800336c:	4618      	mov	r0, r3
 800336e:	bd80      	pop	{r7, pc}
 8003370:	40023800 	.word	0x40023800
 8003374:	08004884 	.word	0x08004884

08003378 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003378:	b580      	push	{r7, lr}
 800337a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800337c:	f7ff ffdc 	bl	8003338 <HAL_RCC_GetHCLKFreq>
 8003380:	4601      	mov	r1, r0
 8003382:	4b05      	ldr	r3, [pc, #20]	; (8003398 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003384:	689b      	ldr	r3, [r3, #8]
 8003386:	0b5b      	lsrs	r3, r3, #13
 8003388:	f003 0307 	and.w	r3, r3, #7
 800338c:	4a03      	ldr	r2, [pc, #12]	; (800339c <HAL_RCC_GetPCLK2Freq+0x24>)
 800338e:	5cd3      	ldrb	r3, [r2, r3]
 8003390:	fa21 f303 	lsr.w	r3, r1, r3
}
 8003394:	4618      	mov	r0, r3
 8003396:	bd80      	pop	{r7, pc}
 8003398:	40023800 	.word	0x40023800
 800339c:	08004884 	.word	0x08004884

080033a0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80033a0:	b580      	push	{r7, lr}
 80033a2:	b082      	sub	sp, #8
 80033a4:	af00      	add	r7, sp, #0
 80033a6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	2b00      	cmp	r3, #0
 80033ac:	d101      	bne.n	80033b2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80033ae:	2301      	movs	r3, #1
 80033b0:	e03f      	b.n	8003432 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80033b8:	b2db      	uxtb	r3, r3
 80033ba:	2b00      	cmp	r3, #0
 80033bc:	d106      	bne.n	80033cc <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	2200      	movs	r2, #0
 80033c2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80033c6:	6878      	ldr	r0, [r7, #4]
 80033c8:	f7fd fe4a 	bl	8001060 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	2224      	movs	r2, #36	; 0x24
 80033d0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	68da      	ldr	r2, [r3, #12]
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80033e2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80033e4:	6878      	ldr	r0, [r7, #4]
 80033e6:	f000 fc3d 	bl	8003c64 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	691a      	ldr	r2, [r3, #16]
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80033f8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	695a      	ldr	r2, [r3, #20]
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003408:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	68da      	ldr	r2, [r3, #12]
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003418:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	2200      	movs	r2, #0
 800341e:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	2220      	movs	r2, #32
 8003424:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	2220      	movs	r2, #32
 800342c:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8003430:	2300      	movs	r3, #0
}
 8003432:	4618      	mov	r0, r3
 8003434:	3708      	adds	r7, #8
 8003436:	46bd      	mov	sp, r7
 8003438:	bd80      	pop	{r7, pc}

0800343a <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800343a:	b580      	push	{r7, lr}
 800343c:	b088      	sub	sp, #32
 800343e:	af02      	add	r7, sp, #8
 8003440:	60f8      	str	r0, [r7, #12]
 8003442:	60b9      	str	r1, [r7, #8]
 8003444:	603b      	str	r3, [r7, #0]
 8003446:	4613      	mov	r3, r2
 8003448:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 800344a:	2300      	movs	r3, #0
 800344c:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800344e:	68fb      	ldr	r3, [r7, #12]
 8003450:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8003454:	b2db      	uxtb	r3, r3
 8003456:	2b20      	cmp	r3, #32
 8003458:	f040 8083 	bne.w	8003562 <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 800345c:	68bb      	ldr	r3, [r7, #8]
 800345e:	2b00      	cmp	r3, #0
 8003460:	d002      	beq.n	8003468 <HAL_UART_Transmit+0x2e>
 8003462:	88fb      	ldrh	r3, [r7, #6]
 8003464:	2b00      	cmp	r3, #0
 8003466:	d101      	bne.n	800346c <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 8003468:	2301      	movs	r3, #1
 800346a:	e07b      	b.n	8003564 <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800346c:	68fb      	ldr	r3, [r7, #12]
 800346e:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8003472:	2b01      	cmp	r3, #1
 8003474:	d101      	bne.n	800347a <HAL_UART_Transmit+0x40>
 8003476:	2302      	movs	r3, #2
 8003478:	e074      	b.n	8003564 <HAL_UART_Transmit+0x12a>
 800347a:	68fb      	ldr	r3, [r7, #12]
 800347c:	2201      	movs	r2, #1
 800347e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003482:	68fb      	ldr	r3, [r7, #12]
 8003484:	2200      	movs	r2, #0
 8003486:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003488:	68fb      	ldr	r3, [r7, #12]
 800348a:	2221      	movs	r2, #33	; 0x21
 800348c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8003490:	f7fe fb8c 	bl	8001bac <HAL_GetTick>
 8003494:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003496:	68fb      	ldr	r3, [r7, #12]
 8003498:	88fa      	ldrh	r2, [r7, #6]
 800349a:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800349c:	68fb      	ldr	r3, [r7, #12]
 800349e:	88fa      	ldrh	r2, [r7, #6]
 80034a0:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80034a2:	68fb      	ldr	r3, [r7, #12]
 80034a4:	2200      	movs	r2, #0
 80034a6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 80034aa:	e042      	b.n	8003532 <HAL_UART_Transmit+0xf8>
    {
      huart->TxXferCount--;
 80034ac:	68fb      	ldr	r3, [r7, #12]
 80034ae:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80034b0:	b29b      	uxth	r3, r3
 80034b2:	3b01      	subs	r3, #1
 80034b4:	b29a      	uxth	r2, r3
 80034b6:	68fb      	ldr	r3, [r7, #12]
 80034b8:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 80034ba:	68fb      	ldr	r3, [r7, #12]
 80034bc:	689b      	ldr	r3, [r3, #8]
 80034be:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80034c2:	d122      	bne.n	800350a <HAL_UART_Transmit+0xd0>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80034c4:	683b      	ldr	r3, [r7, #0]
 80034c6:	9300      	str	r3, [sp, #0]
 80034c8:	697b      	ldr	r3, [r7, #20]
 80034ca:	2200      	movs	r2, #0
 80034cc:	2180      	movs	r1, #128	; 0x80
 80034ce:	68f8      	ldr	r0, [r7, #12]
 80034d0:	f000 fa5c 	bl	800398c <UART_WaitOnFlagUntilTimeout>
 80034d4:	4603      	mov	r3, r0
 80034d6:	2b00      	cmp	r3, #0
 80034d8:	d001      	beq.n	80034de <HAL_UART_Transmit+0xa4>
        {
          return HAL_TIMEOUT;
 80034da:	2303      	movs	r3, #3
 80034dc:	e042      	b.n	8003564 <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 80034de:	68bb      	ldr	r3, [r7, #8]
 80034e0:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 80034e2:	693b      	ldr	r3, [r7, #16]
 80034e4:	881b      	ldrh	r3, [r3, #0]
 80034e6:	461a      	mov	r2, r3
 80034e8:	68fb      	ldr	r3, [r7, #12]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80034f0:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 80034f2:	68fb      	ldr	r3, [r7, #12]
 80034f4:	691b      	ldr	r3, [r3, #16]
 80034f6:	2b00      	cmp	r3, #0
 80034f8:	d103      	bne.n	8003502 <HAL_UART_Transmit+0xc8>
        {
          pData += 2U;
 80034fa:	68bb      	ldr	r3, [r7, #8]
 80034fc:	3302      	adds	r3, #2
 80034fe:	60bb      	str	r3, [r7, #8]
 8003500:	e017      	b.n	8003532 <HAL_UART_Transmit+0xf8>
        }
        else
        {
          pData += 1U;
 8003502:	68bb      	ldr	r3, [r7, #8]
 8003504:	3301      	adds	r3, #1
 8003506:	60bb      	str	r3, [r7, #8]
 8003508:	e013      	b.n	8003532 <HAL_UART_Transmit+0xf8>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800350a:	683b      	ldr	r3, [r7, #0]
 800350c:	9300      	str	r3, [sp, #0]
 800350e:	697b      	ldr	r3, [r7, #20]
 8003510:	2200      	movs	r2, #0
 8003512:	2180      	movs	r1, #128	; 0x80
 8003514:	68f8      	ldr	r0, [r7, #12]
 8003516:	f000 fa39 	bl	800398c <UART_WaitOnFlagUntilTimeout>
 800351a:	4603      	mov	r3, r0
 800351c:	2b00      	cmp	r3, #0
 800351e:	d001      	beq.n	8003524 <HAL_UART_Transmit+0xea>
        {
          return HAL_TIMEOUT;
 8003520:	2303      	movs	r3, #3
 8003522:	e01f      	b.n	8003564 <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 8003524:	68bb      	ldr	r3, [r7, #8]
 8003526:	1c5a      	adds	r2, r3, #1
 8003528:	60ba      	str	r2, [r7, #8]
 800352a:	781a      	ldrb	r2, [r3, #0]
 800352c:	68fb      	ldr	r3, [r7, #12]
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 8003532:	68fb      	ldr	r3, [r7, #12]
 8003534:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003536:	b29b      	uxth	r3, r3
 8003538:	2b00      	cmp	r3, #0
 800353a:	d1b7      	bne.n	80034ac <HAL_UART_Transmit+0x72>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800353c:	683b      	ldr	r3, [r7, #0]
 800353e:	9300      	str	r3, [sp, #0]
 8003540:	697b      	ldr	r3, [r7, #20]
 8003542:	2200      	movs	r2, #0
 8003544:	2140      	movs	r1, #64	; 0x40
 8003546:	68f8      	ldr	r0, [r7, #12]
 8003548:	f000 fa20 	bl	800398c <UART_WaitOnFlagUntilTimeout>
 800354c:	4603      	mov	r3, r0
 800354e:	2b00      	cmp	r3, #0
 8003550:	d001      	beq.n	8003556 <HAL_UART_Transmit+0x11c>
    {
      return HAL_TIMEOUT;
 8003552:	2303      	movs	r3, #3
 8003554:	e006      	b.n	8003564 <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003556:	68fb      	ldr	r3, [r7, #12]
 8003558:	2220      	movs	r2, #32
 800355a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 800355e:	2300      	movs	r3, #0
 8003560:	e000      	b.n	8003564 <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 8003562:	2302      	movs	r3, #2
  }
}
 8003564:	4618      	mov	r0, r3
 8003566:	3718      	adds	r7, #24
 8003568:	46bd      	mov	sp, r7
 800356a:	bd80      	pop	{r7, pc}

0800356c <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800356c:	b580      	push	{r7, lr}
 800356e:	b088      	sub	sp, #32
 8003570:	af02      	add	r7, sp, #8
 8003572:	60f8      	str	r0, [r7, #12]
 8003574:	60b9      	str	r1, [r7, #8]
 8003576:	603b      	str	r3, [r7, #0]
 8003578:	4613      	mov	r3, r2
 800357a:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 800357c:	2300      	movs	r3, #0
 800357e:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003580:	68fb      	ldr	r3, [r7, #12]
 8003582:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8003586:	b2db      	uxtb	r3, r3
 8003588:	2b20      	cmp	r3, #32
 800358a:	f040 8090 	bne.w	80036ae <HAL_UART_Receive+0x142>
  {
    if ((pData == NULL) || (Size == 0U))
 800358e:	68bb      	ldr	r3, [r7, #8]
 8003590:	2b00      	cmp	r3, #0
 8003592:	d002      	beq.n	800359a <HAL_UART_Receive+0x2e>
 8003594:	88fb      	ldrh	r3, [r7, #6]
 8003596:	2b00      	cmp	r3, #0
 8003598:	d101      	bne.n	800359e <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 800359a:	2301      	movs	r3, #1
 800359c:	e088      	b.n	80036b0 <HAL_UART_Receive+0x144>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800359e:	68fb      	ldr	r3, [r7, #12]
 80035a0:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80035a4:	2b01      	cmp	r3, #1
 80035a6:	d101      	bne.n	80035ac <HAL_UART_Receive+0x40>
 80035a8:	2302      	movs	r3, #2
 80035aa:	e081      	b.n	80036b0 <HAL_UART_Receive+0x144>
 80035ac:	68fb      	ldr	r3, [r7, #12]
 80035ae:	2201      	movs	r2, #1
 80035b0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80035b4:	68fb      	ldr	r3, [r7, #12]
 80035b6:	2200      	movs	r2, #0
 80035b8:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80035ba:	68fb      	ldr	r3, [r7, #12]
 80035bc:	2222      	movs	r2, #34	; 0x22
 80035be:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 80035c2:	f7fe faf3 	bl	8001bac <HAL_GetTick>
 80035c6:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 80035c8:	68fb      	ldr	r3, [r7, #12]
 80035ca:	88fa      	ldrh	r2, [r7, #6]
 80035cc:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 80035ce:	68fb      	ldr	r3, [r7, #12]
 80035d0:	88fa      	ldrh	r2, [r7, #6]
 80035d2:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80035d4:	68fb      	ldr	r3, [r7, #12]
 80035d6:	2200      	movs	r2, #0
 80035d8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 80035dc:	e05c      	b.n	8003698 <HAL_UART_Receive+0x12c>
    {
      huart->RxXferCount--;
 80035de:	68fb      	ldr	r3, [r7, #12]
 80035e0:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80035e2:	b29b      	uxth	r3, r3
 80035e4:	3b01      	subs	r3, #1
 80035e6:	b29a      	uxth	r2, r3
 80035e8:	68fb      	ldr	r3, [r7, #12]
 80035ea:	85da      	strh	r2, [r3, #46]	; 0x2e
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 80035ec:	68fb      	ldr	r3, [r7, #12]
 80035ee:	689b      	ldr	r3, [r3, #8]
 80035f0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80035f4:	d12b      	bne.n	800364e <HAL_UART_Receive+0xe2>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 80035f6:	683b      	ldr	r3, [r7, #0]
 80035f8:	9300      	str	r3, [sp, #0]
 80035fa:	697b      	ldr	r3, [r7, #20]
 80035fc:	2200      	movs	r2, #0
 80035fe:	2120      	movs	r1, #32
 8003600:	68f8      	ldr	r0, [r7, #12]
 8003602:	f000 f9c3 	bl	800398c <UART_WaitOnFlagUntilTimeout>
 8003606:	4603      	mov	r3, r0
 8003608:	2b00      	cmp	r3, #0
 800360a:	d001      	beq.n	8003610 <HAL_UART_Receive+0xa4>
        {
          return HAL_TIMEOUT;
 800360c:	2303      	movs	r3, #3
 800360e:	e04f      	b.n	80036b0 <HAL_UART_Receive+0x144>
        }
        tmp = (uint16_t *) pData;
 8003610:	68bb      	ldr	r3, [r7, #8]
 8003612:	613b      	str	r3, [r7, #16]
        if (huart->Init.Parity == UART_PARITY_NONE)
 8003614:	68fb      	ldr	r3, [r7, #12]
 8003616:	691b      	ldr	r3, [r3, #16]
 8003618:	2b00      	cmp	r3, #0
 800361a:	d10c      	bne.n	8003636 <HAL_UART_Receive+0xca>
        {
          *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800361c:	68fb      	ldr	r3, [r7, #12]
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	685b      	ldr	r3, [r3, #4]
 8003622:	b29b      	uxth	r3, r3
 8003624:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003628:	b29a      	uxth	r2, r3
 800362a:	693b      	ldr	r3, [r7, #16]
 800362c:	801a      	strh	r2, [r3, #0]
          pData += 2U;
 800362e:	68bb      	ldr	r3, [r7, #8]
 8003630:	3302      	adds	r3, #2
 8003632:	60bb      	str	r3, [r7, #8]
 8003634:	e030      	b.n	8003698 <HAL_UART_Receive+0x12c>
        }
        else
        {
          *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 8003636:	68fb      	ldr	r3, [r7, #12]
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	685b      	ldr	r3, [r3, #4]
 800363c:	b29b      	uxth	r3, r3
 800363e:	b2db      	uxtb	r3, r3
 8003640:	b29a      	uxth	r2, r3
 8003642:	693b      	ldr	r3, [r7, #16]
 8003644:	801a      	strh	r2, [r3, #0]
          pData += 1U;
 8003646:	68bb      	ldr	r3, [r7, #8]
 8003648:	3301      	adds	r3, #1
 800364a:	60bb      	str	r3, [r7, #8]
 800364c:	e024      	b.n	8003698 <HAL_UART_Receive+0x12c>
        }

      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 800364e:	683b      	ldr	r3, [r7, #0]
 8003650:	9300      	str	r3, [sp, #0]
 8003652:	697b      	ldr	r3, [r7, #20]
 8003654:	2200      	movs	r2, #0
 8003656:	2120      	movs	r1, #32
 8003658:	68f8      	ldr	r0, [r7, #12]
 800365a:	f000 f997 	bl	800398c <UART_WaitOnFlagUntilTimeout>
 800365e:	4603      	mov	r3, r0
 8003660:	2b00      	cmp	r3, #0
 8003662:	d001      	beq.n	8003668 <HAL_UART_Receive+0xfc>
        {
          return HAL_TIMEOUT;
 8003664:	2303      	movs	r3, #3
 8003666:	e023      	b.n	80036b0 <HAL_UART_Receive+0x144>
        }
        if (huart->Init.Parity == UART_PARITY_NONE)
 8003668:	68fb      	ldr	r3, [r7, #12]
 800366a:	691b      	ldr	r3, [r3, #16]
 800366c:	2b00      	cmp	r3, #0
 800366e:	d108      	bne.n	8003682 <HAL_UART_Receive+0x116>
        {
          *pData++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8003670:	68fb      	ldr	r3, [r7, #12]
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	6859      	ldr	r1, [r3, #4]
 8003676:	68bb      	ldr	r3, [r7, #8]
 8003678:	1c5a      	adds	r2, r3, #1
 800367a:	60ba      	str	r2, [r7, #8]
 800367c:	b2ca      	uxtb	r2, r1
 800367e:	701a      	strb	r2, [r3, #0]
 8003680:	e00a      	b.n	8003698 <HAL_UART_Receive+0x12c>
        }
        else
        {
          *pData++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8003682:	68fb      	ldr	r3, [r7, #12]
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	685b      	ldr	r3, [r3, #4]
 8003688:	b2da      	uxtb	r2, r3
 800368a:	68bb      	ldr	r3, [r7, #8]
 800368c:	1c59      	adds	r1, r3, #1
 800368e:	60b9      	str	r1, [r7, #8]
 8003690:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8003694:	b2d2      	uxtb	r2, r2
 8003696:	701a      	strb	r2, [r3, #0]
    while (huart->RxXferCount > 0U)
 8003698:	68fb      	ldr	r3, [r7, #12]
 800369a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800369c:	b29b      	uxth	r3, r3
 800369e:	2b00      	cmp	r3, #0
 80036a0:	d19d      	bne.n	80035de <HAL_UART_Receive+0x72>

      }
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80036a2:	68fb      	ldr	r3, [r7, #12]
 80036a4:	2220      	movs	r2, #32
 80036a6:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    return HAL_OK;
 80036aa:	2300      	movs	r3, #0
 80036ac:	e000      	b.n	80036b0 <HAL_UART_Receive+0x144>
  }
  else
  {
    return HAL_BUSY;
 80036ae:	2302      	movs	r3, #2
  }
}
 80036b0:	4618      	mov	r0, r3
 80036b2:	3718      	adds	r7, #24
 80036b4:	46bd      	mov	sp, r7
 80036b6:	bd80      	pop	{r7, pc}

080036b8 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80036b8:	b480      	push	{r7}
 80036ba:	b085      	sub	sp, #20
 80036bc:	af00      	add	r7, sp, #0
 80036be:	60f8      	str	r0, [r7, #12]
 80036c0:	60b9      	str	r1, [r7, #8]
 80036c2:	4613      	mov	r3, r2
 80036c4:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80036c6:	68fb      	ldr	r3, [r7, #12]
 80036c8:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 80036cc:	b2db      	uxtb	r3, r3
 80036ce:	2b20      	cmp	r3, #32
 80036d0:	d140      	bne.n	8003754 <HAL_UART_Receive_IT+0x9c>
  {
    if ((pData == NULL) || (Size == 0U))
 80036d2:	68bb      	ldr	r3, [r7, #8]
 80036d4:	2b00      	cmp	r3, #0
 80036d6:	d002      	beq.n	80036de <HAL_UART_Receive_IT+0x26>
 80036d8:	88fb      	ldrh	r3, [r7, #6]
 80036da:	2b00      	cmp	r3, #0
 80036dc:	d101      	bne.n	80036e2 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 80036de:	2301      	movs	r3, #1
 80036e0:	e039      	b.n	8003756 <HAL_UART_Receive_IT+0x9e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80036e2:	68fb      	ldr	r3, [r7, #12]
 80036e4:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80036e8:	2b01      	cmp	r3, #1
 80036ea:	d101      	bne.n	80036f0 <HAL_UART_Receive_IT+0x38>
 80036ec:	2302      	movs	r3, #2
 80036ee:	e032      	b.n	8003756 <HAL_UART_Receive_IT+0x9e>
 80036f0:	68fb      	ldr	r3, [r7, #12]
 80036f2:	2201      	movs	r2, #1
 80036f4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pRxBuffPtr = pData;
 80036f8:	68fb      	ldr	r3, [r7, #12]
 80036fa:	68ba      	ldr	r2, [r7, #8]
 80036fc:	629a      	str	r2, [r3, #40]	; 0x28
    huart->RxXferSize = Size;
 80036fe:	68fb      	ldr	r3, [r7, #12]
 8003700:	88fa      	ldrh	r2, [r7, #6]
 8003702:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 8003704:	68fb      	ldr	r3, [r7, #12]
 8003706:	88fa      	ldrh	r2, [r7, #6]
 8003708:	85da      	strh	r2, [r3, #46]	; 0x2e

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800370a:	68fb      	ldr	r3, [r7, #12]
 800370c:	2200      	movs	r2, #0
 800370e:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003710:	68fb      	ldr	r3, [r7, #12]
 8003712:	2222      	movs	r2, #34	; 0x22
 8003714:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003718:	68fb      	ldr	r3, [r7, #12]
 800371a:	2200      	movs	r2, #0
 800371c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8003720:	68fb      	ldr	r3, [r7, #12]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	68da      	ldr	r2, [r3, #12]
 8003726:	68fb      	ldr	r3, [r7, #12]
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800372e:	60da      	str	r2, [r3, #12]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8003730:	68fb      	ldr	r3, [r7, #12]
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	695a      	ldr	r2, [r3, #20]
 8003736:	68fb      	ldr	r3, [r7, #12]
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	f042 0201 	orr.w	r2, r2, #1
 800373e:	615a      	str	r2, [r3, #20]

    /* Enable the UART Data Register not empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8003740:	68fb      	ldr	r3, [r7, #12]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	68da      	ldr	r2, [r3, #12]
 8003746:	68fb      	ldr	r3, [r7, #12]
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	f042 0220 	orr.w	r2, r2, #32
 800374e:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 8003750:	2300      	movs	r3, #0
 8003752:	e000      	b.n	8003756 <HAL_UART_Receive_IT+0x9e>
  }
  else
  {
    return HAL_BUSY;
 8003754:	2302      	movs	r3, #2
  }
}
 8003756:	4618      	mov	r0, r3
 8003758:	3714      	adds	r7, #20
 800375a:	46bd      	mov	sp, r7
 800375c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003760:	4770      	bx	lr
	...

08003764 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003764:	b580      	push	{r7, lr}
 8003766:	b088      	sub	sp, #32
 8003768:	af00      	add	r7, sp, #0
 800376a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	68db      	ldr	r3, [r3, #12]
 800377a:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	695b      	ldr	r3, [r3, #20]
 8003782:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 8003784:	2300      	movs	r3, #0
 8003786:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 8003788:	2300      	movs	r3, #0
 800378a:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800378c:	69fb      	ldr	r3, [r7, #28]
 800378e:	f003 030f 	and.w	r3, r3, #15
 8003792:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 8003794:	693b      	ldr	r3, [r7, #16]
 8003796:	2b00      	cmp	r3, #0
 8003798:	d10d      	bne.n	80037b6 <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800379a:	69fb      	ldr	r3, [r7, #28]
 800379c:	f003 0320 	and.w	r3, r3, #32
 80037a0:	2b00      	cmp	r3, #0
 80037a2:	d008      	beq.n	80037b6 <HAL_UART_IRQHandler+0x52>
 80037a4:	69bb      	ldr	r3, [r7, #24]
 80037a6:	f003 0320 	and.w	r3, r3, #32
 80037aa:	2b00      	cmp	r3, #0
 80037ac:	d003      	beq.n	80037b6 <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 80037ae:	6878      	ldr	r0, [r7, #4]
 80037b0:	f000 f9d6 	bl	8003b60 <UART_Receive_IT>
      return;
 80037b4:	e0d1      	b.n	800395a <HAL_UART_IRQHandler+0x1f6>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80037b6:	693b      	ldr	r3, [r7, #16]
 80037b8:	2b00      	cmp	r3, #0
 80037ba:	f000 80b0 	beq.w	800391e <HAL_UART_IRQHandler+0x1ba>
 80037be:	697b      	ldr	r3, [r7, #20]
 80037c0:	f003 0301 	and.w	r3, r3, #1
 80037c4:	2b00      	cmp	r3, #0
 80037c6:	d105      	bne.n	80037d4 <HAL_UART_IRQHandler+0x70>
 80037c8:	69bb      	ldr	r3, [r7, #24]
 80037ca:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80037ce:	2b00      	cmp	r3, #0
 80037d0:	f000 80a5 	beq.w	800391e <HAL_UART_IRQHandler+0x1ba>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80037d4:	69fb      	ldr	r3, [r7, #28]
 80037d6:	f003 0301 	and.w	r3, r3, #1
 80037da:	2b00      	cmp	r3, #0
 80037dc:	d00a      	beq.n	80037f4 <HAL_UART_IRQHandler+0x90>
 80037de:	69bb      	ldr	r3, [r7, #24]
 80037e0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80037e4:	2b00      	cmp	r3, #0
 80037e6:	d005      	beq.n	80037f4 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80037ec:	f043 0201 	orr.w	r2, r3, #1
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80037f4:	69fb      	ldr	r3, [r7, #28]
 80037f6:	f003 0304 	and.w	r3, r3, #4
 80037fa:	2b00      	cmp	r3, #0
 80037fc:	d00a      	beq.n	8003814 <HAL_UART_IRQHandler+0xb0>
 80037fe:	697b      	ldr	r3, [r7, #20]
 8003800:	f003 0301 	and.w	r3, r3, #1
 8003804:	2b00      	cmp	r3, #0
 8003806:	d005      	beq.n	8003814 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800380c:	f043 0202 	orr.w	r2, r3, #2
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003814:	69fb      	ldr	r3, [r7, #28]
 8003816:	f003 0302 	and.w	r3, r3, #2
 800381a:	2b00      	cmp	r3, #0
 800381c:	d00a      	beq.n	8003834 <HAL_UART_IRQHandler+0xd0>
 800381e:	697b      	ldr	r3, [r7, #20]
 8003820:	f003 0301 	and.w	r3, r3, #1
 8003824:	2b00      	cmp	r3, #0
 8003826:	d005      	beq.n	8003834 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800382c:	f043 0204 	orr.w	r2, r3, #4
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8003834:	69fb      	ldr	r3, [r7, #28]
 8003836:	f003 0308 	and.w	r3, r3, #8
 800383a:	2b00      	cmp	r3, #0
 800383c:	d00f      	beq.n	800385e <HAL_UART_IRQHandler+0xfa>
 800383e:	69bb      	ldr	r3, [r7, #24]
 8003840:	f003 0320 	and.w	r3, r3, #32
 8003844:	2b00      	cmp	r3, #0
 8003846:	d104      	bne.n	8003852 <HAL_UART_IRQHandler+0xee>
 8003848:	697b      	ldr	r3, [r7, #20]
 800384a:	f003 0301 	and.w	r3, r3, #1
 800384e:	2b00      	cmp	r3, #0
 8003850:	d005      	beq.n	800385e <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003856:	f043 0208 	orr.w	r2, r3, #8
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003862:	2b00      	cmp	r3, #0
 8003864:	d078      	beq.n	8003958 <HAL_UART_IRQHandler+0x1f4>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003866:	69fb      	ldr	r3, [r7, #28]
 8003868:	f003 0320 	and.w	r3, r3, #32
 800386c:	2b00      	cmp	r3, #0
 800386e:	d007      	beq.n	8003880 <HAL_UART_IRQHandler+0x11c>
 8003870:	69bb      	ldr	r3, [r7, #24]
 8003872:	f003 0320 	and.w	r3, r3, #32
 8003876:	2b00      	cmp	r3, #0
 8003878:	d002      	beq.n	8003880 <HAL_UART_IRQHandler+0x11c>
      {
        UART_Receive_IT(huart);
 800387a:	6878      	ldr	r0, [r7, #4]
 800387c:	f000 f970 	bl	8003b60 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	695b      	ldr	r3, [r3, #20]
 8003886:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800388a:	2b40      	cmp	r3, #64	; 0x40
 800388c:	bf0c      	ite	eq
 800388e:	2301      	moveq	r3, #1
 8003890:	2300      	movne	r3, #0
 8003892:	b2db      	uxtb	r3, r3
 8003894:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800389a:	f003 0308 	and.w	r3, r3, #8
 800389e:	2b00      	cmp	r3, #0
 80038a0:	d102      	bne.n	80038a8 <HAL_UART_IRQHandler+0x144>
 80038a2:	68fb      	ldr	r3, [r7, #12]
 80038a4:	2b00      	cmp	r3, #0
 80038a6:	d031      	beq.n	800390c <HAL_UART_IRQHandler+0x1a8>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80038a8:	6878      	ldr	r0, [r7, #4]
 80038aa:	f000 f8b9 	bl	8003a20 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	695b      	ldr	r3, [r3, #20]
 80038b4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80038b8:	2b40      	cmp	r3, #64	; 0x40
 80038ba:	d123      	bne.n	8003904 <HAL_UART_IRQHandler+0x1a0>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	695a      	ldr	r2, [r3, #20]
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80038ca:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80038d0:	2b00      	cmp	r3, #0
 80038d2:	d013      	beq.n	80038fc <HAL_UART_IRQHandler+0x198>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80038d8:	4a21      	ldr	r2, [pc, #132]	; (8003960 <HAL_UART_IRQHandler+0x1fc>)
 80038da:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80038e0:	4618      	mov	r0, r3
 80038e2:	f7fe faa2 	bl	8001e2a <HAL_DMA_Abort_IT>
 80038e6:	4603      	mov	r3, r0
 80038e8:	2b00      	cmp	r3, #0
 80038ea:	d016      	beq.n	800391a <HAL_UART_IRQHandler+0x1b6>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80038f0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80038f2:	687a      	ldr	r2, [r7, #4]
 80038f4:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80038f6:	4610      	mov	r0, r2
 80038f8:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80038fa:	e00e      	b.n	800391a <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80038fc:	6878      	ldr	r0, [r7, #4]
 80038fe:	f000 f83b 	bl	8003978 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003902:	e00a      	b.n	800391a <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003904:	6878      	ldr	r0, [r7, #4]
 8003906:	f000 f837 	bl	8003978 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800390a:	e006      	b.n	800391a <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800390c:	6878      	ldr	r0, [r7, #4]
 800390e:	f000 f833 	bl	8003978 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	2200      	movs	r2, #0
 8003916:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 8003918:	e01e      	b.n	8003958 <HAL_UART_IRQHandler+0x1f4>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800391a:	bf00      	nop
    return;
 800391c:	e01c      	b.n	8003958 <HAL_UART_IRQHandler+0x1f4>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800391e:	69fb      	ldr	r3, [r7, #28]
 8003920:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003924:	2b00      	cmp	r3, #0
 8003926:	d008      	beq.n	800393a <HAL_UART_IRQHandler+0x1d6>
 8003928:	69bb      	ldr	r3, [r7, #24]
 800392a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800392e:	2b00      	cmp	r3, #0
 8003930:	d003      	beq.n	800393a <HAL_UART_IRQHandler+0x1d6>
  {
    UART_Transmit_IT(huart);
 8003932:	6878      	ldr	r0, [r7, #4]
 8003934:	f000 f8a6 	bl	8003a84 <UART_Transmit_IT>
    return;
 8003938:	e00f      	b.n	800395a <HAL_UART_IRQHandler+0x1f6>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800393a:	69fb      	ldr	r3, [r7, #28]
 800393c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003940:	2b00      	cmp	r3, #0
 8003942:	d00a      	beq.n	800395a <HAL_UART_IRQHandler+0x1f6>
 8003944:	69bb      	ldr	r3, [r7, #24]
 8003946:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800394a:	2b00      	cmp	r3, #0
 800394c:	d005      	beq.n	800395a <HAL_UART_IRQHandler+0x1f6>
  {
    UART_EndTransmit_IT(huart);
 800394e:	6878      	ldr	r0, [r7, #4]
 8003950:	f000 f8ee 	bl	8003b30 <UART_EndTransmit_IT>
    return;
 8003954:	bf00      	nop
 8003956:	e000      	b.n	800395a <HAL_UART_IRQHandler+0x1f6>
    return;
 8003958:	bf00      	nop
  }
}
 800395a:	3720      	adds	r7, #32
 800395c:	46bd      	mov	sp, r7
 800395e:	bd80      	pop	{r7, pc}
 8003960:	08003a5d 	.word	0x08003a5d

08003964 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003964:	b480      	push	{r7}
 8003966:	b083      	sub	sp, #12
 8003968:	af00      	add	r7, sp, #0
 800396a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800396c:	bf00      	nop
 800396e:	370c      	adds	r7, #12
 8003970:	46bd      	mov	sp, r7
 8003972:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003976:	4770      	bx	lr

08003978 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003978:	b480      	push	{r7}
 800397a:	b083      	sub	sp, #12
 800397c:	af00      	add	r7, sp, #0
 800397e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8003980:	bf00      	nop
 8003982:	370c      	adds	r7, #12
 8003984:	46bd      	mov	sp, r7
 8003986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800398a:	4770      	bx	lr

0800398c <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 800398c:	b580      	push	{r7, lr}
 800398e:	b084      	sub	sp, #16
 8003990:	af00      	add	r7, sp, #0
 8003992:	60f8      	str	r0, [r7, #12]
 8003994:	60b9      	str	r1, [r7, #8]
 8003996:	603b      	str	r3, [r7, #0]
 8003998:	4613      	mov	r3, r2
 800399a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800399c:	e02c      	b.n	80039f8 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800399e:	69bb      	ldr	r3, [r7, #24]
 80039a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80039a4:	d028      	beq.n	80039f8 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80039a6:	69bb      	ldr	r3, [r7, #24]
 80039a8:	2b00      	cmp	r3, #0
 80039aa:	d007      	beq.n	80039bc <UART_WaitOnFlagUntilTimeout+0x30>
 80039ac:	f7fe f8fe 	bl	8001bac <HAL_GetTick>
 80039b0:	4602      	mov	r2, r0
 80039b2:	683b      	ldr	r3, [r7, #0]
 80039b4:	1ad3      	subs	r3, r2, r3
 80039b6:	69ba      	ldr	r2, [r7, #24]
 80039b8:	429a      	cmp	r2, r3
 80039ba:	d21d      	bcs.n	80039f8 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80039bc:	68fb      	ldr	r3, [r7, #12]
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	68da      	ldr	r2, [r3, #12]
 80039c2:	68fb      	ldr	r3, [r7, #12]
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80039ca:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80039cc:	68fb      	ldr	r3, [r7, #12]
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	695a      	ldr	r2, [r3, #20]
 80039d2:	68fb      	ldr	r3, [r7, #12]
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	f022 0201 	bic.w	r2, r2, #1
 80039da:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 80039dc:	68fb      	ldr	r3, [r7, #12]
 80039de:	2220      	movs	r2, #32
 80039e0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 80039e4:	68fb      	ldr	r3, [r7, #12]
 80039e6:	2220      	movs	r2, #32
 80039e8:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80039ec:	68fb      	ldr	r3, [r7, #12]
 80039ee:	2200      	movs	r2, #0
 80039f0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 80039f4:	2303      	movs	r3, #3
 80039f6:	e00f      	b.n	8003a18 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80039f8:	68fb      	ldr	r3, [r7, #12]
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	681a      	ldr	r2, [r3, #0]
 80039fe:	68bb      	ldr	r3, [r7, #8]
 8003a00:	4013      	ands	r3, r2
 8003a02:	68ba      	ldr	r2, [r7, #8]
 8003a04:	429a      	cmp	r2, r3
 8003a06:	bf0c      	ite	eq
 8003a08:	2301      	moveq	r3, #1
 8003a0a:	2300      	movne	r3, #0
 8003a0c:	b2db      	uxtb	r3, r3
 8003a0e:	461a      	mov	r2, r3
 8003a10:	79fb      	ldrb	r3, [r7, #7]
 8003a12:	429a      	cmp	r2, r3
 8003a14:	d0c3      	beq.n	800399e <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003a16:	2300      	movs	r3, #0
}
 8003a18:	4618      	mov	r0, r3
 8003a1a:	3710      	adds	r7, #16
 8003a1c:	46bd      	mov	sp, r7
 8003a1e:	bd80      	pop	{r7, pc}

08003a20 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003a20:	b480      	push	{r7}
 8003a22:	b083      	sub	sp, #12
 8003a24:	af00      	add	r7, sp, #0
 8003a26:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	68da      	ldr	r2, [r3, #12]
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8003a36:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	695a      	ldr	r2, [r3, #20]
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	f022 0201 	bic.w	r2, r2, #1
 8003a46:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	2220      	movs	r2, #32
 8003a4c:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 8003a50:	bf00      	nop
 8003a52:	370c      	adds	r7, #12
 8003a54:	46bd      	mov	sp, r7
 8003a56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a5a:	4770      	bx	lr

08003a5c <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003a5c:	b580      	push	{r7, lr}
 8003a5e:	b084      	sub	sp, #16
 8003a60:	af00      	add	r7, sp, #0
 8003a62:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a68:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8003a6a:	68fb      	ldr	r3, [r7, #12]
 8003a6c:	2200      	movs	r2, #0
 8003a6e:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8003a70:	68fb      	ldr	r3, [r7, #12]
 8003a72:	2200      	movs	r2, #0
 8003a74:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003a76:	68f8      	ldr	r0, [r7, #12]
 8003a78:	f7ff ff7e 	bl	8003978 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003a7c:	bf00      	nop
 8003a7e:	3710      	adds	r7, #16
 8003a80:	46bd      	mov	sp, r7
 8003a82:	bd80      	pop	{r7, pc}

08003a84 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8003a84:	b480      	push	{r7}
 8003a86:	b085      	sub	sp, #20
 8003a88:	af00      	add	r7, sp, #0
 8003a8a:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8003a92:	b2db      	uxtb	r3, r3
 8003a94:	2b21      	cmp	r3, #33	; 0x21
 8003a96:	d144      	bne.n	8003b22 <UART_Transmit_IT+0x9e>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	689b      	ldr	r3, [r3, #8]
 8003a9c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003aa0:	d11a      	bne.n	8003ad8 <UART_Transmit_IT+0x54>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	6a1b      	ldr	r3, [r3, #32]
 8003aa6:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8003aa8:	68fb      	ldr	r3, [r7, #12]
 8003aaa:	881b      	ldrh	r3, [r3, #0]
 8003aac:	461a      	mov	r2, r3
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003ab6:	605a      	str	r2, [r3, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	691b      	ldr	r3, [r3, #16]
 8003abc:	2b00      	cmp	r3, #0
 8003abe:	d105      	bne.n	8003acc <UART_Transmit_IT+0x48>
      {
        huart->pTxBuffPtr += 2U;
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	6a1b      	ldr	r3, [r3, #32]
 8003ac4:	1c9a      	adds	r2, r3, #2
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	621a      	str	r2, [r3, #32]
 8003aca:	e00e      	b.n	8003aea <UART_Transmit_IT+0x66>
      }
      else
      {
        huart->pTxBuffPtr += 1U;
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	6a1b      	ldr	r3, [r3, #32]
 8003ad0:	1c5a      	adds	r2, r3, #1
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	621a      	str	r2, [r3, #32]
 8003ad6:	e008      	b.n	8003aea <UART_Transmit_IT+0x66>
      }
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	6a1b      	ldr	r3, [r3, #32]
 8003adc:	1c59      	adds	r1, r3, #1
 8003ade:	687a      	ldr	r2, [r7, #4]
 8003ae0:	6211      	str	r1, [r2, #32]
 8003ae2:	781a      	ldrb	r2, [r3, #0]
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003aee:	b29b      	uxth	r3, r3
 8003af0:	3b01      	subs	r3, #1
 8003af2:	b29b      	uxth	r3, r3
 8003af4:	687a      	ldr	r2, [r7, #4]
 8003af6:	4619      	mov	r1, r3
 8003af8:	84d1      	strh	r1, [r2, #38]	; 0x26
 8003afa:	2b00      	cmp	r3, #0
 8003afc:	d10f      	bne.n	8003b1e <UART_Transmit_IT+0x9a>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	68da      	ldr	r2, [r3, #12]
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003b0c:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	68da      	ldr	r2, [r3, #12]
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003b1c:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8003b1e:	2300      	movs	r3, #0
 8003b20:	e000      	b.n	8003b24 <UART_Transmit_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 8003b22:	2302      	movs	r3, #2
  }
}
 8003b24:	4618      	mov	r0, r3
 8003b26:	3714      	adds	r7, #20
 8003b28:	46bd      	mov	sp, r7
 8003b2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b2e:	4770      	bx	lr

08003b30 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003b30:	b580      	push	{r7, lr}
 8003b32:	b082      	sub	sp, #8
 8003b34:	af00      	add	r7, sp, #0
 8003b36:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	68da      	ldr	r2, [r3, #12]
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003b46:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	2220      	movs	r2, #32
 8003b4c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003b50:	6878      	ldr	r0, [r7, #4]
 8003b52:	f7ff ff07 	bl	8003964 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8003b56:	2300      	movs	r3, #0
}
 8003b58:	4618      	mov	r0, r3
 8003b5a:	3708      	adds	r7, #8
 8003b5c:	46bd      	mov	sp, r7
 8003b5e:	bd80      	pop	{r7, pc}

08003b60 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8003b60:	b580      	push	{r7, lr}
 8003b62:	b084      	sub	sp, #16
 8003b64:	af00      	add	r7, sp, #0
 8003b66:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8003b6e:	b2db      	uxtb	r3, r3
 8003b70:	2b22      	cmp	r3, #34	; 0x22
 8003b72:	d171      	bne.n	8003c58 <UART_Receive_IT+0xf8>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	689b      	ldr	r3, [r3, #8]
 8003b78:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003b7c:	d123      	bne.n	8003bc6 <UART_Receive_IT+0x66>
    {
      tmp = (uint16_t *) huart->pRxBuffPtr;
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b82:	60fb      	str	r3, [r7, #12]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	691b      	ldr	r3, [r3, #16]
 8003b88:	2b00      	cmp	r3, #0
 8003b8a:	d10e      	bne.n	8003baa <UART_Receive_IT+0x4a>
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	685b      	ldr	r3, [r3, #4]
 8003b92:	b29b      	uxth	r3, r3
 8003b94:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003b98:	b29a      	uxth	r2, r3
 8003b9a:	68fb      	ldr	r3, [r7, #12]
 8003b9c:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 2U;
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ba2:	1c9a      	adds	r2, r3, #2
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	629a      	str	r2, [r3, #40]	; 0x28
 8003ba8:	e029      	b.n	8003bfe <UART_Receive_IT+0x9e>
      }
      else
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	685b      	ldr	r3, [r3, #4]
 8003bb0:	b29b      	uxth	r3, r3
 8003bb2:	b2db      	uxtb	r3, r3
 8003bb4:	b29a      	uxth	r2, r3
 8003bb6:	68fb      	ldr	r3, [r7, #12]
 8003bb8:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 1U;
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003bbe:	1c5a      	adds	r2, r3, #1
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	629a      	str	r2, [r3, #40]	; 0x28
 8003bc4:	e01b      	b.n	8003bfe <UART_Receive_IT+0x9e>
      }
    }
    else
    {
      if (huart->Init.Parity == UART_PARITY_NONE)
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	691b      	ldr	r3, [r3, #16]
 8003bca:	2b00      	cmp	r3, #0
 8003bcc:	d10a      	bne.n	8003be4 <UART_Receive_IT+0x84>
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	6858      	ldr	r0, [r3, #4]
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003bd8:	1c59      	adds	r1, r3, #1
 8003bda:	687a      	ldr	r2, [r7, #4]
 8003bdc:	6291      	str	r1, [r2, #40]	; 0x28
 8003bde:	b2c2      	uxtb	r2, r0
 8003be0:	701a      	strb	r2, [r3, #0]
 8003be2:	e00c      	b.n	8003bfe <UART_Receive_IT+0x9e>
      }
      else
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	685b      	ldr	r3, [r3, #4]
 8003bea:	b2da      	uxtb	r2, r3
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003bf0:	1c58      	adds	r0, r3, #1
 8003bf2:	6879      	ldr	r1, [r7, #4]
 8003bf4:	6288      	str	r0, [r1, #40]	; 0x28
 8003bf6:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8003bfa:	b2d2      	uxtb	r2, r2
 8003bfc:	701a      	strb	r2, [r3, #0]
      }
    }

    if (--huart->RxXferCount == 0U)
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003c02:	b29b      	uxth	r3, r3
 8003c04:	3b01      	subs	r3, #1
 8003c06:	b29b      	uxth	r3, r3
 8003c08:	687a      	ldr	r2, [r7, #4]
 8003c0a:	4619      	mov	r1, r3
 8003c0c:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8003c0e:	2b00      	cmp	r3, #0
 8003c10:	d120      	bne.n	8003c54 <UART_Receive_IT+0xf4>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	68da      	ldr	r2, [r3, #12]
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	f022 0220 	bic.w	r2, r2, #32
 8003c20:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	68da      	ldr	r2, [r3, #12]
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003c30:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	695a      	ldr	r2, [r3, #20]
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	f022 0201 	bic.w	r2, r2, #1
 8003c40:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	2220      	movs	r2, #32
 8003c46:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 8003c4a:	6878      	ldr	r0, [r7, #4]
 8003c4c:	f7fd f858 	bl	8000d00 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 8003c50:	2300      	movs	r3, #0
 8003c52:	e002      	b.n	8003c5a <UART_Receive_IT+0xfa>
    }
    return HAL_OK;
 8003c54:	2300      	movs	r3, #0
 8003c56:	e000      	b.n	8003c5a <UART_Receive_IT+0xfa>
  }
  else
  {
    return HAL_BUSY;
 8003c58:	2302      	movs	r3, #2
  }
}
 8003c5a:	4618      	mov	r0, r3
 8003c5c:	3710      	adds	r7, #16
 8003c5e:	46bd      	mov	sp, r7
 8003c60:	bd80      	pop	{r7, pc}
	...

08003c64 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003c64:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003c68:	b085      	sub	sp, #20
 8003c6a:	af00      	add	r7, sp, #0
 8003c6c:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	691b      	ldr	r3, [r3, #16]
 8003c74:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	68da      	ldr	r2, [r3, #12]
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	430a      	orrs	r2, r1
 8003c82:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	689a      	ldr	r2, [r3, #8]
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	691b      	ldr	r3, [r3, #16]
 8003c8c:	431a      	orrs	r2, r3
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	695b      	ldr	r3, [r3, #20]
 8003c92:	431a      	orrs	r2, r3
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	69db      	ldr	r3, [r3, #28]
 8003c98:	4313      	orrs	r3, r2
 8003c9a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	68db      	ldr	r3, [r3, #12]
 8003ca2:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8003ca6:	f023 030c 	bic.w	r3, r3, #12
 8003caa:	687a      	ldr	r2, [r7, #4]
 8003cac:	6812      	ldr	r2, [r2, #0]
 8003cae:	68f9      	ldr	r1, [r7, #12]
 8003cb0:	430b      	orrs	r3, r1
 8003cb2:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	695b      	ldr	r3, [r3, #20]
 8003cba:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	699a      	ldr	r2, [r3, #24]
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	430a      	orrs	r2, r1
 8003cc8:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	69db      	ldr	r3, [r3, #28]
 8003cce:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003cd2:	f040 818b 	bne.w	8003fec <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	4ac1      	ldr	r2, [pc, #772]	; (8003fe0 <UART_SetConfig+0x37c>)
 8003cdc:	4293      	cmp	r3, r2
 8003cde:	d005      	beq.n	8003cec <UART_SetConfig+0x88>
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	4abf      	ldr	r2, [pc, #764]	; (8003fe4 <UART_SetConfig+0x380>)
 8003ce6:	4293      	cmp	r3, r2
 8003ce8:	f040 80bd 	bne.w	8003e66 <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003cec:	f7ff fb44 	bl	8003378 <HAL_RCC_GetPCLK2Freq>
 8003cf0:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003cf2:	68bb      	ldr	r3, [r7, #8]
 8003cf4:	461d      	mov	r5, r3
 8003cf6:	f04f 0600 	mov.w	r6, #0
 8003cfa:	46a8      	mov	r8, r5
 8003cfc:	46b1      	mov	r9, r6
 8003cfe:	eb18 0308 	adds.w	r3, r8, r8
 8003d02:	eb49 0409 	adc.w	r4, r9, r9
 8003d06:	4698      	mov	r8, r3
 8003d08:	46a1      	mov	r9, r4
 8003d0a:	eb18 0805 	adds.w	r8, r8, r5
 8003d0e:	eb49 0906 	adc.w	r9, r9, r6
 8003d12:	f04f 0100 	mov.w	r1, #0
 8003d16:	f04f 0200 	mov.w	r2, #0
 8003d1a:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8003d1e:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8003d22:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8003d26:	4688      	mov	r8, r1
 8003d28:	4691      	mov	r9, r2
 8003d2a:	eb18 0005 	adds.w	r0, r8, r5
 8003d2e:	eb49 0106 	adc.w	r1, r9, r6
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	685b      	ldr	r3, [r3, #4]
 8003d36:	461d      	mov	r5, r3
 8003d38:	f04f 0600 	mov.w	r6, #0
 8003d3c:	196b      	adds	r3, r5, r5
 8003d3e:	eb46 0406 	adc.w	r4, r6, r6
 8003d42:	461a      	mov	r2, r3
 8003d44:	4623      	mov	r3, r4
 8003d46:	f7fc fa3f 	bl	80001c8 <__aeabi_uldivmod>
 8003d4a:	4603      	mov	r3, r0
 8003d4c:	460c      	mov	r4, r1
 8003d4e:	461a      	mov	r2, r3
 8003d50:	4ba5      	ldr	r3, [pc, #660]	; (8003fe8 <UART_SetConfig+0x384>)
 8003d52:	fba3 2302 	umull	r2, r3, r3, r2
 8003d56:	095b      	lsrs	r3, r3, #5
 8003d58:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8003d5c:	68bb      	ldr	r3, [r7, #8]
 8003d5e:	461d      	mov	r5, r3
 8003d60:	f04f 0600 	mov.w	r6, #0
 8003d64:	46a9      	mov	r9, r5
 8003d66:	46b2      	mov	sl, r6
 8003d68:	eb19 0309 	adds.w	r3, r9, r9
 8003d6c:	eb4a 040a 	adc.w	r4, sl, sl
 8003d70:	4699      	mov	r9, r3
 8003d72:	46a2      	mov	sl, r4
 8003d74:	eb19 0905 	adds.w	r9, r9, r5
 8003d78:	eb4a 0a06 	adc.w	sl, sl, r6
 8003d7c:	f04f 0100 	mov.w	r1, #0
 8003d80:	f04f 0200 	mov.w	r2, #0
 8003d84:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003d88:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8003d8c:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8003d90:	4689      	mov	r9, r1
 8003d92:	4692      	mov	sl, r2
 8003d94:	eb19 0005 	adds.w	r0, r9, r5
 8003d98:	eb4a 0106 	adc.w	r1, sl, r6
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	685b      	ldr	r3, [r3, #4]
 8003da0:	461d      	mov	r5, r3
 8003da2:	f04f 0600 	mov.w	r6, #0
 8003da6:	196b      	adds	r3, r5, r5
 8003da8:	eb46 0406 	adc.w	r4, r6, r6
 8003dac:	461a      	mov	r2, r3
 8003dae:	4623      	mov	r3, r4
 8003db0:	f7fc fa0a 	bl	80001c8 <__aeabi_uldivmod>
 8003db4:	4603      	mov	r3, r0
 8003db6:	460c      	mov	r4, r1
 8003db8:	461a      	mov	r2, r3
 8003dba:	4b8b      	ldr	r3, [pc, #556]	; (8003fe8 <UART_SetConfig+0x384>)
 8003dbc:	fba3 1302 	umull	r1, r3, r3, r2
 8003dc0:	095b      	lsrs	r3, r3, #5
 8003dc2:	2164      	movs	r1, #100	; 0x64
 8003dc4:	fb01 f303 	mul.w	r3, r1, r3
 8003dc8:	1ad3      	subs	r3, r2, r3
 8003dca:	00db      	lsls	r3, r3, #3
 8003dcc:	3332      	adds	r3, #50	; 0x32
 8003dce:	4a86      	ldr	r2, [pc, #536]	; (8003fe8 <UART_SetConfig+0x384>)
 8003dd0:	fba2 2303 	umull	r2, r3, r2, r3
 8003dd4:	095b      	lsrs	r3, r3, #5
 8003dd6:	005b      	lsls	r3, r3, #1
 8003dd8:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003ddc:	4498      	add	r8, r3
 8003dde:	68bb      	ldr	r3, [r7, #8]
 8003de0:	461d      	mov	r5, r3
 8003de2:	f04f 0600 	mov.w	r6, #0
 8003de6:	46a9      	mov	r9, r5
 8003de8:	46b2      	mov	sl, r6
 8003dea:	eb19 0309 	adds.w	r3, r9, r9
 8003dee:	eb4a 040a 	adc.w	r4, sl, sl
 8003df2:	4699      	mov	r9, r3
 8003df4:	46a2      	mov	sl, r4
 8003df6:	eb19 0905 	adds.w	r9, r9, r5
 8003dfa:	eb4a 0a06 	adc.w	sl, sl, r6
 8003dfe:	f04f 0100 	mov.w	r1, #0
 8003e02:	f04f 0200 	mov.w	r2, #0
 8003e06:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003e0a:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8003e0e:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8003e12:	4689      	mov	r9, r1
 8003e14:	4692      	mov	sl, r2
 8003e16:	eb19 0005 	adds.w	r0, r9, r5
 8003e1a:	eb4a 0106 	adc.w	r1, sl, r6
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	685b      	ldr	r3, [r3, #4]
 8003e22:	461d      	mov	r5, r3
 8003e24:	f04f 0600 	mov.w	r6, #0
 8003e28:	196b      	adds	r3, r5, r5
 8003e2a:	eb46 0406 	adc.w	r4, r6, r6
 8003e2e:	461a      	mov	r2, r3
 8003e30:	4623      	mov	r3, r4
 8003e32:	f7fc f9c9 	bl	80001c8 <__aeabi_uldivmod>
 8003e36:	4603      	mov	r3, r0
 8003e38:	460c      	mov	r4, r1
 8003e3a:	461a      	mov	r2, r3
 8003e3c:	4b6a      	ldr	r3, [pc, #424]	; (8003fe8 <UART_SetConfig+0x384>)
 8003e3e:	fba3 1302 	umull	r1, r3, r3, r2
 8003e42:	095b      	lsrs	r3, r3, #5
 8003e44:	2164      	movs	r1, #100	; 0x64
 8003e46:	fb01 f303 	mul.w	r3, r1, r3
 8003e4a:	1ad3      	subs	r3, r2, r3
 8003e4c:	00db      	lsls	r3, r3, #3
 8003e4e:	3332      	adds	r3, #50	; 0x32
 8003e50:	4a65      	ldr	r2, [pc, #404]	; (8003fe8 <UART_SetConfig+0x384>)
 8003e52:	fba2 2303 	umull	r2, r3, r2, r3
 8003e56:	095b      	lsrs	r3, r3, #5
 8003e58:	f003 0207 	and.w	r2, r3, #7
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	4442      	add	r2, r8
 8003e62:	609a      	str	r2, [r3, #8]
 8003e64:	e26f      	b.n	8004346 <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8003e66:	f7ff fa73 	bl	8003350 <HAL_RCC_GetPCLK1Freq>
 8003e6a:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003e6c:	68bb      	ldr	r3, [r7, #8]
 8003e6e:	461d      	mov	r5, r3
 8003e70:	f04f 0600 	mov.w	r6, #0
 8003e74:	46a8      	mov	r8, r5
 8003e76:	46b1      	mov	r9, r6
 8003e78:	eb18 0308 	adds.w	r3, r8, r8
 8003e7c:	eb49 0409 	adc.w	r4, r9, r9
 8003e80:	4698      	mov	r8, r3
 8003e82:	46a1      	mov	r9, r4
 8003e84:	eb18 0805 	adds.w	r8, r8, r5
 8003e88:	eb49 0906 	adc.w	r9, r9, r6
 8003e8c:	f04f 0100 	mov.w	r1, #0
 8003e90:	f04f 0200 	mov.w	r2, #0
 8003e94:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8003e98:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8003e9c:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8003ea0:	4688      	mov	r8, r1
 8003ea2:	4691      	mov	r9, r2
 8003ea4:	eb18 0005 	adds.w	r0, r8, r5
 8003ea8:	eb49 0106 	adc.w	r1, r9, r6
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	685b      	ldr	r3, [r3, #4]
 8003eb0:	461d      	mov	r5, r3
 8003eb2:	f04f 0600 	mov.w	r6, #0
 8003eb6:	196b      	adds	r3, r5, r5
 8003eb8:	eb46 0406 	adc.w	r4, r6, r6
 8003ebc:	461a      	mov	r2, r3
 8003ebe:	4623      	mov	r3, r4
 8003ec0:	f7fc f982 	bl	80001c8 <__aeabi_uldivmod>
 8003ec4:	4603      	mov	r3, r0
 8003ec6:	460c      	mov	r4, r1
 8003ec8:	461a      	mov	r2, r3
 8003eca:	4b47      	ldr	r3, [pc, #284]	; (8003fe8 <UART_SetConfig+0x384>)
 8003ecc:	fba3 2302 	umull	r2, r3, r3, r2
 8003ed0:	095b      	lsrs	r3, r3, #5
 8003ed2:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8003ed6:	68bb      	ldr	r3, [r7, #8]
 8003ed8:	461d      	mov	r5, r3
 8003eda:	f04f 0600 	mov.w	r6, #0
 8003ede:	46a9      	mov	r9, r5
 8003ee0:	46b2      	mov	sl, r6
 8003ee2:	eb19 0309 	adds.w	r3, r9, r9
 8003ee6:	eb4a 040a 	adc.w	r4, sl, sl
 8003eea:	4699      	mov	r9, r3
 8003eec:	46a2      	mov	sl, r4
 8003eee:	eb19 0905 	adds.w	r9, r9, r5
 8003ef2:	eb4a 0a06 	adc.w	sl, sl, r6
 8003ef6:	f04f 0100 	mov.w	r1, #0
 8003efa:	f04f 0200 	mov.w	r2, #0
 8003efe:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003f02:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8003f06:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8003f0a:	4689      	mov	r9, r1
 8003f0c:	4692      	mov	sl, r2
 8003f0e:	eb19 0005 	adds.w	r0, r9, r5
 8003f12:	eb4a 0106 	adc.w	r1, sl, r6
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	685b      	ldr	r3, [r3, #4]
 8003f1a:	461d      	mov	r5, r3
 8003f1c:	f04f 0600 	mov.w	r6, #0
 8003f20:	196b      	adds	r3, r5, r5
 8003f22:	eb46 0406 	adc.w	r4, r6, r6
 8003f26:	461a      	mov	r2, r3
 8003f28:	4623      	mov	r3, r4
 8003f2a:	f7fc f94d 	bl	80001c8 <__aeabi_uldivmod>
 8003f2e:	4603      	mov	r3, r0
 8003f30:	460c      	mov	r4, r1
 8003f32:	461a      	mov	r2, r3
 8003f34:	4b2c      	ldr	r3, [pc, #176]	; (8003fe8 <UART_SetConfig+0x384>)
 8003f36:	fba3 1302 	umull	r1, r3, r3, r2
 8003f3a:	095b      	lsrs	r3, r3, #5
 8003f3c:	2164      	movs	r1, #100	; 0x64
 8003f3e:	fb01 f303 	mul.w	r3, r1, r3
 8003f42:	1ad3      	subs	r3, r2, r3
 8003f44:	00db      	lsls	r3, r3, #3
 8003f46:	3332      	adds	r3, #50	; 0x32
 8003f48:	4a27      	ldr	r2, [pc, #156]	; (8003fe8 <UART_SetConfig+0x384>)
 8003f4a:	fba2 2303 	umull	r2, r3, r2, r3
 8003f4e:	095b      	lsrs	r3, r3, #5
 8003f50:	005b      	lsls	r3, r3, #1
 8003f52:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003f56:	4498      	add	r8, r3
 8003f58:	68bb      	ldr	r3, [r7, #8]
 8003f5a:	461d      	mov	r5, r3
 8003f5c:	f04f 0600 	mov.w	r6, #0
 8003f60:	46a9      	mov	r9, r5
 8003f62:	46b2      	mov	sl, r6
 8003f64:	eb19 0309 	adds.w	r3, r9, r9
 8003f68:	eb4a 040a 	adc.w	r4, sl, sl
 8003f6c:	4699      	mov	r9, r3
 8003f6e:	46a2      	mov	sl, r4
 8003f70:	eb19 0905 	adds.w	r9, r9, r5
 8003f74:	eb4a 0a06 	adc.w	sl, sl, r6
 8003f78:	f04f 0100 	mov.w	r1, #0
 8003f7c:	f04f 0200 	mov.w	r2, #0
 8003f80:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003f84:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8003f88:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8003f8c:	4689      	mov	r9, r1
 8003f8e:	4692      	mov	sl, r2
 8003f90:	eb19 0005 	adds.w	r0, r9, r5
 8003f94:	eb4a 0106 	adc.w	r1, sl, r6
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	685b      	ldr	r3, [r3, #4]
 8003f9c:	461d      	mov	r5, r3
 8003f9e:	f04f 0600 	mov.w	r6, #0
 8003fa2:	196b      	adds	r3, r5, r5
 8003fa4:	eb46 0406 	adc.w	r4, r6, r6
 8003fa8:	461a      	mov	r2, r3
 8003faa:	4623      	mov	r3, r4
 8003fac:	f7fc f90c 	bl	80001c8 <__aeabi_uldivmod>
 8003fb0:	4603      	mov	r3, r0
 8003fb2:	460c      	mov	r4, r1
 8003fb4:	461a      	mov	r2, r3
 8003fb6:	4b0c      	ldr	r3, [pc, #48]	; (8003fe8 <UART_SetConfig+0x384>)
 8003fb8:	fba3 1302 	umull	r1, r3, r3, r2
 8003fbc:	095b      	lsrs	r3, r3, #5
 8003fbe:	2164      	movs	r1, #100	; 0x64
 8003fc0:	fb01 f303 	mul.w	r3, r1, r3
 8003fc4:	1ad3      	subs	r3, r2, r3
 8003fc6:	00db      	lsls	r3, r3, #3
 8003fc8:	3332      	adds	r3, #50	; 0x32
 8003fca:	4a07      	ldr	r2, [pc, #28]	; (8003fe8 <UART_SetConfig+0x384>)
 8003fcc:	fba2 2303 	umull	r2, r3, r2, r3
 8003fd0:	095b      	lsrs	r3, r3, #5
 8003fd2:	f003 0207 	and.w	r2, r3, #7
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	4442      	add	r2, r8
 8003fdc:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 8003fde:	e1b2      	b.n	8004346 <UART_SetConfig+0x6e2>
 8003fe0:	40011000 	.word	0x40011000
 8003fe4:	40011400 	.word	0x40011400
 8003fe8:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	4ad7      	ldr	r2, [pc, #860]	; (8004350 <UART_SetConfig+0x6ec>)
 8003ff2:	4293      	cmp	r3, r2
 8003ff4:	d005      	beq.n	8004002 <UART_SetConfig+0x39e>
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	4ad6      	ldr	r2, [pc, #856]	; (8004354 <UART_SetConfig+0x6f0>)
 8003ffc:	4293      	cmp	r3, r2
 8003ffe:	f040 80d1 	bne.w	80041a4 <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 8004002:	f7ff f9b9 	bl	8003378 <HAL_RCC_GetPCLK2Freq>
 8004006:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004008:	68bb      	ldr	r3, [r7, #8]
 800400a:	469a      	mov	sl, r3
 800400c:	f04f 0b00 	mov.w	fp, #0
 8004010:	46d0      	mov	r8, sl
 8004012:	46d9      	mov	r9, fp
 8004014:	eb18 0308 	adds.w	r3, r8, r8
 8004018:	eb49 0409 	adc.w	r4, r9, r9
 800401c:	4698      	mov	r8, r3
 800401e:	46a1      	mov	r9, r4
 8004020:	eb18 080a 	adds.w	r8, r8, sl
 8004024:	eb49 090b 	adc.w	r9, r9, fp
 8004028:	f04f 0100 	mov.w	r1, #0
 800402c:	f04f 0200 	mov.w	r2, #0
 8004030:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8004034:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8004038:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800403c:	4688      	mov	r8, r1
 800403e:	4691      	mov	r9, r2
 8004040:	eb1a 0508 	adds.w	r5, sl, r8
 8004044:	eb4b 0609 	adc.w	r6, fp, r9
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	685b      	ldr	r3, [r3, #4]
 800404c:	4619      	mov	r1, r3
 800404e:	f04f 0200 	mov.w	r2, #0
 8004052:	f04f 0300 	mov.w	r3, #0
 8004056:	f04f 0400 	mov.w	r4, #0
 800405a:	0094      	lsls	r4, r2, #2
 800405c:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8004060:	008b      	lsls	r3, r1, #2
 8004062:	461a      	mov	r2, r3
 8004064:	4623      	mov	r3, r4
 8004066:	4628      	mov	r0, r5
 8004068:	4631      	mov	r1, r6
 800406a:	f7fc f8ad 	bl	80001c8 <__aeabi_uldivmod>
 800406e:	4603      	mov	r3, r0
 8004070:	460c      	mov	r4, r1
 8004072:	461a      	mov	r2, r3
 8004074:	4bb8      	ldr	r3, [pc, #736]	; (8004358 <UART_SetConfig+0x6f4>)
 8004076:	fba3 2302 	umull	r2, r3, r3, r2
 800407a:	095b      	lsrs	r3, r3, #5
 800407c:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8004080:	68bb      	ldr	r3, [r7, #8]
 8004082:	469b      	mov	fp, r3
 8004084:	f04f 0c00 	mov.w	ip, #0
 8004088:	46d9      	mov	r9, fp
 800408a:	46e2      	mov	sl, ip
 800408c:	eb19 0309 	adds.w	r3, r9, r9
 8004090:	eb4a 040a 	adc.w	r4, sl, sl
 8004094:	4699      	mov	r9, r3
 8004096:	46a2      	mov	sl, r4
 8004098:	eb19 090b 	adds.w	r9, r9, fp
 800409c:	eb4a 0a0c 	adc.w	sl, sl, ip
 80040a0:	f04f 0100 	mov.w	r1, #0
 80040a4:	f04f 0200 	mov.w	r2, #0
 80040a8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80040ac:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80040b0:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80040b4:	4689      	mov	r9, r1
 80040b6:	4692      	mov	sl, r2
 80040b8:	eb1b 0509 	adds.w	r5, fp, r9
 80040bc:	eb4c 060a 	adc.w	r6, ip, sl
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	685b      	ldr	r3, [r3, #4]
 80040c4:	4619      	mov	r1, r3
 80040c6:	f04f 0200 	mov.w	r2, #0
 80040ca:	f04f 0300 	mov.w	r3, #0
 80040ce:	f04f 0400 	mov.w	r4, #0
 80040d2:	0094      	lsls	r4, r2, #2
 80040d4:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80040d8:	008b      	lsls	r3, r1, #2
 80040da:	461a      	mov	r2, r3
 80040dc:	4623      	mov	r3, r4
 80040de:	4628      	mov	r0, r5
 80040e0:	4631      	mov	r1, r6
 80040e2:	f7fc f871 	bl	80001c8 <__aeabi_uldivmod>
 80040e6:	4603      	mov	r3, r0
 80040e8:	460c      	mov	r4, r1
 80040ea:	461a      	mov	r2, r3
 80040ec:	4b9a      	ldr	r3, [pc, #616]	; (8004358 <UART_SetConfig+0x6f4>)
 80040ee:	fba3 1302 	umull	r1, r3, r3, r2
 80040f2:	095b      	lsrs	r3, r3, #5
 80040f4:	2164      	movs	r1, #100	; 0x64
 80040f6:	fb01 f303 	mul.w	r3, r1, r3
 80040fa:	1ad3      	subs	r3, r2, r3
 80040fc:	011b      	lsls	r3, r3, #4
 80040fe:	3332      	adds	r3, #50	; 0x32
 8004100:	4a95      	ldr	r2, [pc, #596]	; (8004358 <UART_SetConfig+0x6f4>)
 8004102:	fba2 2303 	umull	r2, r3, r2, r3
 8004106:	095b      	lsrs	r3, r3, #5
 8004108:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800410c:	4498      	add	r8, r3
 800410e:	68bb      	ldr	r3, [r7, #8]
 8004110:	469b      	mov	fp, r3
 8004112:	f04f 0c00 	mov.w	ip, #0
 8004116:	46d9      	mov	r9, fp
 8004118:	46e2      	mov	sl, ip
 800411a:	eb19 0309 	adds.w	r3, r9, r9
 800411e:	eb4a 040a 	adc.w	r4, sl, sl
 8004122:	4699      	mov	r9, r3
 8004124:	46a2      	mov	sl, r4
 8004126:	eb19 090b 	adds.w	r9, r9, fp
 800412a:	eb4a 0a0c 	adc.w	sl, sl, ip
 800412e:	f04f 0100 	mov.w	r1, #0
 8004132:	f04f 0200 	mov.w	r2, #0
 8004136:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800413a:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800413e:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8004142:	4689      	mov	r9, r1
 8004144:	4692      	mov	sl, r2
 8004146:	eb1b 0509 	adds.w	r5, fp, r9
 800414a:	eb4c 060a 	adc.w	r6, ip, sl
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	685b      	ldr	r3, [r3, #4]
 8004152:	4619      	mov	r1, r3
 8004154:	f04f 0200 	mov.w	r2, #0
 8004158:	f04f 0300 	mov.w	r3, #0
 800415c:	f04f 0400 	mov.w	r4, #0
 8004160:	0094      	lsls	r4, r2, #2
 8004162:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8004166:	008b      	lsls	r3, r1, #2
 8004168:	461a      	mov	r2, r3
 800416a:	4623      	mov	r3, r4
 800416c:	4628      	mov	r0, r5
 800416e:	4631      	mov	r1, r6
 8004170:	f7fc f82a 	bl	80001c8 <__aeabi_uldivmod>
 8004174:	4603      	mov	r3, r0
 8004176:	460c      	mov	r4, r1
 8004178:	461a      	mov	r2, r3
 800417a:	4b77      	ldr	r3, [pc, #476]	; (8004358 <UART_SetConfig+0x6f4>)
 800417c:	fba3 1302 	umull	r1, r3, r3, r2
 8004180:	095b      	lsrs	r3, r3, #5
 8004182:	2164      	movs	r1, #100	; 0x64
 8004184:	fb01 f303 	mul.w	r3, r1, r3
 8004188:	1ad3      	subs	r3, r2, r3
 800418a:	011b      	lsls	r3, r3, #4
 800418c:	3332      	adds	r3, #50	; 0x32
 800418e:	4a72      	ldr	r2, [pc, #456]	; (8004358 <UART_SetConfig+0x6f4>)
 8004190:	fba2 2303 	umull	r2, r3, r2, r3
 8004194:	095b      	lsrs	r3, r3, #5
 8004196:	f003 020f 	and.w	r2, r3, #15
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	4442      	add	r2, r8
 80041a0:	609a      	str	r2, [r3, #8]
 80041a2:	e0d0      	b.n	8004346 <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 80041a4:	f7ff f8d4 	bl	8003350 <HAL_RCC_GetPCLK1Freq>
 80041a8:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80041aa:	68bb      	ldr	r3, [r7, #8]
 80041ac:	469a      	mov	sl, r3
 80041ae:	f04f 0b00 	mov.w	fp, #0
 80041b2:	46d0      	mov	r8, sl
 80041b4:	46d9      	mov	r9, fp
 80041b6:	eb18 0308 	adds.w	r3, r8, r8
 80041ba:	eb49 0409 	adc.w	r4, r9, r9
 80041be:	4698      	mov	r8, r3
 80041c0:	46a1      	mov	r9, r4
 80041c2:	eb18 080a 	adds.w	r8, r8, sl
 80041c6:	eb49 090b 	adc.w	r9, r9, fp
 80041ca:	f04f 0100 	mov.w	r1, #0
 80041ce:	f04f 0200 	mov.w	r2, #0
 80041d2:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 80041d6:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 80041da:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 80041de:	4688      	mov	r8, r1
 80041e0:	4691      	mov	r9, r2
 80041e2:	eb1a 0508 	adds.w	r5, sl, r8
 80041e6:	eb4b 0609 	adc.w	r6, fp, r9
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	685b      	ldr	r3, [r3, #4]
 80041ee:	4619      	mov	r1, r3
 80041f0:	f04f 0200 	mov.w	r2, #0
 80041f4:	f04f 0300 	mov.w	r3, #0
 80041f8:	f04f 0400 	mov.w	r4, #0
 80041fc:	0094      	lsls	r4, r2, #2
 80041fe:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8004202:	008b      	lsls	r3, r1, #2
 8004204:	461a      	mov	r2, r3
 8004206:	4623      	mov	r3, r4
 8004208:	4628      	mov	r0, r5
 800420a:	4631      	mov	r1, r6
 800420c:	f7fb ffdc 	bl	80001c8 <__aeabi_uldivmod>
 8004210:	4603      	mov	r3, r0
 8004212:	460c      	mov	r4, r1
 8004214:	461a      	mov	r2, r3
 8004216:	4b50      	ldr	r3, [pc, #320]	; (8004358 <UART_SetConfig+0x6f4>)
 8004218:	fba3 2302 	umull	r2, r3, r3, r2
 800421c:	095b      	lsrs	r3, r3, #5
 800421e:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8004222:	68bb      	ldr	r3, [r7, #8]
 8004224:	469b      	mov	fp, r3
 8004226:	f04f 0c00 	mov.w	ip, #0
 800422a:	46d9      	mov	r9, fp
 800422c:	46e2      	mov	sl, ip
 800422e:	eb19 0309 	adds.w	r3, r9, r9
 8004232:	eb4a 040a 	adc.w	r4, sl, sl
 8004236:	4699      	mov	r9, r3
 8004238:	46a2      	mov	sl, r4
 800423a:	eb19 090b 	adds.w	r9, r9, fp
 800423e:	eb4a 0a0c 	adc.w	sl, sl, ip
 8004242:	f04f 0100 	mov.w	r1, #0
 8004246:	f04f 0200 	mov.w	r2, #0
 800424a:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800424e:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8004252:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8004256:	4689      	mov	r9, r1
 8004258:	4692      	mov	sl, r2
 800425a:	eb1b 0509 	adds.w	r5, fp, r9
 800425e:	eb4c 060a 	adc.w	r6, ip, sl
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	685b      	ldr	r3, [r3, #4]
 8004266:	4619      	mov	r1, r3
 8004268:	f04f 0200 	mov.w	r2, #0
 800426c:	f04f 0300 	mov.w	r3, #0
 8004270:	f04f 0400 	mov.w	r4, #0
 8004274:	0094      	lsls	r4, r2, #2
 8004276:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800427a:	008b      	lsls	r3, r1, #2
 800427c:	461a      	mov	r2, r3
 800427e:	4623      	mov	r3, r4
 8004280:	4628      	mov	r0, r5
 8004282:	4631      	mov	r1, r6
 8004284:	f7fb ffa0 	bl	80001c8 <__aeabi_uldivmod>
 8004288:	4603      	mov	r3, r0
 800428a:	460c      	mov	r4, r1
 800428c:	461a      	mov	r2, r3
 800428e:	4b32      	ldr	r3, [pc, #200]	; (8004358 <UART_SetConfig+0x6f4>)
 8004290:	fba3 1302 	umull	r1, r3, r3, r2
 8004294:	095b      	lsrs	r3, r3, #5
 8004296:	2164      	movs	r1, #100	; 0x64
 8004298:	fb01 f303 	mul.w	r3, r1, r3
 800429c:	1ad3      	subs	r3, r2, r3
 800429e:	011b      	lsls	r3, r3, #4
 80042a0:	3332      	adds	r3, #50	; 0x32
 80042a2:	4a2d      	ldr	r2, [pc, #180]	; (8004358 <UART_SetConfig+0x6f4>)
 80042a4:	fba2 2303 	umull	r2, r3, r2, r3
 80042a8:	095b      	lsrs	r3, r3, #5
 80042aa:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80042ae:	4498      	add	r8, r3
 80042b0:	68bb      	ldr	r3, [r7, #8]
 80042b2:	469b      	mov	fp, r3
 80042b4:	f04f 0c00 	mov.w	ip, #0
 80042b8:	46d9      	mov	r9, fp
 80042ba:	46e2      	mov	sl, ip
 80042bc:	eb19 0309 	adds.w	r3, r9, r9
 80042c0:	eb4a 040a 	adc.w	r4, sl, sl
 80042c4:	4699      	mov	r9, r3
 80042c6:	46a2      	mov	sl, r4
 80042c8:	eb19 090b 	adds.w	r9, r9, fp
 80042cc:	eb4a 0a0c 	adc.w	sl, sl, ip
 80042d0:	f04f 0100 	mov.w	r1, #0
 80042d4:	f04f 0200 	mov.w	r2, #0
 80042d8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80042dc:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80042e0:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80042e4:	4689      	mov	r9, r1
 80042e6:	4692      	mov	sl, r2
 80042e8:	eb1b 0509 	adds.w	r5, fp, r9
 80042ec:	eb4c 060a 	adc.w	r6, ip, sl
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	685b      	ldr	r3, [r3, #4]
 80042f4:	4619      	mov	r1, r3
 80042f6:	f04f 0200 	mov.w	r2, #0
 80042fa:	f04f 0300 	mov.w	r3, #0
 80042fe:	f04f 0400 	mov.w	r4, #0
 8004302:	0094      	lsls	r4, r2, #2
 8004304:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8004308:	008b      	lsls	r3, r1, #2
 800430a:	461a      	mov	r2, r3
 800430c:	4623      	mov	r3, r4
 800430e:	4628      	mov	r0, r5
 8004310:	4631      	mov	r1, r6
 8004312:	f7fb ff59 	bl	80001c8 <__aeabi_uldivmod>
 8004316:	4603      	mov	r3, r0
 8004318:	460c      	mov	r4, r1
 800431a:	461a      	mov	r2, r3
 800431c:	4b0e      	ldr	r3, [pc, #56]	; (8004358 <UART_SetConfig+0x6f4>)
 800431e:	fba3 1302 	umull	r1, r3, r3, r2
 8004322:	095b      	lsrs	r3, r3, #5
 8004324:	2164      	movs	r1, #100	; 0x64
 8004326:	fb01 f303 	mul.w	r3, r1, r3
 800432a:	1ad3      	subs	r3, r2, r3
 800432c:	011b      	lsls	r3, r3, #4
 800432e:	3332      	adds	r3, #50	; 0x32
 8004330:	4a09      	ldr	r2, [pc, #36]	; (8004358 <UART_SetConfig+0x6f4>)
 8004332:	fba2 2303 	umull	r2, r3, r2, r3
 8004336:	095b      	lsrs	r3, r3, #5
 8004338:	f003 020f 	and.w	r2, r3, #15
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	4442      	add	r2, r8
 8004342:	609a      	str	r2, [r3, #8]
}
 8004344:	e7ff      	b.n	8004346 <UART_SetConfig+0x6e2>
 8004346:	bf00      	nop
 8004348:	3714      	adds	r7, #20
 800434a:	46bd      	mov	sp, r7
 800434c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004350:	40011000 	.word	0x40011000
 8004354:	40011400 	.word	0x40011400
 8004358:	51eb851f 	.word	0x51eb851f

0800435c <__libc_init_array>:
 800435c:	b570      	push	{r4, r5, r6, lr}
 800435e:	4e0d      	ldr	r6, [pc, #52]	; (8004394 <__libc_init_array+0x38>)
 8004360:	4c0d      	ldr	r4, [pc, #52]	; (8004398 <__libc_init_array+0x3c>)
 8004362:	1ba4      	subs	r4, r4, r6
 8004364:	10a4      	asrs	r4, r4, #2
 8004366:	2500      	movs	r5, #0
 8004368:	42a5      	cmp	r5, r4
 800436a:	d109      	bne.n	8004380 <__libc_init_array+0x24>
 800436c:	4e0b      	ldr	r6, [pc, #44]	; (800439c <__libc_init_array+0x40>)
 800436e:	4c0c      	ldr	r4, [pc, #48]	; (80043a0 <__libc_init_array+0x44>)
 8004370:	f000 f820 	bl	80043b4 <_init>
 8004374:	1ba4      	subs	r4, r4, r6
 8004376:	10a4      	asrs	r4, r4, #2
 8004378:	2500      	movs	r5, #0
 800437a:	42a5      	cmp	r5, r4
 800437c:	d105      	bne.n	800438a <__libc_init_array+0x2e>
 800437e:	bd70      	pop	{r4, r5, r6, pc}
 8004380:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8004384:	4798      	blx	r3
 8004386:	3501      	adds	r5, #1
 8004388:	e7ee      	b.n	8004368 <__libc_init_array+0xc>
 800438a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800438e:	4798      	blx	r3
 8004390:	3501      	adds	r5, #1
 8004392:	e7f2      	b.n	800437a <__libc_init_array+0x1e>
 8004394:	08004894 	.word	0x08004894
 8004398:	08004894 	.word	0x08004894
 800439c:	08004894 	.word	0x08004894
 80043a0:	08004898 	.word	0x08004898

080043a4 <memset>:
 80043a4:	4402      	add	r2, r0
 80043a6:	4603      	mov	r3, r0
 80043a8:	4293      	cmp	r3, r2
 80043aa:	d100      	bne.n	80043ae <memset+0xa>
 80043ac:	4770      	bx	lr
 80043ae:	f803 1b01 	strb.w	r1, [r3], #1
 80043b2:	e7f9      	b.n	80043a8 <memset+0x4>

080043b4 <_init>:
 80043b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80043b6:	bf00      	nop
 80043b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80043ba:	bc08      	pop	{r3}
 80043bc:	469e      	mov	lr, r3
 80043be:	4770      	bx	lr

080043c0 <_fini>:
 80043c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80043c2:	bf00      	nop
 80043c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80043c6:	bc08      	pop	{r3}
 80043c8:	469e      	mov	lr, r3
 80043ca:	4770      	bx	lr
