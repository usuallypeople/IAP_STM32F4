
IAP_interupt_v2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003a58  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000224  08003be0  08003be0  00013be0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003e04  08003e04  00020010  2**0
                  CONTENTS
  4 .ARM          00000008  08003e04  08003e04  00013e04  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003e0c  08003e0c  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003e0c  08003e0c  00013e0c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003e10  08003e10  00013e10  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  08003e14  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000004e0  20000010  08003e24  00020010  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200004f0  08003e24  000204f0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000a193  00000000  00000000  00020040  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001fed  00000000  00000000  0002a1d3  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000008e0  00000000  00000000  0002c1c0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000007d8  00000000  00000000  0002caa0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00020302  00000000  00000000  0002d278  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00008b74  00000000  00000000  0004d57a  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000c1ab0  00000000  00000000  000560ee  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00117b9e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002200  00000000  00000000  00117c1c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000010 	.word	0x20000010
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08003bc8 	.word	0x08003bc8

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000014 	.word	0x20000014
 80001c4:	08003bc8 	.word	0x08003bc8

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b972 	b.w	80004c4 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9e08      	ldr	r6, [sp, #32]
 80001fe:	4604      	mov	r4, r0
 8000200:	4688      	mov	r8, r1
 8000202:	2b00      	cmp	r3, #0
 8000204:	d14b      	bne.n	800029e <__udivmoddi4+0xa6>
 8000206:	428a      	cmp	r2, r1
 8000208:	4615      	mov	r5, r2
 800020a:	d967      	bls.n	80002dc <__udivmoddi4+0xe4>
 800020c:	fab2 f282 	clz	r2, r2
 8000210:	b14a      	cbz	r2, 8000226 <__udivmoddi4+0x2e>
 8000212:	f1c2 0720 	rsb	r7, r2, #32
 8000216:	fa01 f302 	lsl.w	r3, r1, r2
 800021a:	fa20 f707 	lsr.w	r7, r0, r7
 800021e:	4095      	lsls	r5, r2
 8000220:	ea47 0803 	orr.w	r8, r7, r3
 8000224:	4094      	lsls	r4, r2
 8000226:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800022a:	0c23      	lsrs	r3, r4, #16
 800022c:	fbb8 f7fe 	udiv	r7, r8, lr
 8000230:	fa1f fc85 	uxth.w	ip, r5
 8000234:	fb0e 8817 	mls	r8, lr, r7, r8
 8000238:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800023c:	fb07 f10c 	mul.w	r1, r7, ip
 8000240:	4299      	cmp	r1, r3
 8000242:	d909      	bls.n	8000258 <__udivmoddi4+0x60>
 8000244:	18eb      	adds	r3, r5, r3
 8000246:	f107 30ff 	add.w	r0, r7, #4294967295
 800024a:	f080 811b 	bcs.w	8000484 <__udivmoddi4+0x28c>
 800024e:	4299      	cmp	r1, r3
 8000250:	f240 8118 	bls.w	8000484 <__udivmoddi4+0x28c>
 8000254:	3f02      	subs	r7, #2
 8000256:	442b      	add	r3, r5
 8000258:	1a5b      	subs	r3, r3, r1
 800025a:	b2a4      	uxth	r4, r4
 800025c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000260:	fb0e 3310 	mls	r3, lr, r0, r3
 8000264:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000268:	fb00 fc0c 	mul.w	ip, r0, ip
 800026c:	45a4      	cmp	ip, r4
 800026e:	d909      	bls.n	8000284 <__udivmoddi4+0x8c>
 8000270:	192c      	adds	r4, r5, r4
 8000272:	f100 33ff 	add.w	r3, r0, #4294967295
 8000276:	f080 8107 	bcs.w	8000488 <__udivmoddi4+0x290>
 800027a:	45a4      	cmp	ip, r4
 800027c:	f240 8104 	bls.w	8000488 <__udivmoddi4+0x290>
 8000280:	3802      	subs	r0, #2
 8000282:	442c      	add	r4, r5
 8000284:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000288:	eba4 040c 	sub.w	r4, r4, ip
 800028c:	2700      	movs	r7, #0
 800028e:	b11e      	cbz	r6, 8000298 <__udivmoddi4+0xa0>
 8000290:	40d4      	lsrs	r4, r2
 8000292:	2300      	movs	r3, #0
 8000294:	e9c6 4300 	strd	r4, r3, [r6]
 8000298:	4639      	mov	r1, r7
 800029a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800029e:	428b      	cmp	r3, r1
 80002a0:	d909      	bls.n	80002b6 <__udivmoddi4+0xbe>
 80002a2:	2e00      	cmp	r6, #0
 80002a4:	f000 80eb 	beq.w	800047e <__udivmoddi4+0x286>
 80002a8:	2700      	movs	r7, #0
 80002aa:	e9c6 0100 	strd	r0, r1, [r6]
 80002ae:	4638      	mov	r0, r7
 80002b0:	4639      	mov	r1, r7
 80002b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b6:	fab3 f783 	clz	r7, r3
 80002ba:	2f00      	cmp	r7, #0
 80002bc:	d147      	bne.n	800034e <__udivmoddi4+0x156>
 80002be:	428b      	cmp	r3, r1
 80002c0:	d302      	bcc.n	80002c8 <__udivmoddi4+0xd0>
 80002c2:	4282      	cmp	r2, r0
 80002c4:	f200 80fa 	bhi.w	80004bc <__udivmoddi4+0x2c4>
 80002c8:	1a84      	subs	r4, r0, r2
 80002ca:	eb61 0303 	sbc.w	r3, r1, r3
 80002ce:	2001      	movs	r0, #1
 80002d0:	4698      	mov	r8, r3
 80002d2:	2e00      	cmp	r6, #0
 80002d4:	d0e0      	beq.n	8000298 <__udivmoddi4+0xa0>
 80002d6:	e9c6 4800 	strd	r4, r8, [r6]
 80002da:	e7dd      	b.n	8000298 <__udivmoddi4+0xa0>
 80002dc:	b902      	cbnz	r2, 80002e0 <__udivmoddi4+0xe8>
 80002de:	deff      	udf	#255	; 0xff
 80002e0:	fab2 f282 	clz	r2, r2
 80002e4:	2a00      	cmp	r2, #0
 80002e6:	f040 808f 	bne.w	8000408 <__udivmoddi4+0x210>
 80002ea:	1b49      	subs	r1, r1, r5
 80002ec:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80002f0:	fa1f f885 	uxth.w	r8, r5
 80002f4:	2701      	movs	r7, #1
 80002f6:	fbb1 fcfe 	udiv	ip, r1, lr
 80002fa:	0c23      	lsrs	r3, r4, #16
 80002fc:	fb0e 111c 	mls	r1, lr, ip, r1
 8000300:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000304:	fb08 f10c 	mul.w	r1, r8, ip
 8000308:	4299      	cmp	r1, r3
 800030a:	d907      	bls.n	800031c <__udivmoddi4+0x124>
 800030c:	18eb      	adds	r3, r5, r3
 800030e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000312:	d202      	bcs.n	800031a <__udivmoddi4+0x122>
 8000314:	4299      	cmp	r1, r3
 8000316:	f200 80cd 	bhi.w	80004b4 <__udivmoddi4+0x2bc>
 800031a:	4684      	mov	ip, r0
 800031c:	1a59      	subs	r1, r3, r1
 800031e:	b2a3      	uxth	r3, r4
 8000320:	fbb1 f0fe 	udiv	r0, r1, lr
 8000324:	fb0e 1410 	mls	r4, lr, r0, r1
 8000328:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 800032c:	fb08 f800 	mul.w	r8, r8, r0
 8000330:	45a0      	cmp	r8, r4
 8000332:	d907      	bls.n	8000344 <__udivmoddi4+0x14c>
 8000334:	192c      	adds	r4, r5, r4
 8000336:	f100 33ff 	add.w	r3, r0, #4294967295
 800033a:	d202      	bcs.n	8000342 <__udivmoddi4+0x14a>
 800033c:	45a0      	cmp	r8, r4
 800033e:	f200 80b6 	bhi.w	80004ae <__udivmoddi4+0x2b6>
 8000342:	4618      	mov	r0, r3
 8000344:	eba4 0408 	sub.w	r4, r4, r8
 8000348:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800034c:	e79f      	b.n	800028e <__udivmoddi4+0x96>
 800034e:	f1c7 0c20 	rsb	ip, r7, #32
 8000352:	40bb      	lsls	r3, r7
 8000354:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000358:	ea4e 0e03 	orr.w	lr, lr, r3
 800035c:	fa01 f407 	lsl.w	r4, r1, r7
 8000360:	fa20 f50c 	lsr.w	r5, r0, ip
 8000364:	fa21 f30c 	lsr.w	r3, r1, ip
 8000368:	ea4f 481e 	mov.w	r8, lr, lsr #16
 800036c:	4325      	orrs	r5, r4
 800036e:	fbb3 f9f8 	udiv	r9, r3, r8
 8000372:	0c2c      	lsrs	r4, r5, #16
 8000374:	fb08 3319 	mls	r3, r8, r9, r3
 8000378:	fa1f fa8e 	uxth.w	sl, lr
 800037c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000380:	fb09 f40a 	mul.w	r4, r9, sl
 8000384:	429c      	cmp	r4, r3
 8000386:	fa02 f207 	lsl.w	r2, r2, r7
 800038a:	fa00 f107 	lsl.w	r1, r0, r7
 800038e:	d90b      	bls.n	80003a8 <__udivmoddi4+0x1b0>
 8000390:	eb1e 0303 	adds.w	r3, lr, r3
 8000394:	f109 30ff 	add.w	r0, r9, #4294967295
 8000398:	f080 8087 	bcs.w	80004aa <__udivmoddi4+0x2b2>
 800039c:	429c      	cmp	r4, r3
 800039e:	f240 8084 	bls.w	80004aa <__udivmoddi4+0x2b2>
 80003a2:	f1a9 0902 	sub.w	r9, r9, #2
 80003a6:	4473      	add	r3, lr
 80003a8:	1b1b      	subs	r3, r3, r4
 80003aa:	b2ad      	uxth	r5, r5
 80003ac:	fbb3 f0f8 	udiv	r0, r3, r8
 80003b0:	fb08 3310 	mls	r3, r8, r0, r3
 80003b4:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80003b8:	fb00 fa0a 	mul.w	sl, r0, sl
 80003bc:	45a2      	cmp	sl, r4
 80003be:	d908      	bls.n	80003d2 <__udivmoddi4+0x1da>
 80003c0:	eb1e 0404 	adds.w	r4, lr, r4
 80003c4:	f100 33ff 	add.w	r3, r0, #4294967295
 80003c8:	d26b      	bcs.n	80004a2 <__udivmoddi4+0x2aa>
 80003ca:	45a2      	cmp	sl, r4
 80003cc:	d969      	bls.n	80004a2 <__udivmoddi4+0x2aa>
 80003ce:	3802      	subs	r0, #2
 80003d0:	4474      	add	r4, lr
 80003d2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80003d6:	fba0 8902 	umull	r8, r9, r0, r2
 80003da:	eba4 040a 	sub.w	r4, r4, sl
 80003de:	454c      	cmp	r4, r9
 80003e0:	46c2      	mov	sl, r8
 80003e2:	464b      	mov	r3, r9
 80003e4:	d354      	bcc.n	8000490 <__udivmoddi4+0x298>
 80003e6:	d051      	beq.n	800048c <__udivmoddi4+0x294>
 80003e8:	2e00      	cmp	r6, #0
 80003ea:	d069      	beq.n	80004c0 <__udivmoddi4+0x2c8>
 80003ec:	ebb1 050a 	subs.w	r5, r1, sl
 80003f0:	eb64 0403 	sbc.w	r4, r4, r3
 80003f4:	fa04 fc0c 	lsl.w	ip, r4, ip
 80003f8:	40fd      	lsrs	r5, r7
 80003fa:	40fc      	lsrs	r4, r7
 80003fc:	ea4c 0505 	orr.w	r5, ip, r5
 8000400:	e9c6 5400 	strd	r5, r4, [r6]
 8000404:	2700      	movs	r7, #0
 8000406:	e747      	b.n	8000298 <__udivmoddi4+0xa0>
 8000408:	f1c2 0320 	rsb	r3, r2, #32
 800040c:	fa20 f703 	lsr.w	r7, r0, r3
 8000410:	4095      	lsls	r5, r2
 8000412:	fa01 f002 	lsl.w	r0, r1, r2
 8000416:	fa21 f303 	lsr.w	r3, r1, r3
 800041a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800041e:	4338      	orrs	r0, r7
 8000420:	0c01      	lsrs	r1, r0, #16
 8000422:	fbb3 f7fe 	udiv	r7, r3, lr
 8000426:	fa1f f885 	uxth.w	r8, r5
 800042a:	fb0e 3317 	mls	r3, lr, r7, r3
 800042e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000432:	fb07 f308 	mul.w	r3, r7, r8
 8000436:	428b      	cmp	r3, r1
 8000438:	fa04 f402 	lsl.w	r4, r4, r2
 800043c:	d907      	bls.n	800044e <__udivmoddi4+0x256>
 800043e:	1869      	adds	r1, r5, r1
 8000440:	f107 3cff 	add.w	ip, r7, #4294967295
 8000444:	d22f      	bcs.n	80004a6 <__udivmoddi4+0x2ae>
 8000446:	428b      	cmp	r3, r1
 8000448:	d92d      	bls.n	80004a6 <__udivmoddi4+0x2ae>
 800044a:	3f02      	subs	r7, #2
 800044c:	4429      	add	r1, r5
 800044e:	1acb      	subs	r3, r1, r3
 8000450:	b281      	uxth	r1, r0
 8000452:	fbb3 f0fe 	udiv	r0, r3, lr
 8000456:	fb0e 3310 	mls	r3, lr, r0, r3
 800045a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800045e:	fb00 f308 	mul.w	r3, r0, r8
 8000462:	428b      	cmp	r3, r1
 8000464:	d907      	bls.n	8000476 <__udivmoddi4+0x27e>
 8000466:	1869      	adds	r1, r5, r1
 8000468:	f100 3cff 	add.w	ip, r0, #4294967295
 800046c:	d217      	bcs.n	800049e <__udivmoddi4+0x2a6>
 800046e:	428b      	cmp	r3, r1
 8000470:	d915      	bls.n	800049e <__udivmoddi4+0x2a6>
 8000472:	3802      	subs	r0, #2
 8000474:	4429      	add	r1, r5
 8000476:	1ac9      	subs	r1, r1, r3
 8000478:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 800047c:	e73b      	b.n	80002f6 <__udivmoddi4+0xfe>
 800047e:	4637      	mov	r7, r6
 8000480:	4630      	mov	r0, r6
 8000482:	e709      	b.n	8000298 <__udivmoddi4+0xa0>
 8000484:	4607      	mov	r7, r0
 8000486:	e6e7      	b.n	8000258 <__udivmoddi4+0x60>
 8000488:	4618      	mov	r0, r3
 800048a:	e6fb      	b.n	8000284 <__udivmoddi4+0x8c>
 800048c:	4541      	cmp	r1, r8
 800048e:	d2ab      	bcs.n	80003e8 <__udivmoddi4+0x1f0>
 8000490:	ebb8 0a02 	subs.w	sl, r8, r2
 8000494:	eb69 020e 	sbc.w	r2, r9, lr
 8000498:	3801      	subs	r0, #1
 800049a:	4613      	mov	r3, r2
 800049c:	e7a4      	b.n	80003e8 <__udivmoddi4+0x1f0>
 800049e:	4660      	mov	r0, ip
 80004a0:	e7e9      	b.n	8000476 <__udivmoddi4+0x27e>
 80004a2:	4618      	mov	r0, r3
 80004a4:	e795      	b.n	80003d2 <__udivmoddi4+0x1da>
 80004a6:	4667      	mov	r7, ip
 80004a8:	e7d1      	b.n	800044e <__udivmoddi4+0x256>
 80004aa:	4681      	mov	r9, r0
 80004ac:	e77c      	b.n	80003a8 <__udivmoddi4+0x1b0>
 80004ae:	3802      	subs	r0, #2
 80004b0:	442c      	add	r4, r5
 80004b2:	e747      	b.n	8000344 <__udivmoddi4+0x14c>
 80004b4:	f1ac 0c02 	sub.w	ip, ip, #2
 80004b8:	442b      	add	r3, r5
 80004ba:	e72f      	b.n	800031c <__udivmoddi4+0x124>
 80004bc:	4638      	mov	r0, r7
 80004be:	e708      	b.n	80002d2 <__udivmoddi4+0xda>
 80004c0:	4637      	mov	r7, r6
 80004c2:	e6e9      	b.n	8000298 <__udivmoddi4+0xa0>

080004c4 <__aeabi_idiv0>:
 80004c4:	4770      	bx	lr
 80004c6:	bf00      	nop

080004c8 <Int2Str>:
  * @param  p_str: The string output pointer
  * @param  intnum: The integer to be converted
  * @retval None
  */
void Int2Str(uint8_t *p_str, uint32_t intnum)
{
 80004c8:	b480      	push	{r7}
 80004ca:	b087      	sub	sp, #28
 80004cc:	af00      	add	r7, sp, #0
 80004ce:	6078      	str	r0, [r7, #4]
 80004d0:	6039      	str	r1, [r7, #0]
  uint32_t i, divider = 1000000000, pos = 0, status = 0;
 80004d2:	4b25      	ldr	r3, [pc, #148]	; (8000568 <Int2Str+0xa0>)
 80004d4:	613b      	str	r3, [r7, #16]
 80004d6:	2300      	movs	r3, #0
 80004d8:	60fb      	str	r3, [r7, #12]
 80004da:	2300      	movs	r3, #0
 80004dc:	60bb      	str	r3, [r7, #8]

  for (i = 0; i < 10; i++)
 80004de:	2300      	movs	r3, #0
 80004e0:	617b      	str	r3, [r7, #20]
 80004e2:	e038      	b.n	8000556 <Int2Str+0x8e>
  {
    p_str[pos++] = (intnum / divider) + 48;
 80004e4:	683a      	ldr	r2, [r7, #0]
 80004e6:	693b      	ldr	r3, [r7, #16]
 80004e8:	fbb2 f3f3 	udiv	r3, r2, r3
 80004ec:	b2da      	uxtb	r2, r3
 80004ee:	68fb      	ldr	r3, [r7, #12]
 80004f0:	1c59      	adds	r1, r3, #1
 80004f2:	60f9      	str	r1, [r7, #12]
 80004f4:	6879      	ldr	r1, [r7, #4]
 80004f6:	440b      	add	r3, r1
 80004f8:	3230      	adds	r2, #48	; 0x30
 80004fa:	b2d2      	uxtb	r2, r2
 80004fc:	701a      	strb	r2, [r3, #0]

    intnum = intnum % divider;
 80004fe:	683b      	ldr	r3, [r7, #0]
 8000500:	693a      	ldr	r2, [r7, #16]
 8000502:	fbb3 f2f2 	udiv	r2, r3, r2
 8000506:	6939      	ldr	r1, [r7, #16]
 8000508:	fb01 f202 	mul.w	r2, r1, r2
 800050c:	1a9b      	subs	r3, r3, r2
 800050e:	603b      	str	r3, [r7, #0]
    divider /= 10;
 8000510:	693b      	ldr	r3, [r7, #16]
 8000512:	4a16      	ldr	r2, [pc, #88]	; (800056c <Int2Str+0xa4>)
 8000514:	fba2 2303 	umull	r2, r3, r2, r3
 8000518:	08db      	lsrs	r3, r3, #3
 800051a:	613b      	str	r3, [r7, #16]
    if ((p_str[pos-1] == '0') & (status == 0))
 800051c:	68fb      	ldr	r3, [r7, #12]
 800051e:	3b01      	subs	r3, #1
 8000520:	687a      	ldr	r2, [r7, #4]
 8000522:	4413      	add	r3, r2
 8000524:	781b      	ldrb	r3, [r3, #0]
 8000526:	2b30      	cmp	r3, #48	; 0x30
 8000528:	bf0c      	ite	eq
 800052a:	2301      	moveq	r3, #1
 800052c:	2300      	movne	r3, #0
 800052e:	b2da      	uxtb	r2, r3
 8000530:	68bb      	ldr	r3, [r7, #8]
 8000532:	2b00      	cmp	r3, #0
 8000534:	bf0c      	ite	eq
 8000536:	2301      	moveq	r3, #1
 8000538:	2300      	movne	r3, #0
 800053a:	b2db      	uxtb	r3, r3
 800053c:	4013      	ands	r3, r2
 800053e:	b2db      	uxtb	r3, r3
 8000540:	2b00      	cmp	r3, #0
 8000542:	d002      	beq.n	800054a <Int2Str+0x82>
    {
      pos = 0;
 8000544:	2300      	movs	r3, #0
 8000546:	60fb      	str	r3, [r7, #12]
 8000548:	e002      	b.n	8000550 <Int2Str+0x88>
    }
    else
    {
      status++;
 800054a:	68bb      	ldr	r3, [r7, #8]
 800054c:	3301      	adds	r3, #1
 800054e:	60bb      	str	r3, [r7, #8]
  for (i = 0; i < 10; i++)
 8000550:	697b      	ldr	r3, [r7, #20]
 8000552:	3301      	adds	r3, #1
 8000554:	617b      	str	r3, [r7, #20]
 8000556:	697b      	ldr	r3, [r7, #20]
 8000558:	2b09      	cmp	r3, #9
 800055a:	d9c3      	bls.n	80004e4 <Int2Str+0x1c>
    }
  }
}
 800055c:	bf00      	nop
 800055e:	371c      	adds	r7, #28
 8000560:	46bd      	mov	sp, r7
 8000562:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000566:	4770      	bx	lr
 8000568:	3b9aca00 	.word	0x3b9aca00
 800056c:	cccccccd 	.word	0xcccccccd

08000570 <Str2Int>:
  * @param  p_intnum: The integer value
  * @retval 1: Correct
  *         0: Error
  */
uint32_t Str2Int(uint8_t *p_inputstr, uint32_t *p_intnum)
{
 8000570:	b480      	push	{r7}
 8000572:	b087      	sub	sp, #28
 8000574:	af00      	add	r7, sp, #0
 8000576:	6078      	str	r0, [r7, #4]
 8000578:	6039      	str	r1, [r7, #0]
  uint32_t i = 0, res = 0;
 800057a:	2300      	movs	r3, #0
 800057c:	617b      	str	r3, [r7, #20]
 800057e:	2300      	movs	r3, #0
 8000580:	613b      	str	r3, [r7, #16]
  uint32_t val = 0;
 8000582:	2300      	movs	r3, #0
 8000584:	60fb      	str	r3, [r7, #12]

  if ((p_inputstr[0] == '0') && ((p_inputstr[1] == 'x') || (p_inputstr[1] == 'X')))
 8000586:	687b      	ldr	r3, [r7, #4]
 8000588:	781b      	ldrb	r3, [r3, #0]
 800058a:	2b30      	cmp	r3, #48	; 0x30
 800058c:	f040 80d7 	bne.w	800073e <Str2Int+0x1ce>
 8000590:	687b      	ldr	r3, [r7, #4]
 8000592:	3301      	adds	r3, #1
 8000594:	781b      	ldrb	r3, [r3, #0]
 8000596:	2b78      	cmp	r3, #120	; 0x78
 8000598:	d005      	beq.n	80005a6 <Str2Int+0x36>
 800059a:	687b      	ldr	r3, [r7, #4]
 800059c:	3301      	adds	r3, #1
 800059e:	781b      	ldrb	r3, [r3, #0]
 80005a0:	2b58      	cmp	r3, #88	; 0x58
 80005a2:	f040 80cc 	bne.w	800073e <Str2Int+0x1ce>
  {
    i = 2;
 80005a6:	2302      	movs	r3, #2
 80005a8:	617b      	str	r3, [r7, #20]
    while ( ( i < 11 ) && ( p_inputstr[i] != '\0' ) )
 80005aa:	e057      	b.n	800065c <Str2Int+0xec>
    {
      if (ISVALIDHEX(p_inputstr[i]))
 80005ac:	687a      	ldr	r2, [r7, #4]
 80005ae:	697b      	ldr	r3, [r7, #20]
 80005b0:	4413      	add	r3, r2
 80005b2:	781b      	ldrb	r3, [r3, #0]
 80005b4:	2b40      	cmp	r3, #64	; 0x40
 80005b6:	d905      	bls.n	80005c4 <Str2Int+0x54>
 80005b8:	687a      	ldr	r2, [r7, #4]
 80005ba:	697b      	ldr	r3, [r7, #20]
 80005bc:	4413      	add	r3, r2
 80005be:	781b      	ldrb	r3, [r3, #0]
 80005c0:	2b46      	cmp	r3, #70	; 0x46
 80005c2:	d917      	bls.n	80005f4 <Str2Int+0x84>
 80005c4:	687a      	ldr	r2, [r7, #4]
 80005c6:	697b      	ldr	r3, [r7, #20]
 80005c8:	4413      	add	r3, r2
 80005ca:	781b      	ldrb	r3, [r3, #0]
 80005cc:	2b60      	cmp	r3, #96	; 0x60
 80005ce:	d905      	bls.n	80005dc <Str2Int+0x6c>
 80005d0:	687a      	ldr	r2, [r7, #4]
 80005d2:	697b      	ldr	r3, [r7, #20]
 80005d4:	4413      	add	r3, r2
 80005d6:	781b      	ldrb	r3, [r3, #0]
 80005d8:	2b66      	cmp	r3, #102	; 0x66
 80005da:	d90b      	bls.n	80005f4 <Str2Int+0x84>
 80005dc:	687a      	ldr	r2, [r7, #4]
 80005de:	697b      	ldr	r3, [r7, #20]
 80005e0:	4413      	add	r3, r2
 80005e2:	781b      	ldrb	r3, [r3, #0]
 80005e4:	2b2f      	cmp	r3, #47	; 0x2f
 80005e6:	d936      	bls.n	8000656 <Str2Int+0xe6>
 80005e8:	687a      	ldr	r2, [r7, #4]
 80005ea:	697b      	ldr	r3, [r7, #20]
 80005ec:	4413      	add	r3, r2
 80005ee:	781b      	ldrb	r3, [r3, #0]
 80005f0:	2b39      	cmp	r3, #57	; 0x39
 80005f2:	d830      	bhi.n	8000656 <Str2Int+0xe6>
      {
        val = (val << 4) + CONVERTHEX(p_inputstr[i]);
 80005f4:	68fb      	ldr	r3, [r7, #12]
 80005f6:	011b      	lsls	r3, r3, #4
 80005f8:	6879      	ldr	r1, [r7, #4]
 80005fa:	697a      	ldr	r2, [r7, #20]
 80005fc:	440a      	add	r2, r1
 80005fe:	7812      	ldrb	r2, [r2, #0]
 8000600:	2a2f      	cmp	r2, #47	; 0x2f
 8000602:	d90b      	bls.n	800061c <Str2Int+0xac>
 8000604:	6879      	ldr	r1, [r7, #4]
 8000606:	697a      	ldr	r2, [r7, #20]
 8000608:	440a      	add	r2, r1
 800060a:	7812      	ldrb	r2, [r2, #0]
 800060c:	2a39      	cmp	r2, #57	; 0x39
 800060e:	d805      	bhi.n	800061c <Str2Int+0xac>
 8000610:	6879      	ldr	r1, [r7, #4]
 8000612:	697a      	ldr	r2, [r7, #20]
 8000614:	440a      	add	r2, r1
 8000616:	7812      	ldrb	r2, [r2, #0]
 8000618:	3a30      	subs	r2, #48	; 0x30
 800061a:	e016      	b.n	800064a <Str2Int+0xda>
 800061c:	6879      	ldr	r1, [r7, #4]
 800061e:	697a      	ldr	r2, [r7, #20]
 8000620:	440a      	add	r2, r1
 8000622:	7812      	ldrb	r2, [r2, #0]
 8000624:	2a40      	cmp	r2, #64	; 0x40
 8000626:	d90b      	bls.n	8000640 <Str2Int+0xd0>
 8000628:	6879      	ldr	r1, [r7, #4]
 800062a:	697a      	ldr	r2, [r7, #20]
 800062c:	440a      	add	r2, r1
 800062e:	7812      	ldrb	r2, [r2, #0]
 8000630:	2a46      	cmp	r2, #70	; 0x46
 8000632:	d805      	bhi.n	8000640 <Str2Int+0xd0>
 8000634:	6879      	ldr	r1, [r7, #4]
 8000636:	697a      	ldr	r2, [r7, #20]
 8000638:	440a      	add	r2, r1
 800063a:	7812      	ldrb	r2, [r2, #0]
 800063c:	3a37      	subs	r2, #55	; 0x37
 800063e:	e004      	b.n	800064a <Str2Int+0xda>
 8000640:	6879      	ldr	r1, [r7, #4]
 8000642:	697a      	ldr	r2, [r7, #20]
 8000644:	440a      	add	r2, r1
 8000646:	7812      	ldrb	r2, [r2, #0]
 8000648:	3a57      	subs	r2, #87	; 0x57
 800064a:	4413      	add	r3, r2
 800064c:	60fb      	str	r3, [r7, #12]
      {
        /* Return 0, Invalid input */
        res = 0;
        break;
      }
      i++;
 800064e:	697b      	ldr	r3, [r7, #20]
 8000650:	3301      	adds	r3, #1
 8000652:	617b      	str	r3, [r7, #20]
 8000654:	e002      	b.n	800065c <Str2Int+0xec>
        res = 0;
 8000656:	2300      	movs	r3, #0
 8000658:	613b      	str	r3, [r7, #16]
        break;
 800065a:	e008      	b.n	800066e <Str2Int+0xfe>
    while ( ( i < 11 ) && ( p_inputstr[i] != '\0' ) )
 800065c:	697b      	ldr	r3, [r7, #20]
 800065e:	2b0a      	cmp	r3, #10
 8000660:	d805      	bhi.n	800066e <Str2Int+0xfe>
 8000662:	687a      	ldr	r2, [r7, #4]
 8000664:	697b      	ldr	r3, [r7, #20]
 8000666:	4413      	add	r3, r2
 8000668:	781b      	ldrb	r3, [r3, #0]
 800066a:	2b00      	cmp	r3, #0
 800066c:	d19e      	bne.n	80005ac <Str2Int+0x3c>
    }

    /* valid result */
    if (p_inputstr[i] == '\0')
 800066e:	687a      	ldr	r2, [r7, #4]
 8000670:	697b      	ldr	r3, [r7, #20]
 8000672:	4413      	add	r3, r2
 8000674:	781b      	ldrb	r3, [r3, #0]
 8000676:	2b00      	cmp	r3, #0
 8000678:	d167      	bne.n	800074a <Str2Int+0x1da>
    {
      *p_intnum = val;
 800067a:	683b      	ldr	r3, [r7, #0]
 800067c:	68fa      	ldr	r2, [r7, #12]
 800067e:	601a      	str	r2, [r3, #0]
      res = 1;
 8000680:	2301      	movs	r3, #1
 8000682:	613b      	str	r3, [r7, #16]
    if (p_inputstr[i] == '\0')
 8000684:	e061      	b.n	800074a <Str2Int+0x1da>
  }
  else /* max 10-digit decimal input */
  {
    while ( ( i < 11 ) && ( res != 1 ) )
    {
      if (p_inputstr[i] == '\0')
 8000686:	687a      	ldr	r2, [r7, #4]
 8000688:	697b      	ldr	r3, [r7, #20]
 800068a:	4413      	add	r3, r2
 800068c:	781b      	ldrb	r3, [r3, #0]
 800068e:	2b00      	cmp	r3, #0
 8000690:	d105      	bne.n	800069e <Str2Int+0x12e>
      {
        *p_intnum = val;
 8000692:	683b      	ldr	r3, [r7, #0]
 8000694:	68fa      	ldr	r2, [r7, #12]
 8000696:	601a      	str	r2, [r3, #0]
        /* return 1 */
        res = 1;
 8000698:	2301      	movs	r3, #1
 800069a:	613b      	str	r3, [r7, #16]
 800069c:	e04c      	b.n	8000738 <Str2Int+0x1c8>
      }
      else if (((p_inputstr[i] == 'k') || (p_inputstr[i] == 'K')) && (i > 0))
 800069e:	687a      	ldr	r2, [r7, #4]
 80006a0:	697b      	ldr	r3, [r7, #20]
 80006a2:	4413      	add	r3, r2
 80006a4:	781b      	ldrb	r3, [r3, #0]
 80006a6:	2b6b      	cmp	r3, #107	; 0x6b
 80006a8:	d005      	beq.n	80006b6 <Str2Int+0x146>
 80006aa:	687a      	ldr	r2, [r7, #4]
 80006ac:	697b      	ldr	r3, [r7, #20]
 80006ae:	4413      	add	r3, r2
 80006b0:	781b      	ldrb	r3, [r3, #0]
 80006b2:	2b4b      	cmp	r3, #75	; 0x4b
 80006b4:	d10b      	bne.n	80006ce <Str2Int+0x15e>
 80006b6:	697b      	ldr	r3, [r7, #20]
 80006b8:	2b00      	cmp	r3, #0
 80006ba:	d008      	beq.n	80006ce <Str2Int+0x15e>
      {
        val = val << 10;
 80006bc:	68fb      	ldr	r3, [r7, #12]
 80006be:	029b      	lsls	r3, r3, #10
 80006c0:	60fb      	str	r3, [r7, #12]
        *p_intnum = val;
 80006c2:	683b      	ldr	r3, [r7, #0]
 80006c4:	68fa      	ldr	r2, [r7, #12]
 80006c6:	601a      	str	r2, [r3, #0]
        res = 1;
 80006c8:	2301      	movs	r3, #1
 80006ca:	613b      	str	r3, [r7, #16]
 80006cc:	e034      	b.n	8000738 <Str2Int+0x1c8>
      }
      else if (((p_inputstr[i] == 'm') || (p_inputstr[i] == 'M')) && (i > 0))
 80006ce:	687a      	ldr	r2, [r7, #4]
 80006d0:	697b      	ldr	r3, [r7, #20]
 80006d2:	4413      	add	r3, r2
 80006d4:	781b      	ldrb	r3, [r3, #0]
 80006d6:	2b6d      	cmp	r3, #109	; 0x6d
 80006d8:	d005      	beq.n	80006e6 <Str2Int+0x176>
 80006da:	687a      	ldr	r2, [r7, #4]
 80006dc:	697b      	ldr	r3, [r7, #20]
 80006de:	4413      	add	r3, r2
 80006e0:	781b      	ldrb	r3, [r3, #0]
 80006e2:	2b4d      	cmp	r3, #77	; 0x4d
 80006e4:	d10b      	bne.n	80006fe <Str2Int+0x18e>
 80006e6:	697b      	ldr	r3, [r7, #20]
 80006e8:	2b00      	cmp	r3, #0
 80006ea:	d008      	beq.n	80006fe <Str2Int+0x18e>
      {
        val = val << 20;
 80006ec:	68fb      	ldr	r3, [r7, #12]
 80006ee:	051b      	lsls	r3, r3, #20
 80006f0:	60fb      	str	r3, [r7, #12]
        *p_intnum = val;
 80006f2:	683b      	ldr	r3, [r7, #0]
 80006f4:	68fa      	ldr	r2, [r7, #12]
 80006f6:	601a      	str	r2, [r3, #0]
        res = 1;
 80006f8:	2301      	movs	r3, #1
 80006fa:	613b      	str	r3, [r7, #16]
 80006fc:	e01c      	b.n	8000738 <Str2Int+0x1c8>
      }
      else if (ISVALIDDEC(p_inputstr[i]))
 80006fe:	687a      	ldr	r2, [r7, #4]
 8000700:	697b      	ldr	r3, [r7, #20]
 8000702:	4413      	add	r3, r2
 8000704:	781b      	ldrb	r3, [r3, #0]
 8000706:	2b2f      	cmp	r3, #47	; 0x2f
 8000708:	d913      	bls.n	8000732 <Str2Int+0x1c2>
 800070a:	687a      	ldr	r2, [r7, #4]
 800070c:	697b      	ldr	r3, [r7, #20]
 800070e:	4413      	add	r3, r2
 8000710:	781b      	ldrb	r3, [r3, #0]
 8000712:	2b39      	cmp	r3, #57	; 0x39
 8000714:	d80d      	bhi.n	8000732 <Str2Int+0x1c2>
      {
        val = val * 10 + CONVERTDEC(p_inputstr[i]);
 8000716:	68fa      	ldr	r2, [r7, #12]
 8000718:	4613      	mov	r3, r2
 800071a:	009b      	lsls	r3, r3, #2
 800071c:	4413      	add	r3, r2
 800071e:	005b      	lsls	r3, r3, #1
 8000720:	4619      	mov	r1, r3
 8000722:	687a      	ldr	r2, [r7, #4]
 8000724:	697b      	ldr	r3, [r7, #20]
 8000726:	4413      	add	r3, r2
 8000728:	781b      	ldrb	r3, [r3, #0]
 800072a:	440b      	add	r3, r1
 800072c:	3b30      	subs	r3, #48	; 0x30
 800072e:	60fb      	str	r3, [r7, #12]
 8000730:	e002      	b.n	8000738 <Str2Int+0x1c8>
      }
      else
      {
        /* return 0, Invalid input */
        res = 0;
 8000732:	2300      	movs	r3, #0
 8000734:	613b      	str	r3, [r7, #16]
        break;
 8000736:	e008      	b.n	800074a <Str2Int+0x1da>
      }
      i++;
 8000738:	697b      	ldr	r3, [r7, #20]
 800073a:	3301      	adds	r3, #1
 800073c:	617b      	str	r3, [r7, #20]
    while ( ( i < 11 ) && ( res != 1 ) )
 800073e:	697b      	ldr	r3, [r7, #20]
 8000740:	2b0a      	cmp	r3, #10
 8000742:	d802      	bhi.n	800074a <Str2Int+0x1da>
 8000744:	693b      	ldr	r3, [r7, #16]
 8000746:	2b01      	cmp	r3, #1
 8000748:	d19d      	bne.n	8000686 <Str2Int+0x116>
    }
  }

  return res;
 800074a:	693b      	ldr	r3, [r7, #16]
}
 800074c:	4618      	mov	r0, r3
 800074e:	371c      	adds	r7, #28
 8000750:	46bd      	mov	sp, r7
 8000752:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000756:	4770      	bx	lr

08000758 <Serial_PutString>:
  * @brief  Print a string on the HyperTerminal
  * @param  p_string: The string to be printed
  * @retval None
  */
void Serial_PutString(uint8_t *p_string)
{
 8000758:	b580      	push	{r7, lr}
 800075a:	b084      	sub	sp, #16
 800075c:	af00      	add	r7, sp, #0
 800075e:	6078      	str	r0, [r7, #4]
  uint16_t length = 0;
 8000760:	2300      	movs	r3, #0
 8000762:	81fb      	strh	r3, [r7, #14]

  while (p_string[length] != '\0')
 8000764:	e002      	b.n	800076c <Serial_PutString+0x14>
  {
    length++;
 8000766:	89fb      	ldrh	r3, [r7, #14]
 8000768:	3301      	adds	r3, #1
 800076a:	81fb      	strh	r3, [r7, #14]
  while (p_string[length] != '\0')
 800076c:	89fb      	ldrh	r3, [r7, #14]
 800076e:	687a      	ldr	r2, [r7, #4]
 8000770:	4413      	add	r3, r2
 8000772:	781b      	ldrb	r3, [r3, #0]
 8000774:	2b00      	cmp	r3, #0
 8000776:	d1f6      	bne.n	8000766 <Serial_PutString+0xe>
  }
  HAL_UART_Transmit(&UartHandle, p_string, length, TX_TIMEOUT);
 8000778:	89fa      	ldrh	r2, [r7, #14]
 800077a:	2364      	movs	r3, #100	; 0x64
 800077c:	6879      	ldr	r1, [r7, #4]
 800077e:	4805      	ldr	r0, [pc, #20]	; (8000794 <Serial_PutString+0x3c>)
 8000780:	f002 fa65 	bl	8002c4e <HAL_UART_Transmit>
  HAL_Delay(100);
 8000784:	2064      	movs	r0, #100	; 0x64
 8000786:	f000 ff3b 	bl	8001600 <HAL_Delay>
}
 800078a:	bf00      	nop
 800078c:	3710      	adds	r7, #16
 800078e:	46bd      	mov	sp, r7
 8000790:	bd80      	pop	{r7, pc}
 8000792:	bf00      	nop
 8000794:	20000030 	.word	0x20000030

08000798 <Serial_PutByte>:
  * @brief  Transmit a byte to the HyperTerminal
  * @param  param The byte to be sent
  * @retval HAL_StatusTypeDef HAL_OK if OK
  */
HAL_StatusTypeDef Serial_PutByte( uint8_t param )
{
 8000798:	b580      	push	{r7, lr}
 800079a:	b082      	sub	sp, #8
 800079c:	af00      	add	r7, sp, #0
 800079e:	4603      	mov	r3, r0
 80007a0:	71fb      	strb	r3, [r7, #7]
  /* May be timeouted... */
  if ( UartHandle.gState == HAL_UART_STATE_TIMEOUT )
 80007a2:	4b0a      	ldr	r3, [pc, #40]	; (80007cc <Serial_PutByte+0x34>)
 80007a4:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80007a8:	b2db      	uxtb	r3, r3
 80007aa:	2ba0      	cmp	r3, #160	; 0xa0
 80007ac:	d103      	bne.n	80007b6 <Serial_PutByte+0x1e>
  {
    UartHandle.gState = HAL_UART_STATE_READY;
 80007ae:	4b07      	ldr	r3, [pc, #28]	; (80007cc <Serial_PutByte+0x34>)
 80007b0:	2220      	movs	r2, #32
 80007b2:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  }
  return HAL_UART_Transmit(&UartHandle, &param, 1, TX_TIMEOUT);
 80007b6:	1df9      	adds	r1, r7, #7
 80007b8:	2364      	movs	r3, #100	; 0x64
 80007ba:	2201      	movs	r2, #1
 80007bc:	4803      	ldr	r0, [pc, #12]	; (80007cc <Serial_PutByte+0x34>)
 80007be:	f002 fa46 	bl	8002c4e <HAL_UART_Transmit>
 80007c2:	4603      	mov	r3, r0
}
 80007c4:	4618      	mov	r0, r3
 80007c6:	3708      	adds	r7, #8
 80007c8:	46bd      	mov	sp, r7
 80007ca:	bd80      	pop	{r7, pc}
 80007cc:	20000030 	.word	0x20000030

080007d0 <FLASH_If_Init>:
  * @brief  Unlocks Flash for write access
  * @param  None
  * @retval None
  */
void FLASH_If_Init(void)
{ 
 80007d0:	b580      	push	{r7, lr}
 80007d2:	af00      	add	r7, sp, #0
  HAL_FLASH_Unlock(); 
 80007d4:	f001 f972 	bl	8001abc <HAL_FLASH_Unlock>

  /* Clear pending flags (if any) */  
  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP | FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | 
 80007d8:	4b02      	ldr	r3, [pc, #8]	; (80007e4 <FLASH_If_Init+0x14>)
 80007da:	22f3      	movs	r2, #243	; 0xf3
 80007dc:	60da      	str	r2, [r3, #12]
                         FLASH_FLAG_PGAERR | FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR);
}
 80007de:	bf00      	nop
 80007e0:	bd80      	pop	{r7, pc}
 80007e2:	bf00      	nop
 80007e4:	40023c00 	.word	0x40023c00

080007e8 <FLASH_If_Erase>:
  * @param  StartSector: start of user flash area
  * @retval 0: user flash area successfully erased
  *         1: error occurred
  */
uint32_t FLASH_If_Erase(uint32_t StartSector)
{
 80007e8:	b580      	push	{r7, lr}
 80007ea:	b08a      	sub	sp, #40	; 0x28
 80007ec:	af00      	add	r7, sp, #0
 80007ee:	6078      	str	r0, [r7, #4]
  uint32_t UserStartSector;
  uint32_t SectorError;
  FLASH_EraseInitTypeDef pEraseInit;

  /* Unlock the Flash to enable the flash control register access *************/ 
  FLASH_If_Init();
 80007f0:	f7ff ffee 	bl	80007d0 <FLASH_If_Init>
  
  /* Get the sector where start the user flash area */
  UserStartSector = GetSector(APPLICATION_ADDRESS);
 80007f4:	480e      	ldr	r0, [pc, #56]	; (8000830 <FLASH_If_Erase+0x48>)
 80007f6:	f000 f85b 	bl	80008b0 <GetSector>
 80007fa:	6278      	str	r0, [r7, #36]	; 0x24
  
  pEraseInit.TypeErase = TYPEERASE_SECTORS;
 80007fc:	2300      	movs	r3, #0
 80007fe:	60fb      	str	r3, [r7, #12]
  pEraseInit.Sector = UserStartSector;
 8000800:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000802:	617b      	str	r3, [r7, #20]
  pEraseInit.NbSectors = 10;
 8000804:	230a      	movs	r3, #10
 8000806:	61bb      	str	r3, [r7, #24]
  pEraseInit.VoltageRange = VOLTAGE_RANGE_3;
 8000808:	2302      	movs	r3, #2
 800080a:	61fb      	str	r3, [r7, #28]
    
  if (HAL_FLASHEx_Erase(&pEraseInit, &SectorError) != HAL_OK)
 800080c:	f107 0220 	add.w	r2, r7, #32
 8000810:	f107 030c 	add.w	r3, r7, #12
 8000814:	4611      	mov	r1, r2
 8000816:	4618      	mov	r0, r3
 8000818:	f001 faa0 	bl	8001d5c <HAL_FLASHEx_Erase>
 800081c:	4603      	mov	r3, r0
 800081e:	2b00      	cmp	r3, #0
 8000820:	d001      	beq.n	8000826 <FLASH_If_Erase+0x3e>
  {
     /* Error occurred while page erase */
     return (1);
 8000822:	2301      	movs	r3, #1
 8000824:	e000      	b.n	8000828 <FLASH_If_Erase+0x40>
  }
  
  return (0);
 8000826:	2300      	movs	r3, #0
}
 8000828:	4618      	mov	r0, r3
 800082a:	3728      	adds	r7, #40	; 0x28
 800082c:	46bd      	mov	sp, r7
 800082e:	bd80      	pop	{r7, pc}
 8000830:	08008000 	.word	0x08008000

08000834 <FLASH_If_Write>:
  * @retval 0: Data successfully written to Flash memory
  *         1: Error occurred while writing data in Flash memory
  *         2: Written Data in flash memory is different from expected one
  */
uint32_t FLASH_If_Write(uint32_t FlashAddress, uint32_t* Data ,uint32_t DataLength)
{
 8000834:	b590      	push	{r4, r7, lr}
 8000836:	b087      	sub	sp, #28
 8000838:	af00      	add	r7, sp, #0
 800083a:	60f8      	str	r0, [r7, #12]
 800083c:	60b9      	str	r1, [r7, #8]
 800083e:	607a      	str	r2, [r7, #4]
  uint32_t i = 0;
 8000840:	2300      	movs	r3, #0
 8000842:	617b      	str	r3, [r7, #20]

  for (i = 0; (i < DataLength) && (FlashAddress <= (USER_FLASH_END_ADDRESS-4)); i++)
 8000844:	2300      	movs	r3, #0
 8000846:	617b      	str	r3, [r7, #20]
 8000848:	e023      	b.n	8000892 <FLASH_If_Write+0x5e>
  {
    /* Device voltage range supposed to be [2.7V to 3.6V], the operation will
       be done by word */ 
    if (HAL_FLASH_Program(TYPEPROGRAM_WORD, FlashAddress, *(uint32_t*)(Data+i)) == HAL_OK)      
 800084a:	697b      	ldr	r3, [r7, #20]
 800084c:	009b      	lsls	r3, r3, #2
 800084e:	68ba      	ldr	r2, [r7, #8]
 8000850:	4413      	add	r3, r2
 8000852:	681b      	ldr	r3, [r3, #0]
 8000854:	f04f 0400 	mov.w	r4, #0
 8000858:	461a      	mov	r2, r3
 800085a:	4623      	mov	r3, r4
 800085c:	68f9      	ldr	r1, [r7, #12]
 800085e:	2002      	movs	r0, #2
 8000860:	f001 f824 	bl	80018ac <HAL_FLASH_Program>
 8000864:	4603      	mov	r3, r0
 8000866:	2b00      	cmp	r3, #0
 8000868:	d10e      	bne.n	8000888 <FLASH_If_Write+0x54>
    {
     /* Check the written value */
      if (*(uint32_t*)FlashAddress != *(uint32_t*)(Data+i))
 800086a:	68fb      	ldr	r3, [r7, #12]
 800086c:	681a      	ldr	r2, [r3, #0]
 800086e:	697b      	ldr	r3, [r7, #20]
 8000870:	009b      	lsls	r3, r3, #2
 8000872:	68b9      	ldr	r1, [r7, #8]
 8000874:	440b      	add	r3, r1
 8000876:	681b      	ldr	r3, [r3, #0]
 8000878:	429a      	cmp	r2, r3
 800087a:	d001      	beq.n	8000880 <FLASH_If_Write+0x4c>
      {
        /* Flash content doesn't match SRAM content */
        return(FLASHIF_WRITINGCTRL_ERROR);
 800087c:	2302      	movs	r3, #2
 800087e:	e011      	b.n	80008a4 <FLASH_If_Write+0x70>
      }
      /* Increment FLASH destination address */
      FlashAddress += 4;
 8000880:	68fb      	ldr	r3, [r7, #12]
 8000882:	3304      	adds	r3, #4
 8000884:	60fb      	str	r3, [r7, #12]
 8000886:	e001      	b.n	800088c <FLASH_If_Write+0x58>
    }
    else
    {
      /* Error occurred while writing data in Flash memory */
      return (FLASHIF_WRITING_ERROR);
 8000888:	2303      	movs	r3, #3
 800088a:	e00b      	b.n	80008a4 <FLASH_If_Write+0x70>
  for (i = 0; (i < DataLength) && (FlashAddress <= (USER_FLASH_END_ADDRESS-4)); i++)
 800088c:	697b      	ldr	r3, [r7, #20]
 800088e:	3301      	adds	r3, #1
 8000890:	617b      	str	r3, [r7, #20]
 8000892:	697a      	ldr	r2, [r7, #20]
 8000894:	687b      	ldr	r3, [r7, #4]
 8000896:	429a      	cmp	r2, r3
 8000898:	d203      	bcs.n	80008a2 <FLASH_If_Write+0x6e>
 800089a:	68fb      	ldr	r3, [r7, #12]
 800089c:	4a03      	ldr	r2, [pc, #12]	; (80008ac <FLASH_If_Write+0x78>)
 800089e:	4293      	cmp	r3, r2
 80008a0:	d9d3      	bls.n	800084a <FLASH_If_Write+0x16>
    }
  }

  return (FLASHIF_OK);
 80008a2:	2300      	movs	r3, #0
}
 80008a4:	4618      	mov	r0, r3
 80008a6:	371c      	adds	r7, #28
 80008a8:	46bd      	mov	sp, r7
 80008aa:	bd90      	pop	{r4, r7, pc}
 80008ac:	080ffffb 	.word	0x080ffffb

080008b0 <GetSector>:
  * @brief  Gets the sector of a given address
  * @param  Address: Flash address
  * @retval The sector of a given address
  */
static uint32_t GetSector(uint32_t Address)
{
 80008b0:	b480      	push	{r7}
 80008b2:	b085      	sub	sp, #20
 80008b4:	af00      	add	r7, sp, #0
 80008b6:	6078      	str	r0, [r7, #4]
  uint32_t sector = 0;
 80008b8:	2300      	movs	r3, #0
 80008ba:	60fb      	str	r3, [r7, #12]
  
  if((Address < ADDR_FLASH_SECTOR_1) && (Address >= ADDR_FLASH_SECTOR_0))
 80008bc:	687b      	ldr	r3, [r7, #4]
 80008be:	4a40      	ldr	r2, [pc, #256]	; (80009c0 <GetSector+0x110>)
 80008c0:	4293      	cmp	r3, r2
 80008c2:	d806      	bhi.n	80008d2 <GetSector+0x22>
 80008c4:	687b      	ldr	r3, [r7, #4]
 80008c6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80008ca:	d302      	bcc.n	80008d2 <GetSector+0x22>
  {
    sector = FLASH_SECTOR_0;  
 80008cc:	2300      	movs	r3, #0
 80008ce:	60fb      	str	r3, [r7, #12]
 80008d0:	e06f      	b.n	80009b2 <GetSector+0x102>
  }
  else if((Address < ADDR_FLASH_SECTOR_2) && (Address >= ADDR_FLASH_SECTOR_1))
 80008d2:	687b      	ldr	r3, [r7, #4]
 80008d4:	4a3b      	ldr	r2, [pc, #236]	; (80009c4 <GetSector+0x114>)
 80008d6:	4293      	cmp	r3, r2
 80008d8:	d806      	bhi.n	80008e8 <GetSector+0x38>
 80008da:	687b      	ldr	r3, [r7, #4]
 80008dc:	4a38      	ldr	r2, [pc, #224]	; (80009c0 <GetSector+0x110>)
 80008de:	4293      	cmp	r3, r2
 80008e0:	d902      	bls.n	80008e8 <GetSector+0x38>
  {
    sector = FLASH_SECTOR_1;  
 80008e2:	2301      	movs	r3, #1
 80008e4:	60fb      	str	r3, [r7, #12]
 80008e6:	e064      	b.n	80009b2 <GetSector+0x102>
  }
  else if((Address < ADDR_FLASH_SECTOR_3) && (Address >= ADDR_FLASH_SECTOR_2))
 80008e8:	687b      	ldr	r3, [r7, #4]
 80008ea:	4a37      	ldr	r2, [pc, #220]	; (80009c8 <GetSector+0x118>)
 80008ec:	4293      	cmp	r3, r2
 80008ee:	d806      	bhi.n	80008fe <GetSector+0x4e>
 80008f0:	687b      	ldr	r3, [r7, #4]
 80008f2:	4a34      	ldr	r2, [pc, #208]	; (80009c4 <GetSector+0x114>)
 80008f4:	4293      	cmp	r3, r2
 80008f6:	d902      	bls.n	80008fe <GetSector+0x4e>
  {
    sector = FLASH_SECTOR_2;  
 80008f8:	2302      	movs	r3, #2
 80008fa:	60fb      	str	r3, [r7, #12]
 80008fc:	e059      	b.n	80009b2 <GetSector+0x102>
  }
  else if((Address < ADDR_FLASH_SECTOR_4) && (Address >= ADDR_FLASH_SECTOR_3))
 80008fe:	687b      	ldr	r3, [r7, #4]
 8000900:	4a32      	ldr	r2, [pc, #200]	; (80009cc <GetSector+0x11c>)
 8000902:	4293      	cmp	r3, r2
 8000904:	d806      	bhi.n	8000914 <GetSector+0x64>
 8000906:	687b      	ldr	r3, [r7, #4]
 8000908:	4a2f      	ldr	r2, [pc, #188]	; (80009c8 <GetSector+0x118>)
 800090a:	4293      	cmp	r3, r2
 800090c:	d902      	bls.n	8000914 <GetSector+0x64>
  {
    sector = FLASH_SECTOR_3;  
 800090e:	2303      	movs	r3, #3
 8000910:	60fb      	str	r3, [r7, #12]
 8000912:	e04e      	b.n	80009b2 <GetSector+0x102>
  }
  else if((Address < ADDR_FLASH_SECTOR_5) && (Address >= ADDR_FLASH_SECTOR_4))
 8000914:	687b      	ldr	r3, [r7, #4]
 8000916:	4a2e      	ldr	r2, [pc, #184]	; (80009d0 <GetSector+0x120>)
 8000918:	4293      	cmp	r3, r2
 800091a:	d806      	bhi.n	800092a <GetSector+0x7a>
 800091c:	687b      	ldr	r3, [r7, #4]
 800091e:	4a2b      	ldr	r2, [pc, #172]	; (80009cc <GetSector+0x11c>)
 8000920:	4293      	cmp	r3, r2
 8000922:	d902      	bls.n	800092a <GetSector+0x7a>
  {
    sector = FLASH_SECTOR_4;  
 8000924:	2304      	movs	r3, #4
 8000926:	60fb      	str	r3, [r7, #12]
 8000928:	e043      	b.n	80009b2 <GetSector+0x102>
  }
  else if((Address < ADDR_FLASH_SECTOR_6) && (Address >= ADDR_FLASH_SECTOR_5))
 800092a:	687b      	ldr	r3, [r7, #4]
 800092c:	4a29      	ldr	r2, [pc, #164]	; (80009d4 <GetSector+0x124>)
 800092e:	4293      	cmp	r3, r2
 8000930:	d806      	bhi.n	8000940 <GetSector+0x90>
 8000932:	687b      	ldr	r3, [r7, #4]
 8000934:	4a26      	ldr	r2, [pc, #152]	; (80009d0 <GetSector+0x120>)
 8000936:	4293      	cmp	r3, r2
 8000938:	d902      	bls.n	8000940 <GetSector+0x90>
  {
    sector = FLASH_SECTOR_5;  
 800093a:	2305      	movs	r3, #5
 800093c:	60fb      	str	r3, [r7, #12]
 800093e:	e038      	b.n	80009b2 <GetSector+0x102>
  }
  else if((Address < ADDR_FLASH_SECTOR_7) && (Address >= ADDR_FLASH_SECTOR_6))
 8000940:	687b      	ldr	r3, [r7, #4]
 8000942:	4a25      	ldr	r2, [pc, #148]	; (80009d8 <GetSector+0x128>)
 8000944:	4293      	cmp	r3, r2
 8000946:	d806      	bhi.n	8000956 <GetSector+0xa6>
 8000948:	687b      	ldr	r3, [r7, #4]
 800094a:	4a22      	ldr	r2, [pc, #136]	; (80009d4 <GetSector+0x124>)
 800094c:	4293      	cmp	r3, r2
 800094e:	d902      	bls.n	8000956 <GetSector+0xa6>
  {
    sector = FLASH_SECTOR_6;  
 8000950:	2306      	movs	r3, #6
 8000952:	60fb      	str	r3, [r7, #12]
 8000954:	e02d      	b.n	80009b2 <GetSector+0x102>
  }
  else if((Address < ADDR_FLASH_SECTOR_8) && (Address >= ADDR_FLASH_SECTOR_7))
 8000956:	687b      	ldr	r3, [r7, #4]
 8000958:	4a20      	ldr	r2, [pc, #128]	; (80009dc <GetSector+0x12c>)
 800095a:	4293      	cmp	r3, r2
 800095c:	d806      	bhi.n	800096c <GetSector+0xbc>
 800095e:	687b      	ldr	r3, [r7, #4]
 8000960:	4a1d      	ldr	r2, [pc, #116]	; (80009d8 <GetSector+0x128>)
 8000962:	4293      	cmp	r3, r2
 8000964:	d902      	bls.n	800096c <GetSector+0xbc>
  {
    sector = FLASH_SECTOR_7;  
 8000966:	2307      	movs	r3, #7
 8000968:	60fb      	str	r3, [r7, #12]
 800096a:	e022      	b.n	80009b2 <GetSector+0x102>
  }
  else if((Address < ADDR_FLASH_SECTOR_9) && (Address >= ADDR_FLASH_SECTOR_8))
 800096c:	687b      	ldr	r3, [r7, #4]
 800096e:	4a1c      	ldr	r2, [pc, #112]	; (80009e0 <GetSector+0x130>)
 8000970:	4293      	cmp	r3, r2
 8000972:	d806      	bhi.n	8000982 <GetSector+0xd2>
 8000974:	687b      	ldr	r3, [r7, #4]
 8000976:	4a19      	ldr	r2, [pc, #100]	; (80009dc <GetSector+0x12c>)
 8000978:	4293      	cmp	r3, r2
 800097a:	d902      	bls.n	8000982 <GetSector+0xd2>
  {
    sector = FLASH_SECTOR_8;  
 800097c:	2308      	movs	r3, #8
 800097e:	60fb      	str	r3, [r7, #12]
 8000980:	e017      	b.n	80009b2 <GetSector+0x102>
  }
  else if((Address < ADDR_FLASH_SECTOR_10) && (Address >= ADDR_FLASH_SECTOR_9))
 8000982:	687b      	ldr	r3, [r7, #4]
 8000984:	4a17      	ldr	r2, [pc, #92]	; (80009e4 <GetSector+0x134>)
 8000986:	4293      	cmp	r3, r2
 8000988:	d806      	bhi.n	8000998 <GetSector+0xe8>
 800098a:	687b      	ldr	r3, [r7, #4]
 800098c:	4a14      	ldr	r2, [pc, #80]	; (80009e0 <GetSector+0x130>)
 800098e:	4293      	cmp	r3, r2
 8000990:	d902      	bls.n	8000998 <GetSector+0xe8>
  {
    sector = FLASH_SECTOR_9;  
 8000992:	2309      	movs	r3, #9
 8000994:	60fb      	str	r3, [r7, #12]
 8000996:	e00c      	b.n	80009b2 <GetSector+0x102>
  }
  else if((Address < ADDR_FLASH_SECTOR_11) && (Address >= ADDR_FLASH_SECTOR_10))
 8000998:	687b      	ldr	r3, [r7, #4]
 800099a:	4a13      	ldr	r2, [pc, #76]	; (80009e8 <GetSector+0x138>)
 800099c:	4293      	cmp	r3, r2
 800099e:	d806      	bhi.n	80009ae <GetSector+0xfe>
 80009a0:	687b      	ldr	r3, [r7, #4]
 80009a2:	4a10      	ldr	r2, [pc, #64]	; (80009e4 <GetSector+0x134>)
 80009a4:	4293      	cmp	r3, r2
 80009a6:	d902      	bls.n	80009ae <GetSector+0xfe>
  {
    sector = FLASH_SECTOR_10;  
 80009a8:	230a      	movs	r3, #10
 80009aa:	60fb      	str	r3, [r7, #12]
 80009ac:	e001      	b.n	80009b2 <GetSector+0x102>
  }
  else /*(Address < FLASH_END_ADDR) && (Address >= ADDR_FLASH_SECTOR_11))*/
  {
    sector = FLASH_SECTOR_11;  
 80009ae:	230b      	movs	r3, #11
 80009b0:	60fb      	str	r3, [r7, #12]
  }
  return sector;
 80009b2:	68fb      	ldr	r3, [r7, #12]
}
 80009b4:	4618      	mov	r0, r3
 80009b6:	3714      	adds	r7, #20
 80009b8:	46bd      	mov	sp, r7
 80009ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009be:	4770      	bx	lr
 80009c0:	08003fff 	.word	0x08003fff
 80009c4:	08007fff 	.word	0x08007fff
 80009c8:	0800bfff 	.word	0x0800bfff
 80009cc:	0800ffff 	.word	0x0800ffff
 80009d0:	0801ffff 	.word	0x0801ffff
 80009d4:	0803ffff 	.word	0x0803ffff
 80009d8:	0805ffff 	.word	0x0805ffff
 80009dc:	0807ffff 	.word	0x0807ffff
 80009e0:	0809ffff 	.word	0x0809ffff
 80009e4:	080bffff 	.word	0x080bffff
 80009e8:	080dffff 	.word	0x080dffff

080009ec <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80009ec:	b580      	push	{r7, lr}
 80009ee:	b082      	sub	sp, #8
 80009f0:	af00      	add	r7, sp, #0

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */

  HAL_Init();
 80009f2:	f000 fd93 	bl	800151c <HAL_Init>

  /* USER CODE BEGIN Init */
  flag = 0;
 80009f6:	4b29      	ldr	r3, [pc, #164]	; (8000a9c <main+0xb0>)
 80009f8:	2200      	movs	r2, #0
 80009fa:	701a      	strb	r2, [r3, #0]
  count=0;
 80009fc:	4b28      	ldr	r3, [pc, #160]	; (8000aa0 <main+0xb4>)
 80009fe:	2200      	movs	r2, #0
 8000a00:	701a      	strb	r2, [r3, #0]
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000a02:	f000 f861 	bl	8000ac8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000a06:	f000 f8e7 	bl	8000bd8 <MX_GPIO_Init>
  MX_USART6_UART_Init();
 8000a0a:	f000 f8bb 	bl	8000b84 <MX_USART6_UART_Init>
  /* USER CODE BEGIN 2 */
  //HAL_UART_Receive_IT(&huart6, (uint8_t *)aRxBuffer, 7);

  if(HAL_UART_Transmit(&huart6, "RESTART\r\n", 9, 10)==HAL_OK)
 8000a0e:	230a      	movs	r3, #10
 8000a10:	2209      	movs	r2, #9
 8000a12:	4924      	ldr	r1, [pc, #144]	; (8000aa4 <main+0xb8>)
 8000a14:	4824      	ldr	r0, [pc, #144]	; (8000aa8 <main+0xbc>)
 8000a16:	f002 f91a 	bl	8002c4e <HAL_UART_Transmit>
 8000a1a:	4603      	mov	r3, r0
 8000a1c:	2b00      	cmp	r3, #0
 8000a1e:	d104      	bne.n	8000a2a <main+0x3e>
  {
	  HAL_UART_Receive_IT(&huart6, (uint8_t *)aRxBuffer, 7);
 8000a20:	2207      	movs	r2, #7
 8000a22:	4922      	ldr	r1, [pc, #136]	; (8000aac <main+0xc0>)
 8000a24:	4820      	ldr	r0, [pc, #128]	; (8000aa8 <main+0xbc>)
 8000a26:	f002 fa51 	bl	8002ecc <HAL_UART_Receive_IT>
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  //HAL_GPIO_TogglePin(GPIOD,GPIO_PIN_14|GPIO_PIN_13);

	  if (flag ==1)
 8000a2a:	4b1c      	ldr	r3, [pc, #112]	; (8000a9c <main+0xb0>)
 8000a2c:	781b      	ldrb	r3, [r3, #0]
 8000a2e:	2b00      	cmp	r3, #0
 8000a30:	d004      	beq.n	8000a3c <main+0x50>
	  {
		  Main_Menu();
 8000a32:	f000 f9ef 	bl	8000e14 <Main_Menu>
		  flag = 0;
 8000a36:	4b19      	ldr	r3, [pc, #100]	; (8000a9c <main+0xb0>)
 8000a38:	2200      	movs	r2, #0
 8000a3a:	701a      	strb	r2, [r3, #0]
	  }
	  HAL_Delay(1000);
 8000a3c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000a40:	f000 fdde 	bl	8001600 <HAL_Delay>

	  if (flag==0)
 8000a44:	4b15      	ldr	r3, [pc, #84]	; (8000a9c <main+0xb0>)
 8000a46:	781b      	ldrb	r3, [r3, #0]
 8000a48:	f083 0301 	eor.w	r3, r3, #1
 8000a4c:	b2db      	uxtb	r3, r3
 8000a4e:	2b00      	cmp	r3, #0
 8000a50:	d0eb      	beq.n	8000a2a <main+0x3e>
	  {
		  uint32_t ramstart = (*(__IO uint32_t*) APPLICATION_ADDRESS) & 0x2FFE0000;
 8000a52:	4b17      	ldr	r3, [pc, #92]	; (8000ab0 <main+0xc4>)
 8000a54:	681a      	ldr	r2, [r3, #0]
 8000a56:	4b17      	ldr	r3, [pc, #92]	; (8000ab4 <main+0xc8>)
 8000a58:	4013      	ands	r3, r2
 8000a5a:	607b      	str	r3, [r7, #4]
		  if ( ramstart == 0x20020000 || ramstart == 0x20000000)
 8000a5c:	687b      	ldr	r3, [r7, #4]
 8000a5e:	4a16      	ldr	r2, [pc, #88]	; (8000ab8 <main+0xcc>)
 8000a60:	4293      	cmp	r3, r2
 8000a62:	d003      	beq.n	8000a6c <main+0x80>
 8000a64:	687b      	ldr	r3, [r7, #4]
 8000a66:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8000a6a:	d1de      	bne.n	8000a2a <main+0x3e>
		  {
			  JumpAddress = *(__IO uint32_t*) (APPLICATION_ADDRESS + 4);
 8000a6c:	4b13      	ldr	r3, [pc, #76]	; (8000abc <main+0xd0>)
 8000a6e:	681b      	ldr	r3, [r3, #0]
 8000a70:	4a13      	ldr	r2, [pc, #76]	; (8000ac0 <main+0xd4>)
 8000a72:	6013      	str	r3, [r2, #0]
			  JumpToApplication = (pFunction) JumpAddress;
 8000a74:	4b12      	ldr	r3, [pc, #72]	; (8000ac0 <main+0xd4>)
 8000a76:	681b      	ldr	r3, [r3, #0]
 8000a78:	461a      	mov	r2, r3
 8000a7a:	4b12      	ldr	r3, [pc, #72]	; (8000ac4 <main+0xd8>)
 8000a7c:	601a      	str	r2, [r3, #0]
			  __set_MSP(*(__IO uint32_t*) APPLICATION_ADDRESS);
 8000a7e:	4b0c      	ldr	r3, [pc, #48]	; (8000ab0 <main+0xc4>)
 8000a80:	681b      	ldr	r3, [r3, #0]
 8000a82:	603b      	str	r3, [r7, #0]
  \details Assigns the given value to the Main Stack Pointer (MSP).
  \param [in]    topOfMainStack  Main Stack Pointer value to set
 */
__STATIC_FORCEINLINE void __set_MSP(uint32_t topOfMainStack)
{
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
 8000a84:	683b      	ldr	r3, [r7, #0]
 8000a86:	f383 8808 	msr	MSP, r3
			  HAL_Delay(500);
 8000a8a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000a8e:	f000 fdb7 	bl	8001600 <HAL_Delay>
			  JumpToApplication();
 8000a92:	4b0c      	ldr	r3, [pc, #48]	; (8000ac4 <main+0xd8>)
 8000a94:	681b      	ldr	r3, [r3, #0]
 8000a96:	4798      	blx	r3
	  if (flag ==1)
 8000a98:	e7c7      	b.n	8000a2a <main+0x3e>
 8000a9a:	bf00      	nop
 8000a9c:	20000000 	.word	0x20000000
 8000aa0:	2000002c 	.word	0x2000002c
 8000aa4:	08003be0 	.word	0x08003be0
 8000aa8:	20000030 	.word	0x20000030
 8000aac:	20000070 	.word	0x20000070
 8000ab0:	08008000 	.word	0x08008000
 8000ab4:	2ffe0000 	.word	0x2ffe0000
 8000ab8:	20020000 	.word	0x20020000
 8000abc:	08008004 	.word	0x08008004
 8000ac0:	20000078 	.word	0x20000078
 8000ac4:	2000007c 	.word	0x2000007c

08000ac8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000ac8:	b580      	push	{r7, lr}
 8000aca:	b094      	sub	sp, #80	; 0x50
 8000acc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000ace:	f107 0320 	add.w	r3, r7, #32
 8000ad2:	2230      	movs	r2, #48	; 0x30
 8000ad4:	2100      	movs	r1, #0
 8000ad6:	4618      	mov	r0, r3
 8000ad8:	f003 f86e 	bl	8003bb8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000adc:	f107 030c 	add.w	r3, r7, #12
 8000ae0:	2200      	movs	r2, #0
 8000ae2:	601a      	str	r2, [r3, #0]
 8000ae4:	605a      	str	r2, [r3, #4]
 8000ae6:	609a      	str	r2, [r3, #8]
 8000ae8:	60da      	str	r2, [r3, #12]
 8000aea:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000aec:	2300      	movs	r3, #0
 8000aee:	60bb      	str	r3, [r7, #8]
 8000af0:	4b22      	ldr	r3, [pc, #136]	; (8000b7c <SystemClock_Config+0xb4>)
 8000af2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000af4:	4a21      	ldr	r2, [pc, #132]	; (8000b7c <SystemClock_Config+0xb4>)
 8000af6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000afa:	6413      	str	r3, [r2, #64]	; 0x40
 8000afc:	4b1f      	ldr	r3, [pc, #124]	; (8000b7c <SystemClock_Config+0xb4>)
 8000afe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b00:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b04:	60bb      	str	r3, [r7, #8]
 8000b06:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000b08:	2300      	movs	r3, #0
 8000b0a:	607b      	str	r3, [r7, #4]
 8000b0c:	4b1c      	ldr	r3, [pc, #112]	; (8000b80 <SystemClock_Config+0xb8>)
 8000b0e:	681b      	ldr	r3, [r3, #0]
 8000b10:	4a1b      	ldr	r2, [pc, #108]	; (8000b80 <SystemClock_Config+0xb8>)
 8000b12:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000b16:	6013      	str	r3, [r2, #0]
 8000b18:	4b19      	ldr	r3, [pc, #100]	; (8000b80 <SystemClock_Config+0xb8>)
 8000b1a:	681b      	ldr	r3, [r3, #0]
 8000b1c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000b20:	607b      	str	r3, [r7, #4]
 8000b22:	687b      	ldr	r3, [r7, #4]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000b24:	2302      	movs	r3, #2
 8000b26:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000b28:	2301      	movs	r3, #1
 8000b2a:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000b2c:	2310      	movs	r3, #16
 8000b2e:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000b30:	2300      	movs	r3, #0
 8000b32:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000b34:	f107 0320 	add.w	r3, r7, #32
 8000b38:	4618      	mov	r0, r3
 8000b3a:	f001 fbff 	bl	800233c <HAL_RCC_OscConfig>
 8000b3e:	4603      	mov	r3, r0
 8000b40:	2b00      	cmp	r3, #0
 8000b42:	d001      	beq.n	8000b48 <SystemClock_Config+0x80>
  {
    Error_Handler();
 8000b44:	f000 f8dc 	bl	8000d00 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000b48:	230f      	movs	r3, #15
 8000b4a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000b4c:	2300      	movs	r3, #0
 8000b4e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000b50:	2300      	movs	r3, #0
 8000b52:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000b54:	2300      	movs	r3, #0
 8000b56:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000b58:	2300      	movs	r3, #0
 8000b5a:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000b5c:	f107 030c 	add.w	r3, r7, #12
 8000b60:	2100      	movs	r1, #0
 8000b62:	4618      	mov	r0, r3
 8000b64:	f001 fe5a 	bl	800281c <HAL_RCC_ClockConfig>
 8000b68:	4603      	mov	r3, r0
 8000b6a:	2b00      	cmp	r3, #0
 8000b6c:	d001      	beq.n	8000b72 <SystemClock_Config+0xaa>
  {
    Error_Handler();
 8000b6e:	f000 f8c7 	bl	8000d00 <Error_Handler>
  }
}
 8000b72:	bf00      	nop
 8000b74:	3750      	adds	r7, #80	; 0x50
 8000b76:	46bd      	mov	sp, r7
 8000b78:	bd80      	pop	{r7, pc}
 8000b7a:	bf00      	nop
 8000b7c:	40023800 	.word	0x40023800
 8000b80:	40007000 	.word	0x40007000

08000b84 <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 8000b84:	b580      	push	{r7, lr}
 8000b86:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 8000b88:	4b11      	ldr	r3, [pc, #68]	; (8000bd0 <MX_USART6_UART_Init+0x4c>)
 8000b8a:	4a12      	ldr	r2, [pc, #72]	; (8000bd4 <MX_USART6_UART_Init+0x50>)
 8000b8c:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 8000b8e:	4b10      	ldr	r3, [pc, #64]	; (8000bd0 <MX_USART6_UART_Init+0x4c>)
 8000b90:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000b94:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 8000b96:	4b0e      	ldr	r3, [pc, #56]	; (8000bd0 <MX_USART6_UART_Init+0x4c>)
 8000b98:	2200      	movs	r2, #0
 8000b9a:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8000b9c:	4b0c      	ldr	r3, [pc, #48]	; (8000bd0 <MX_USART6_UART_Init+0x4c>)
 8000b9e:	2200      	movs	r2, #0
 8000ba0:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 8000ba2:	4b0b      	ldr	r3, [pc, #44]	; (8000bd0 <MX_USART6_UART_Init+0x4c>)
 8000ba4:	2200      	movs	r2, #0
 8000ba6:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8000ba8:	4b09      	ldr	r3, [pc, #36]	; (8000bd0 <MX_USART6_UART_Init+0x4c>)
 8000baa:	220c      	movs	r2, #12
 8000bac:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000bae:	4b08      	ldr	r3, [pc, #32]	; (8000bd0 <MX_USART6_UART_Init+0x4c>)
 8000bb0:	2200      	movs	r2, #0
 8000bb2:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8000bb4:	4b06      	ldr	r3, [pc, #24]	; (8000bd0 <MX_USART6_UART_Init+0x4c>)
 8000bb6:	2200      	movs	r2, #0
 8000bb8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 8000bba:	4805      	ldr	r0, [pc, #20]	; (8000bd0 <MX_USART6_UART_Init+0x4c>)
 8000bbc:	f001 fffa 	bl	8002bb4 <HAL_UART_Init>
 8000bc0:	4603      	mov	r3, r0
 8000bc2:	2b00      	cmp	r3, #0
 8000bc4:	d001      	beq.n	8000bca <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 8000bc6:	f000 f89b 	bl	8000d00 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 8000bca:	bf00      	nop
 8000bcc:	bd80      	pop	{r7, pc}
 8000bce:	bf00      	nop
 8000bd0:	20000030 	.word	0x20000030
 8000bd4:	40011400 	.word	0x40011400

08000bd8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000bd8:	b580      	push	{r7, lr}
 8000bda:	b088      	sub	sp, #32
 8000bdc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bde:	f107 030c 	add.w	r3, r7, #12
 8000be2:	2200      	movs	r2, #0
 8000be4:	601a      	str	r2, [r3, #0]
 8000be6:	605a      	str	r2, [r3, #4]
 8000be8:	609a      	str	r2, [r3, #8]
 8000bea:	60da      	str	r2, [r3, #12]
 8000bec:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000bee:	2300      	movs	r3, #0
 8000bf0:	60bb      	str	r3, [r7, #8]
 8000bf2:	4b26      	ldr	r3, [pc, #152]	; (8000c8c <MX_GPIO_Init+0xb4>)
 8000bf4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bf6:	4a25      	ldr	r2, [pc, #148]	; (8000c8c <MX_GPIO_Init+0xb4>)
 8000bf8:	f043 0301 	orr.w	r3, r3, #1
 8000bfc:	6313      	str	r3, [r2, #48]	; 0x30
 8000bfe:	4b23      	ldr	r3, [pc, #140]	; (8000c8c <MX_GPIO_Init+0xb4>)
 8000c00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c02:	f003 0301 	and.w	r3, r3, #1
 8000c06:	60bb      	str	r3, [r7, #8]
 8000c08:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000c0a:	2300      	movs	r3, #0
 8000c0c:	607b      	str	r3, [r7, #4]
 8000c0e:	4b1f      	ldr	r3, [pc, #124]	; (8000c8c <MX_GPIO_Init+0xb4>)
 8000c10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c12:	4a1e      	ldr	r2, [pc, #120]	; (8000c8c <MX_GPIO_Init+0xb4>)
 8000c14:	f043 0308 	orr.w	r3, r3, #8
 8000c18:	6313      	str	r3, [r2, #48]	; 0x30
 8000c1a:	4b1c      	ldr	r3, [pc, #112]	; (8000c8c <MX_GPIO_Init+0xb4>)
 8000c1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c1e:	f003 0308 	and.w	r3, r3, #8
 8000c22:	607b      	str	r3, [r7, #4]
 8000c24:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000c26:	2300      	movs	r3, #0
 8000c28:	603b      	str	r3, [r7, #0]
 8000c2a:	4b18      	ldr	r3, [pc, #96]	; (8000c8c <MX_GPIO_Init+0xb4>)
 8000c2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c2e:	4a17      	ldr	r2, [pc, #92]	; (8000c8c <MX_GPIO_Init+0xb4>)
 8000c30:	f043 0304 	orr.w	r3, r3, #4
 8000c34:	6313      	str	r3, [r2, #48]	; 0x30
 8000c36:	4b15      	ldr	r3, [pc, #84]	; (8000c8c <MX_GPIO_Init+0xb4>)
 8000c38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c3a:	f003 0304 	and.w	r3, r3, #4
 8000c3e:	603b      	str	r3, [r7, #0]
 8000c40:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);
 8000c42:	2200      	movs	r2, #0
 8000c44:	f44f 4140 	mov.w	r1, #49152	; 0xc000
 8000c48:	4811      	ldr	r0, [pc, #68]	; (8000c90 <MX_GPIO_Init+0xb8>)
 8000c4a:	f001 fb43 	bl	80022d4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000c4e:	2301      	movs	r3, #1
 8000c50:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000c52:	2300      	movs	r3, #0
 8000c54:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c56:	2300      	movs	r3, #0
 8000c58:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c5a:	f107 030c 	add.w	r3, r7, #12
 8000c5e:	4619      	mov	r1, r3
 8000c60:	480c      	ldr	r0, [pc, #48]	; (8000c94 <MX_GPIO_Init+0xbc>)
 8000c62:	f001 f99d 	bl	8001fa0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD14 PD15 */
  GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 8000c66:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8000c6a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c6c:	2301      	movs	r3, #1
 8000c6e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c70:	2300      	movs	r3, #0
 8000c72:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c74:	2300      	movs	r3, #0
 8000c76:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000c78:	f107 030c 	add.w	r3, r7, #12
 8000c7c:	4619      	mov	r1, r3
 8000c7e:	4804      	ldr	r0, [pc, #16]	; (8000c90 <MX_GPIO_Init+0xb8>)
 8000c80:	f001 f98e 	bl	8001fa0 <HAL_GPIO_Init>

}
 8000c84:	bf00      	nop
 8000c86:	3720      	adds	r7, #32
 8000c88:	46bd      	mov	sp, r7
 8000c8a:	bd80      	pop	{r7, pc}
 8000c8c:	40023800 	.word	0x40023800
 8000c90:	40020c00 	.word	0x40020c00
 8000c94:	40020000 	.word	0x40020000

08000c98 <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8000c98:	b580      	push	{r7, lr}
 8000c9a:	b082      	sub	sp, #8
 8000c9c:	af00      	add	r7, sp, #0
 8000c9e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  HAL_GPIO_TogglePin(GPIOD,GPIO_PIN_15);
 8000ca0:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000ca4:	4811      	ldr	r0, [pc, #68]	; (8000cec <HAL_UART_RxCpltCallback+0x54>)
 8000ca6:	f001 fb2e 	bl	8002306 <HAL_GPIO_TogglePin>
  if(aRxBuffer[0] == 'r' & aRxBuffer[6]=='t')
 8000caa:	4b11      	ldr	r3, [pc, #68]	; (8000cf0 <HAL_UART_RxCpltCallback+0x58>)
 8000cac:	781b      	ldrb	r3, [r3, #0]
 8000cae:	2b72      	cmp	r3, #114	; 0x72
 8000cb0:	bf0c      	ite	eq
 8000cb2:	2301      	moveq	r3, #1
 8000cb4:	2300      	movne	r3, #0
 8000cb6:	b2da      	uxtb	r2, r3
 8000cb8:	4b0d      	ldr	r3, [pc, #52]	; (8000cf0 <HAL_UART_RxCpltCallback+0x58>)
 8000cba:	799b      	ldrb	r3, [r3, #6]
 8000cbc:	2b74      	cmp	r3, #116	; 0x74
 8000cbe:	bf0c      	ite	eq
 8000cc0:	2301      	moveq	r3, #1
 8000cc2:	2300      	movne	r3, #0
 8000cc4:	b2db      	uxtb	r3, r3
 8000cc6:	4013      	ands	r3, r2
 8000cc8:	b2db      	uxtb	r3, r3
 8000cca:	2b00      	cmp	r3, #0
 8000ccc:	d009      	beq.n	8000ce2 <HAL_UART_RxCpltCallback+0x4a>
  {
	  HAL_UART_Transmit(&huart6, "IAP START", 9,0x2710);
 8000cce:	f242 7310 	movw	r3, #10000	; 0x2710
 8000cd2:	2209      	movs	r2, #9
 8000cd4:	4907      	ldr	r1, [pc, #28]	; (8000cf4 <HAL_UART_RxCpltCallback+0x5c>)
 8000cd6:	4808      	ldr	r0, [pc, #32]	; (8000cf8 <HAL_UART_RxCpltCallback+0x60>)
 8000cd8:	f001 ffb9 	bl	8002c4e <HAL_UART_Transmit>
	  flag=1;
 8000cdc:	4b07      	ldr	r3, [pc, #28]	; (8000cfc <HAL_UART_RxCpltCallback+0x64>)
 8000cde:	2201      	movs	r2, #1
 8000ce0:	701a      	strb	r2, [r3, #0]
*/




}
 8000ce2:	bf00      	nop
 8000ce4:	3708      	adds	r7, #8
 8000ce6:	46bd      	mov	sp, r7
 8000ce8:	bd80      	pop	{r7, pc}
 8000cea:	bf00      	nop
 8000cec:	40020c00 	.word	0x40020c00
 8000cf0:	20000070 	.word	0x20000070
 8000cf4:	08003bec 	.word	0x08003bec
 8000cf8:	20000030 	.word	0x20000030
 8000cfc:	20000000 	.word	0x20000000

08000d00 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000d00:	b480      	push	{r7}
 8000d02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000d04:	bf00      	nop
 8000d06:	46bd      	mov	sp, r7
 8000d08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d0c:	4770      	bx	lr
	...

08000d10 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 8000d10:	b480      	push	{r7}
 8000d12:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8000d14:	f3bf 8f4f 	dsb	sy
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8000d18:	4b05      	ldr	r3, [pc, #20]	; (8000d30 <__NVIC_SystemReset+0x20>)
 8000d1a:	68db      	ldr	r3, [r3, #12]
 8000d1c:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8000d20:	4903      	ldr	r1, [pc, #12]	; (8000d30 <__NVIC_SystemReset+0x20>)
 8000d22:	4b04      	ldr	r3, [pc, #16]	; (8000d34 <__NVIC_SystemReset+0x24>)
 8000d24:	4313      	orrs	r3, r2
 8000d26:	60cb      	str	r3, [r1, #12]
 8000d28:	f3bf 8f4f 	dsb	sy
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 8000d2c:	bf00      	nop
 8000d2e:	e7fd      	b.n	8000d2c <__NVIC_SystemReset+0x1c>
 8000d30:	e000ed00 	.word	0xe000ed00
 8000d34:	05fa0004 	.word	0x05fa0004

08000d38 <SerialDownload>:
  * @brief  Download a file via serial port
  * @param  None
  * @retval None
  */
void SerialDownload(void)
{
 8000d38:	b580      	push	{r7, lr}
 8000d3a:	b084      	sub	sp, #16
 8000d3c:	af00      	add	r7, sp, #0
  uint8_t number[11] = {0};
 8000d3e:	1d3b      	adds	r3, r7, #4
 8000d40:	2200      	movs	r2, #0
 8000d42:	601a      	str	r2, [r3, #0]
 8000d44:	605a      	str	r2, [r3, #4]
 8000d46:	f8c3 2007 	str.w	r2, [r3, #7]
  uint32_t size = 0;
 8000d4a:	2300      	movs	r3, #0
 8000d4c:	603b      	str	r3, [r7, #0]
  COM_StatusTypeDef result;
  HAL_Delay(300);
 8000d4e:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8000d52:	f000 fc55 	bl	8001600 <HAL_Delay>
  Serial_PutString((uint8_t *)"IAP processing\r\n");
 8000d56:	4825      	ldr	r0, [pc, #148]	; (8000dec <SerialDownload+0xb4>)
 8000d58:	f7ff fcfe 	bl	8000758 <Serial_PutString>
  HAL_Delay(500);
 8000d5c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000d60:	f000 fc4e 	bl	8001600 <HAL_Delay>
  result = Ymodem_Receive( &size );
 8000d64:	463b      	mov	r3, r7
 8000d66:	4618      	mov	r0, r3
 8000d68:	f000 fa86 	bl	8001278 <Ymodem_Receive>
 8000d6c:	4603      	mov	r3, r0
 8000d6e:	73fb      	strb	r3, [r7, #15]
  if (result == COM_OK)
 8000d70:	7bfb      	ldrb	r3, [r7, #15]
 8000d72:	2b00      	cmp	r3, #0
 8000d74:	d119      	bne.n	8000daa <SerialDownload+0x72>
  {
    Serial_PutString((uint8_t *)"\n\n\r Programming Completed Successfully!\n\r--------------------------------\r\n Name: ");
 8000d76:	481e      	ldr	r0, [pc, #120]	; (8000df0 <SerialDownload+0xb8>)
 8000d78:	f7ff fcee 	bl	8000758 <Serial_PutString>
    Serial_PutString(aFileName);
 8000d7c:	481d      	ldr	r0, [pc, #116]	; (8000df4 <SerialDownload+0xbc>)
 8000d7e:	f7ff fceb 	bl	8000758 <Serial_PutString>
    Int2Str(number, size);
 8000d82:	683a      	ldr	r2, [r7, #0]
 8000d84:	1d3b      	adds	r3, r7, #4
 8000d86:	4611      	mov	r1, r2
 8000d88:	4618      	mov	r0, r3
 8000d8a:	f7ff fb9d 	bl	80004c8 <Int2Str>
    Serial_PutString((uint8_t *)"\n\r Size: ");
 8000d8e:	481a      	ldr	r0, [pc, #104]	; (8000df8 <SerialDownload+0xc0>)
 8000d90:	f7ff fce2 	bl	8000758 <Serial_PutString>
    Serial_PutString(number);
 8000d94:	1d3b      	adds	r3, r7, #4
 8000d96:	4618      	mov	r0, r3
 8000d98:	f7ff fcde 	bl	8000758 <Serial_PutString>
    Serial_PutString((uint8_t *)" Bytes\r\n");
 8000d9c:	4817      	ldr	r0, [pc, #92]	; (8000dfc <SerialDownload+0xc4>)
 8000d9e:	f7ff fcdb 	bl	8000758 <Serial_PutString>
    Serial_PutString((uint8_t *)"-------------------\n");
 8000da2:	4817      	ldr	r0, [pc, #92]	; (8000e00 <SerialDownload+0xc8>)
 8000da4:	f7ff fcd8 	bl	8000758 <Serial_PutString>
  else
  {
    Serial_PutString((uint8_t *)"\n\rFailed to receive the file!\n\r");
    NVIC_SystemReset();
  }
}
 8000da8:	e01c      	b.n	8000de4 <SerialDownload+0xac>
  else if (result == COM_LIMIT)
 8000daa:	7bfb      	ldrb	r3, [r7, #15]
 8000dac:	2b05      	cmp	r3, #5
 8000dae:	d104      	bne.n	8000dba <SerialDownload+0x82>
    Serial_PutString((uint8_t *)"\n\n\rThe image size is higher than the allowed space memory!\n\r");
 8000db0:	4814      	ldr	r0, [pc, #80]	; (8000e04 <SerialDownload+0xcc>)
 8000db2:	f7ff fcd1 	bl	8000758 <Serial_PutString>
    NVIC_SystemReset();
 8000db6:	f7ff ffab 	bl	8000d10 <__NVIC_SystemReset>
  else if (result == COM_DATA)
 8000dba:	7bfb      	ldrb	r3, [r7, #15]
 8000dbc:	2b04      	cmp	r3, #4
 8000dbe:	d104      	bne.n	8000dca <SerialDownload+0x92>
    Serial_PutString((uint8_t *)"\n\n\rVerification failed!\n\r");
 8000dc0:	4811      	ldr	r0, [pc, #68]	; (8000e08 <SerialDownload+0xd0>)
 8000dc2:	f7ff fcc9 	bl	8000758 <Serial_PutString>
    NVIC_SystemReset();
 8000dc6:	f7ff ffa3 	bl	8000d10 <__NVIC_SystemReset>
  else if (result == COM_ABORT)
 8000dca:	7bfb      	ldrb	r3, [r7, #15]
 8000dcc:	2b02      	cmp	r3, #2
 8000dce:	d104      	bne.n	8000dda <SerialDownload+0xa2>
    Serial_PutString((uint8_t *)"\r\n\nAborted by user.\n\r");
 8000dd0:	480e      	ldr	r0, [pc, #56]	; (8000e0c <SerialDownload+0xd4>)
 8000dd2:	f7ff fcc1 	bl	8000758 <Serial_PutString>
    NVIC_SystemReset();
 8000dd6:	f7ff ff9b 	bl	8000d10 <__NVIC_SystemReset>
    Serial_PutString((uint8_t *)"\n\rFailed to receive the file!\n\r");
 8000dda:	480d      	ldr	r0, [pc, #52]	; (8000e10 <SerialDownload+0xd8>)
 8000ddc:	f7ff fcbc 	bl	8000758 <Serial_PutString>
    NVIC_SystemReset();
 8000de0:	f7ff ff96 	bl	8000d10 <__NVIC_SystemReset>
}
 8000de4:	3710      	adds	r7, #16
 8000de6:	46bd      	mov	sp, r7
 8000de8:	bd80      	pop	{r7, pc}
 8000dea:	bf00      	nop
 8000dec:	08003bf8 	.word	0x08003bf8
 8000df0:	08003c0c 	.word	0x08003c0c
 8000df4:	20000080 	.word	0x20000080
 8000df8:	08003c60 	.word	0x08003c60
 8000dfc:	08003c6c 	.word	0x08003c6c
 8000e00:	08003c78 	.word	0x08003c78
 8000e04:	08003c90 	.word	0x08003c90
 8000e08:	08003cd0 	.word	0x08003cd0
 8000e0c:	08003cec 	.word	0x08003cec
 8000e10:	08003d04 	.word	0x08003d04

08000e14 <Main_Menu>:
  * @brief  Display the Main Menu on HyperTerminal
  * @param  None
  * @retval None
  */
void Main_Menu(void)
{
 8000e14:	b580      	push	{r7, lr}
 8000e16:	b082      	sub	sp, #8
 8000e18:	af00      	add	r7, sp, #0

  uint8_t key = 0;
 8000e1a:	2300      	movs	r3, #0
 8000e1c:	71fb      	strb	r3, [r7, #7]
  HAL_Delay(500);
 8000e1e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000e22:	f000 fbed 	bl	8001600 <HAL_Delay>
  Serial_PutString((uint8_t *)"\r\n=                                                                    =");
  Serial_PutString((uint8_t *)"\r\n=                       By MCD Application Team                      =");
  Serial_PutString((uint8_t *)"\r\n======================================================================");
  Serial_PutString((uint8_t *)"\r\n\r\n");
  */
  Serial_PutString((uint8_t *)"\r\nUpload image from the internal Flash \r\n");
 8000e26:	4813      	ldr	r0, [pc, #76]	; (8000e74 <Main_Menu+0x60>)
 8000e28:	f7ff fc96 	bl	8000758 <Serial_PutString>
  SerialDownload();
 8000e2c:	f7ff ff84 	bl	8000d38 <SerialDownload>
  HAL_Delay(500);
 8000e30:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000e34:	f000 fbe4 	bl	8001600 <HAL_Delay>
  Serial_PutString((uint8_t *)"\r\nStart program execution\r\n");
 8000e38:	480f      	ldr	r0, [pc, #60]	; (8000e78 <Main_Menu+0x64>)
 8000e3a:	f7ff fc8d 	bl	8000758 <Serial_PutString>
  /* execute the new program */
  JumpAddress = *(__IO uint32_t*) (APPLICATION_ADDRESS + 4);
 8000e3e:	4b0f      	ldr	r3, [pc, #60]	; (8000e7c <Main_Menu+0x68>)
 8000e40:	681b      	ldr	r3, [r3, #0]
 8000e42:	4a0f      	ldr	r2, [pc, #60]	; (8000e80 <Main_Menu+0x6c>)
 8000e44:	6013      	str	r3, [r2, #0]
  /* Jump to user application */
  JumpToApplication = (pFunction) JumpAddress;
 8000e46:	4b0e      	ldr	r3, [pc, #56]	; (8000e80 <Main_Menu+0x6c>)
 8000e48:	681b      	ldr	r3, [r3, #0]
 8000e4a:	461a      	mov	r2, r3
 8000e4c:	4b0d      	ldr	r3, [pc, #52]	; (8000e84 <Main_Menu+0x70>)
 8000e4e:	601a      	str	r2, [r3, #0]
  /* Initialize user application's Stack Pointer */
  __set_MSP(*(__IO uint32_t*) APPLICATION_ADDRESS);
 8000e50:	4b0d      	ldr	r3, [pc, #52]	; (8000e88 <Main_Menu+0x74>)
 8000e52:	681b      	ldr	r3, [r3, #0]
 8000e54:	603b      	str	r3, [r7, #0]
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
 8000e56:	683b      	ldr	r3, [r7, #0]
 8000e58:	f383 8808 	msr	MSP, r3
  //__disable_irq();
  HAL_Delay(500);
 8000e5c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000e60:	f000 fbce 	bl	8001600 <HAL_Delay>
  JumpToApplication();
 8000e64:	4b07      	ldr	r3, [pc, #28]	; (8000e84 <Main_Menu+0x70>)
 8000e66:	681b      	ldr	r3, [r3, #0]
 8000e68:	4798      	blx	r3

}
 8000e6a:	bf00      	nop
 8000e6c:	3708      	adds	r7, #8
 8000e6e:	46bd      	mov	sp, r7
 8000e70:	bd80      	pop	{r7, pc}
 8000e72:	bf00      	nop
 8000e74:	08003da4 	.word	0x08003da4
 8000e78:	08003dd0 	.word	0x08003dd0
 8000e7c:	08008004 	.word	0x08008004
 8000e80:	20000078 	.word	0x20000078
 8000e84:	2000007c 	.word	0x2000007c
 8000e88:	08008000 	.word	0x08008000

08000e8c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000e8c:	b580      	push	{r7, lr}
 8000e8e:	b082      	sub	sp, #8
 8000e90:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000e92:	2300      	movs	r3, #0
 8000e94:	607b      	str	r3, [r7, #4]
 8000e96:	4b17      	ldr	r3, [pc, #92]	; (8000ef4 <HAL_MspInit+0x68>)
 8000e98:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e9a:	4a16      	ldr	r2, [pc, #88]	; (8000ef4 <HAL_MspInit+0x68>)
 8000e9c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000ea0:	6453      	str	r3, [r2, #68]	; 0x44
 8000ea2:	4b14      	ldr	r3, [pc, #80]	; (8000ef4 <HAL_MspInit+0x68>)
 8000ea4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ea6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000eaa:	607b      	str	r3, [r7, #4]
 8000eac:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000eae:	2300      	movs	r3, #0
 8000eb0:	603b      	str	r3, [r7, #0]
 8000eb2:	4b10      	ldr	r3, [pc, #64]	; (8000ef4 <HAL_MspInit+0x68>)
 8000eb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000eb6:	4a0f      	ldr	r2, [pc, #60]	; (8000ef4 <HAL_MspInit+0x68>)
 8000eb8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000ebc:	6413      	str	r3, [r2, #64]	; 0x40
 8000ebe:	4b0d      	ldr	r3, [pc, #52]	; (8000ef4 <HAL_MspInit+0x68>)
 8000ec0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ec2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000ec6:	603b      	str	r3, [r7, #0]
 8000ec8:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /* Peripheral interrupt init */
  /* FLASH_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(FLASH_IRQn, 0, 0);
 8000eca:	2200      	movs	r2, #0
 8000ecc:	2100      	movs	r1, #0
 8000ece:	2004      	movs	r0, #4
 8000ed0:	f000 fc93 	bl	80017fa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(FLASH_IRQn);
 8000ed4:	2004      	movs	r0, #4
 8000ed6:	f000 fcac 	bl	8001832 <HAL_NVIC_EnableIRQ>
  /* RCC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(RCC_IRQn, 0, 0);
 8000eda:	2200      	movs	r2, #0
 8000edc:	2100      	movs	r1, #0
 8000ede:	2005      	movs	r0, #5
 8000ee0:	f000 fc8b 	bl	80017fa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(RCC_IRQn);
 8000ee4:	2005      	movs	r0, #5
 8000ee6:	f000 fca4 	bl	8001832 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000eea:	bf00      	nop
 8000eec:	3708      	adds	r7, #8
 8000eee:	46bd      	mov	sp, r7
 8000ef0:	bd80      	pop	{r7, pc}
 8000ef2:	bf00      	nop
 8000ef4:	40023800 	.word	0x40023800

08000ef8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000ef8:	b580      	push	{r7, lr}
 8000efa:	b08a      	sub	sp, #40	; 0x28
 8000efc:	af00      	add	r7, sp, #0
 8000efe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f00:	f107 0314 	add.w	r3, r7, #20
 8000f04:	2200      	movs	r2, #0
 8000f06:	601a      	str	r2, [r3, #0]
 8000f08:	605a      	str	r2, [r3, #4]
 8000f0a:	609a      	str	r2, [r3, #8]
 8000f0c:	60da      	str	r2, [r3, #12]
 8000f0e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART6)
 8000f10:	687b      	ldr	r3, [r7, #4]
 8000f12:	681b      	ldr	r3, [r3, #0]
 8000f14:	4a1d      	ldr	r2, [pc, #116]	; (8000f8c <HAL_UART_MspInit+0x94>)
 8000f16:	4293      	cmp	r3, r2
 8000f18:	d133      	bne.n	8000f82 <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART6_MspInit 0 */

  /* USER CODE END USART6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART6_CLK_ENABLE();
 8000f1a:	2300      	movs	r3, #0
 8000f1c:	613b      	str	r3, [r7, #16]
 8000f1e:	4b1c      	ldr	r3, [pc, #112]	; (8000f90 <HAL_UART_MspInit+0x98>)
 8000f20:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f22:	4a1b      	ldr	r2, [pc, #108]	; (8000f90 <HAL_UART_MspInit+0x98>)
 8000f24:	f043 0320 	orr.w	r3, r3, #32
 8000f28:	6453      	str	r3, [r2, #68]	; 0x44
 8000f2a:	4b19      	ldr	r3, [pc, #100]	; (8000f90 <HAL_UART_MspInit+0x98>)
 8000f2c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f2e:	f003 0320 	and.w	r3, r3, #32
 8000f32:	613b      	str	r3, [r7, #16]
 8000f34:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000f36:	2300      	movs	r3, #0
 8000f38:	60fb      	str	r3, [r7, #12]
 8000f3a:	4b15      	ldr	r3, [pc, #84]	; (8000f90 <HAL_UART_MspInit+0x98>)
 8000f3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f3e:	4a14      	ldr	r2, [pc, #80]	; (8000f90 <HAL_UART_MspInit+0x98>)
 8000f40:	f043 0304 	orr.w	r3, r3, #4
 8000f44:	6313      	str	r3, [r2, #48]	; 0x30
 8000f46:	4b12      	ldr	r3, [pc, #72]	; (8000f90 <HAL_UART_MspInit+0x98>)
 8000f48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f4a:	f003 0304 	and.w	r3, r3, #4
 8000f4e:	60fb      	str	r3, [r7, #12]
 8000f50:	68fb      	ldr	r3, [r7, #12]
    /**USART6 GPIO Configuration    
    PC6     ------> USART6_TX
    PC7     ------> USART6_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000f52:	23c0      	movs	r3, #192	; 0xc0
 8000f54:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f56:	2302      	movs	r3, #2
 8000f58:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000f5a:	2301      	movs	r3, #1
 8000f5c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f5e:	2303      	movs	r3, #3
 8000f60:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8000f62:	2308      	movs	r3, #8
 8000f64:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000f66:	f107 0314 	add.w	r3, r7, #20
 8000f6a:	4619      	mov	r1, r3
 8000f6c:	4809      	ldr	r0, [pc, #36]	; (8000f94 <HAL_UART_MspInit+0x9c>)
 8000f6e:	f001 f817 	bl	8001fa0 <HAL_GPIO_Init>

    /* USART6 interrupt Init */
    HAL_NVIC_SetPriority(USART6_IRQn, 1, 0);
 8000f72:	2200      	movs	r2, #0
 8000f74:	2101      	movs	r1, #1
 8000f76:	2047      	movs	r0, #71	; 0x47
 8000f78:	f000 fc3f 	bl	80017fa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
 8000f7c:	2047      	movs	r0, #71	; 0x47
 8000f7e:	f000 fc58 	bl	8001832 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 8000f82:	bf00      	nop
 8000f84:	3728      	adds	r7, #40	; 0x28
 8000f86:	46bd      	mov	sp, r7
 8000f88:	bd80      	pop	{r7, pc}
 8000f8a:	bf00      	nop
 8000f8c:	40011400 	.word	0x40011400
 8000f90:	40023800 	.word	0x40023800
 8000f94:	40020800 	.word	0x40020800

08000f98 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000f98:	b480      	push	{r7}
 8000f9a:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000f9c:	bf00      	nop
 8000f9e:	46bd      	mov	sp, r7
 8000fa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fa4:	4770      	bx	lr

08000fa6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000fa6:	b480      	push	{r7}
 8000fa8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000faa:	e7fe      	b.n	8000faa <HardFault_Handler+0x4>

08000fac <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000fac:	b480      	push	{r7}
 8000fae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000fb0:	e7fe      	b.n	8000fb0 <MemManage_Handler+0x4>

08000fb2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000fb2:	b480      	push	{r7}
 8000fb4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000fb6:	e7fe      	b.n	8000fb6 <BusFault_Handler+0x4>

08000fb8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000fb8:	b480      	push	{r7}
 8000fba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000fbc:	e7fe      	b.n	8000fbc <UsageFault_Handler+0x4>

08000fbe <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000fbe:	b480      	push	{r7}
 8000fc0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000fc2:	bf00      	nop
 8000fc4:	46bd      	mov	sp, r7
 8000fc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fca:	4770      	bx	lr

08000fcc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000fcc:	b480      	push	{r7}
 8000fce:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000fd0:	bf00      	nop
 8000fd2:	46bd      	mov	sp, r7
 8000fd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fd8:	4770      	bx	lr

08000fda <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000fda:	b480      	push	{r7}
 8000fdc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000fde:	bf00      	nop
 8000fe0:	46bd      	mov	sp, r7
 8000fe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fe6:	4770      	bx	lr

08000fe8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000fe8:	b580      	push	{r7, lr}
 8000fea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000fec:	f000 fae8 	bl	80015c0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000ff0:	bf00      	nop
 8000ff2:	bd80      	pop	{r7, pc}

08000ff4 <FLASH_IRQHandler>:

/**
  * @brief This function handles Flash global interrupt.
  */
void FLASH_IRQHandler(void)
{
 8000ff4:	b580      	push	{r7, lr}
 8000ff6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FLASH_IRQn 0 */

  /* USER CODE END FLASH_IRQn 0 */
  HAL_FLASH_IRQHandler();
 8000ff8:	f000 fcac 	bl	8001954 <HAL_FLASH_IRQHandler>
  /* USER CODE BEGIN FLASH_IRQn 1 */

  /* USER CODE END FLASH_IRQn 1 */
}
 8000ffc:	bf00      	nop
 8000ffe:	bd80      	pop	{r7, pc}

08001000 <RCC_IRQHandler>:

/**
  * @brief This function handles RCC global interrupt.
  */
void RCC_IRQHandler(void)
{
 8001000:	b480      	push	{r7}
 8001002:	af00      	add	r7, sp, #0

  /* USER CODE END RCC_IRQn 0 */
  /* USER CODE BEGIN RCC_IRQn 1 */

  /* USER CODE END RCC_IRQn 1 */
}
 8001004:	bf00      	nop
 8001006:	46bd      	mov	sp, r7
 8001008:	f85d 7b04 	ldr.w	r7, [sp], #4
 800100c:	4770      	bx	lr
	...

08001010 <USART6_IRQHandler>:

/**
  * @brief This function handles USART6 global interrupt.
  */
void USART6_IRQHandler(void)
{
 8001010:	b580      	push	{r7, lr}
 8001012:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART6_IRQn 0 */

  /* USER CODE END USART6_IRQn 0 */
  HAL_UART_IRQHandler(&huart6);
 8001014:	4802      	ldr	r0, [pc, #8]	; (8001020 <USART6_IRQHandler+0x10>)
 8001016:	f001 ffaf 	bl	8002f78 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART6_IRQn 1 */

  /* USER CODE END USART6_IRQn 1 */
}
 800101a:	bf00      	nop
 800101c:	bd80      	pop	{r7, pc}
 800101e:	bf00      	nop
 8001020:	20000030 	.word	0x20000030

08001024 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001024:	b480      	push	{r7}
 8001026:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001028:	4b08      	ldr	r3, [pc, #32]	; (800104c <SystemInit+0x28>)
 800102a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800102e:	4a07      	ldr	r2, [pc, #28]	; (800104c <SystemInit+0x28>)
 8001030:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001034:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001038:	4b04      	ldr	r3, [pc, #16]	; (800104c <SystemInit+0x28>)
 800103a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800103e:	609a      	str	r2, [r3, #8]
#endif
}
 8001040:	bf00      	nop
 8001042:	46bd      	mov	sp, r7
 8001044:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001048:	4770      	bx	lr
 800104a:	bf00      	nop
 800104c:	e000ed00 	.word	0xe000ed00

08001050 <__NVIC_SystemReset>:
{
 8001050:	b480      	push	{r7}
 8001052:	af00      	add	r7, sp, #0
  __ASM volatile ("dsb 0xF":::"memory");
 8001054:	f3bf 8f4f 	dsb	sy
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8001058:	4b05      	ldr	r3, [pc, #20]	; (8001070 <__NVIC_SystemReset+0x20>)
 800105a:	68db      	ldr	r3, [r3, #12]
 800105c:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8001060:	4903      	ldr	r1, [pc, #12]	; (8001070 <__NVIC_SystemReset+0x20>)
 8001062:	4b04      	ldr	r3, [pc, #16]	; (8001074 <__NVIC_SystemReset+0x24>)
 8001064:	4313      	orrs	r3, r2
 8001066:	60cb      	str	r3, [r1, #12]
 8001068:	f3bf 8f4f 	dsb	sy
    __NOP();
 800106c:	bf00      	nop
 800106e:	e7fd      	b.n	800106c <__NVIC_SystemReset+0x1c>
 8001070:	e000ed00 	.word	0xe000ed00
 8001074:	05fa0004 	.word	0x05fa0004

08001078 <ReceivePacket>:
  * @param  timeout
  * @retval HAL_OK: normally return
  *         HAL_BUSY: abort by user
  */
static HAL_StatusTypeDef ReceivePacket(uint8_t *p_data, uint32_t *p_length, uint32_t timeout)
{
 8001078:	b580      	push	{r7, lr}
 800107a:	b088      	sub	sp, #32
 800107c:	af00      	add	r7, sp, #0
 800107e:	60f8      	str	r0, [r7, #12]
 8001080:	60b9      	str	r1, [r7, #8]
 8001082:	607a      	str	r2, [r7, #4]
  uint32_t crc;
  uint32_t packet_size = 0;
 8001084:	2300      	movs	r3, #0
 8001086:	61fb      	str	r3, [r7, #28]
  HAL_StatusTypeDef status;
  uint8_t char1;

  *p_length = 0;
 8001088:	68bb      	ldr	r3, [r7, #8]
 800108a:	2200      	movs	r2, #0
 800108c:	601a      	str	r2, [r3, #0]
  status = HAL_UART_Receive(&UartHandle, &char1, 1, timeout);
 800108e:	f107 0113 	add.w	r1, r7, #19
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	2201      	movs	r2, #1
 8001096:	4844      	ldr	r0, [pc, #272]	; (80011a8 <ReceivePacket+0x130>)
 8001098:	f001 fe72 	bl	8002d80 <HAL_UART_Receive>
 800109c:	4603      	mov	r3, r0
 800109e:	76fb      	strb	r3, [r7, #27]

  if (status == HAL_OK)
 80010a0:	7efb      	ldrb	r3, [r7, #27]
 80010a2:	2b00      	cmp	r3, #0
 80010a4:	d177      	bne.n	8001196 <ReceivePacket+0x11e>
  {
    switch (char1)
 80010a6:	7cfb      	ldrb	r3, [r7, #19]
 80010a8:	2b04      	cmp	r3, #4
 80010aa:	d02d      	beq.n	8001108 <ReceivePacket+0x90>
 80010ac:	2b04      	cmp	r3, #4
 80010ae:	dc04      	bgt.n	80010ba <ReceivePacket+0x42>
 80010b0:	2b01      	cmp	r3, #1
 80010b2:	d009      	beq.n	80010c8 <ReceivePacket+0x50>
 80010b4:	2b02      	cmp	r3, #2
 80010b6:	d00a      	beq.n	80010ce <ReceivePacket+0x56>
 80010b8:	e023      	b.n	8001102 <ReceivePacket+0x8a>
 80010ba:	2b41      	cmp	r3, #65	; 0x41
 80010bc:	d01e      	beq.n	80010fc <ReceivePacket+0x84>
 80010be:	2b61      	cmp	r3, #97	; 0x61
 80010c0:	d01c      	beq.n	80010fc <ReceivePacket+0x84>
 80010c2:	2b18      	cmp	r3, #24
 80010c4:	d007      	beq.n	80010d6 <ReceivePacket+0x5e>
 80010c6:	e01c      	b.n	8001102 <ReceivePacket+0x8a>
    {
      case SOH:
        packet_size = PACKET_SIZE;
 80010c8:	2380      	movs	r3, #128	; 0x80
 80010ca:	61fb      	str	r3, [r7, #28]
        break;
 80010cc:	e01d      	b.n	800110a <ReceivePacket+0x92>
      case STX:
        packet_size = PACKET_1K_SIZE;
 80010ce:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80010d2:	61fb      	str	r3, [r7, #28]
        break;
 80010d4:	e019      	b.n	800110a <ReceivePacket+0x92>
      case EOT:
        break;
      case CA:
        if ((HAL_UART_Receive(&UartHandle, &char1, 1, timeout) == HAL_OK) && (char1 == CA))
 80010d6:	f107 0113 	add.w	r1, r7, #19
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	2201      	movs	r2, #1
 80010de:	4832      	ldr	r0, [pc, #200]	; (80011a8 <ReceivePacket+0x130>)
 80010e0:	f001 fe4e 	bl	8002d80 <HAL_UART_Receive>
 80010e4:	4603      	mov	r3, r0
 80010e6:	2b00      	cmp	r3, #0
 80010e8:	d105      	bne.n	80010f6 <ReceivePacket+0x7e>
 80010ea:	7cfb      	ldrb	r3, [r7, #19]
 80010ec:	2b18      	cmp	r3, #24
 80010ee:	d102      	bne.n	80010f6 <ReceivePacket+0x7e>
        {
          packet_size = 2;
 80010f0:	2302      	movs	r3, #2
 80010f2:	61fb      	str	r3, [r7, #28]
        }
        else
        {
          status = HAL_ERROR;
        }
        break;
 80010f4:	e009      	b.n	800110a <ReceivePacket+0x92>
          status = HAL_ERROR;
 80010f6:	2301      	movs	r3, #1
 80010f8:	76fb      	strb	r3, [r7, #27]
        break;
 80010fa:	e006      	b.n	800110a <ReceivePacket+0x92>
      case ABORT1:
      case ABORT2:
        status = HAL_BUSY;
 80010fc:	2302      	movs	r3, #2
 80010fe:	76fb      	strb	r3, [r7, #27]
        break;
 8001100:	e003      	b.n	800110a <ReceivePacket+0x92>
      default:
        status = HAL_ERROR;
 8001102:	2301      	movs	r3, #1
 8001104:	76fb      	strb	r3, [r7, #27]
        break;
 8001106:	e000      	b.n	800110a <ReceivePacket+0x92>
        break;
 8001108:	bf00      	nop
    }
    *p_data = char1;
 800110a:	7cfa      	ldrb	r2, [r7, #19]
 800110c:	68fb      	ldr	r3, [r7, #12]
 800110e:	701a      	strb	r2, [r3, #0]

    if (packet_size >= PACKET_SIZE )
 8001110:	69fb      	ldr	r3, [r7, #28]
 8001112:	2b7f      	cmp	r3, #127	; 0x7f
 8001114:	d93f      	bls.n	8001196 <ReceivePacket+0x11e>
    {
      status = HAL_UART_Receive(&UartHandle, &p_data[PACKET_NUMBER_INDEX], packet_size + PACKET_OVERHEAD_SIZE, timeout);
 8001116:	68fb      	ldr	r3, [r7, #12]
 8001118:	1c99      	adds	r1, r3, #2
 800111a:	69fb      	ldr	r3, [r7, #28]
 800111c:	b29b      	uxth	r3, r3
 800111e:	3304      	adds	r3, #4
 8001120:	b29a      	uxth	r2, r3
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	4820      	ldr	r0, [pc, #128]	; (80011a8 <ReceivePacket+0x130>)
 8001126:	f001 fe2b 	bl	8002d80 <HAL_UART_Receive>
 800112a:	4603      	mov	r3, r0
 800112c:	76fb      	strb	r3, [r7, #27]

      /* Simple packet sanity check */
      if (status == HAL_OK )
 800112e:	7efb      	ldrb	r3, [r7, #27]
 8001130:	2b00      	cmp	r3, #0
 8001132:	d12e      	bne.n	8001192 <ReceivePacket+0x11a>
      {
        if (p_data[PACKET_NUMBER_INDEX] != ((p_data[PACKET_CNUMBER_INDEX]) ^ NEGATIVE_BYTE))
 8001134:	68fb      	ldr	r3, [r7, #12]
 8001136:	3302      	adds	r3, #2
 8001138:	781a      	ldrb	r2, [r3, #0]
 800113a:	68fb      	ldr	r3, [r7, #12]
 800113c:	3303      	adds	r3, #3
 800113e:	781b      	ldrb	r3, [r3, #0]
 8001140:	43db      	mvns	r3, r3
 8001142:	b2db      	uxtb	r3, r3
 8001144:	429a      	cmp	r2, r3
 8001146:	d004      	beq.n	8001152 <ReceivePacket+0xda>
        {
          packet_size = 0;
 8001148:	2300      	movs	r3, #0
 800114a:	61fb      	str	r3, [r7, #28]
          status = HAL_ERROR;
 800114c:	2301      	movs	r3, #1
 800114e:	76fb      	strb	r3, [r7, #27]
 8001150:	e021      	b.n	8001196 <ReceivePacket+0x11e>
        }
        else
        {
          /* Check packet CRC */
          crc = p_data[ packet_size + PACKET_DATA_INDEX ] << 8;
 8001152:	69fb      	ldr	r3, [r7, #28]
 8001154:	3304      	adds	r3, #4
 8001156:	68fa      	ldr	r2, [r7, #12]
 8001158:	4413      	add	r3, r2
 800115a:	781b      	ldrb	r3, [r3, #0]
 800115c:	021b      	lsls	r3, r3, #8
 800115e:	617b      	str	r3, [r7, #20]
          crc += p_data[ packet_size + PACKET_DATA_INDEX + 1 ];
 8001160:	69fb      	ldr	r3, [r7, #28]
 8001162:	3305      	adds	r3, #5
 8001164:	68fa      	ldr	r2, [r7, #12]
 8001166:	4413      	add	r3, r2
 8001168:	781b      	ldrb	r3, [r3, #0]
 800116a:	461a      	mov	r2, r3
 800116c:	697b      	ldr	r3, [r7, #20]
 800116e:	4413      	add	r3, r2
 8001170:	617b      	str	r3, [r7, #20]
          if (Cal_CRC16(&p_data[PACKET_DATA_INDEX], packet_size) != crc )
 8001172:	68fb      	ldr	r3, [r7, #12]
 8001174:	3304      	adds	r3, #4
 8001176:	69f9      	ldr	r1, [r7, #28]
 8001178:	4618      	mov	r0, r3
 800117a:	f000 f84b 	bl	8001214 <Cal_CRC16>
 800117e:	4603      	mov	r3, r0
 8001180:	461a      	mov	r2, r3
 8001182:	697b      	ldr	r3, [r7, #20]
 8001184:	4293      	cmp	r3, r2
 8001186:	d006      	beq.n	8001196 <ReceivePacket+0x11e>
          {
            packet_size = 0;
 8001188:	2300      	movs	r3, #0
 800118a:	61fb      	str	r3, [r7, #28]
            status = HAL_ERROR;
 800118c:	2301      	movs	r3, #1
 800118e:	76fb      	strb	r3, [r7, #27]
 8001190:	e001      	b.n	8001196 <ReceivePacket+0x11e>
          }
        }
      }
      else
      {
        packet_size = 0;
 8001192:	2300      	movs	r3, #0
 8001194:	61fb      	str	r3, [r7, #28]
      }
    }
  }
  *p_length = packet_size;
 8001196:	68bb      	ldr	r3, [r7, #8]
 8001198:	69fa      	ldr	r2, [r7, #28]
 800119a:	601a      	str	r2, [r3, #0]
  return status;
 800119c:	7efb      	ldrb	r3, [r7, #27]
}
 800119e:	4618      	mov	r0, r3
 80011a0:	3720      	adds	r7, #32
 80011a2:	46bd      	mov	sp, r7
 80011a4:	bd80      	pop	{r7, pc}
 80011a6:	bf00      	nop
 80011a8:	20000030 	.word	0x20000030

080011ac <UpdateCRC16>:
  * @param  crc_in input value 
  * @param  input byte
  * @retval None
  */
uint16_t UpdateCRC16(uint16_t crc_in, uint8_t byte)
{
 80011ac:	b480      	push	{r7}
 80011ae:	b085      	sub	sp, #20
 80011b0:	af00      	add	r7, sp, #0
 80011b2:	4603      	mov	r3, r0
 80011b4:	460a      	mov	r2, r1
 80011b6:	80fb      	strh	r3, [r7, #6]
 80011b8:	4613      	mov	r3, r2
 80011ba:	717b      	strb	r3, [r7, #5]
  uint32_t crc = crc_in;
 80011bc:	88fb      	ldrh	r3, [r7, #6]
 80011be:	60fb      	str	r3, [r7, #12]
  uint32_t in = byte | 0x100;
 80011c0:	797b      	ldrb	r3, [r7, #5]
 80011c2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80011c6:	60bb      	str	r3, [r7, #8]

  do
  {
    crc <<= 1;
 80011c8:	68fb      	ldr	r3, [r7, #12]
 80011ca:	005b      	lsls	r3, r3, #1
 80011cc:	60fb      	str	r3, [r7, #12]
    in <<= 1;
 80011ce:	68bb      	ldr	r3, [r7, #8]
 80011d0:	005b      	lsls	r3, r3, #1
 80011d2:	60bb      	str	r3, [r7, #8]
    if(in & 0x100)
 80011d4:	68bb      	ldr	r3, [r7, #8]
 80011d6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80011da:	2b00      	cmp	r3, #0
 80011dc:	d002      	beq.n	80011e4 <UpdateCRC16+0x38>
      ++crc;
 80011de:	68fb      	ldr	r3, [r7, #12]
 80011e0:	3301      	adds	r3, #1
 80011e2:	60fb      	str	r3, [r7, #12]
    if(crc & 0x10000)
 80011e4:	68fb      	ldr	r3, [r7, #12]
 80011e6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80011ea:	2b00      	cmp	r3, #0
 80011ec:	d005      	beq.n	80011fa <UpdateCRC16+0x4e>
      crc ^= 0x1021;
 80011ee:	68fb      	ldr	r3, [r7, #12]
 80011f0:	f483 5381 	eor.w	r3, r3, #4128	; 0x1020
 80011f4:	f083 0301 	eor.w	r3, r3, #1
 80011f8:	60fb      	str	r3, [r7, #12]
  }
  
  while(!(in & 0x10000));
 80011fa:	68bb      	ldr	r3, [r7, #8]
 80011fc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001200:	2b00      	cmp	r3, #0
 8001202:	d0e1      	beq.n	80011c8 <UpdateCRC16+0x1c>

  return crc & 0xffffu;
 8001204:	68fb      	ldr	r3, [r7, #12]
 8001206:	b29b      	uxth	r3, r3
}
 8001208:	4618      	mov	r0, r3
 800120a:	3714      	adds	r7, #20
 800120c:	46bd      	mov	sp, r7
 800120e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001212:	4770      	bx	lr

08001214 <Cal_CRC16>:
  * @param  data
  * @param  length
  * @retval None
  */
uint16_t Cal_CRC16(const uint8_t* p_data, uint32_t size)
{
 8001214:	b580      	push	{r7, lr}
 8001216:	b084      	sub	sp, #16
 8001218:	af00      	add	r7, sp, #0
 800121a:	6078      	str	r0, [r7, #4]
 800121c:	6039      	str	r1, [r7, #0]
  uint32_t crc = 0;
 800121e:	2300      	movs	r3, #0
 8001220:	60fb      	str	r3, [r7, #12]
  const uint8_t* dataEnd = p_data+size;
 8001222:	687a      	ldr	r2, [r7, #4]
 8001224:	683b      	ldr	r3, [r7, #0]
 8001226:	4413      	add	r3, r2
 8001228:	60bb      	str	r3, [r7, #8]

  while(p_data < dataEnd)
 800122a:	e00a      	b.n	8001242 <Cal_CRC16+0x2e>
    crc = UpdateCRC16(crc, *p_data++);
 800122c:	68fb      	ldr	r3, [r7, #12]
 800122e:	b298      	uxth	r0, r3
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	1c5a      	adds	r2, r3, #1
 8001234:	607a      	str	r2, [r7, #4]
 8001236:	781b      	ldrb	r3, [r3, #0]
 8001238:	4619      	mov	r1, r3
 800123a:	f7ff ffb7 	bl	80011ac <UpdateCRC16>
 800123e:	4603      	mov	r3, r0
 8001240:	60fb      	str	r3, [r7, #12]
  while(p_data < dataEnd)
 8001242:	687a      	ldr	r2, [r7, #4]
 8001244:	68bb      	ldr	r3, [r7, #8]
 8001246:	429a      	cmp	r2, r3
 8001248:	d3f0      	bcc.n	800122c <Cal_CRC16+0x18>
 
  crc = UpdateCRC16(crc, 0);
 800124a:	68fb      	ldr	r3, [r7, #12]
 800124c:	b29b      	uxth	r3, r3
 800124e:	2100      	movs	r1, #0
 8001250:	4618      	mov	r0, r3
 8001252:	f7ff ffab 	bl	80011ac <UpdateCRC16>
 8001256:	4603      	mov	r3, r0
 8001258:	60fb      	str	r3, [r7, #12]
  crc = UpdateCRC16(crc, 0);
 800125a:	68fb      	ldr	r3, [r7, #12]
 800125c:	b29b      	uxth	r3, r3
 800125e:	2100      	movs	r1, #0
 8001260:	4618      	mov	r0, r3
 8001262:	f7ff ffa3 	bl	80011ac <UpdateCRC16>
 8001266:	4603      	mov	r3, r0
 8001268:	60fb      	str	r3, [r7, #12]

  return crc&0xffffu;
 800126a:	68fb      	ldr	r3, [r7, #12]
 800126c:	b29b      	uxth	r3, r3
}
 800126e:	4618      	mov	r0, r3
 8001270:	3710      	adds	r7, #16
 8001272:	46bd      	mov	sp, r7
 8001274:	bd80      	pop	{r7, pc}
	...

08001278 <Ymodem_Receive>:
  * @brief  Receive a file using the ymodem protocol with CRC16.
  * @param  p_size The size of the file.
  * @retval COM_StatusTypeDef result of reception/programming
  */
COM_StatusTypeDef Ymodem_Receive ( uint32_t *p_size )
{
 8001278:	b580      	push	{r7, lr}
 800127a:	b092      	sub	sp, #72	; 0x48
 800127c:	af00      	add	r7, sp, #0
 800127e:	6078      	str	r0, [r7, #4]
  uint32_t i, packet_length, session_done = 0, file_done, errors = 0, session_begin = 0;
 8001280:	2300      	movs	r3, #0
 8001282:	643b      	str	r3, [r7, #64]	; 0x40
 8001284:	2300      	movs	r3, #0
 8001286:	63bb      	str	r3, [r7, #56]	; 0x38
 8001288:	2300      	movs	r3, #0
 800128a:	637b      	str	r3, [r7, #52]	; 0x34
 // uint32_t flashdestination;
  uint32_t ramsource, filesize, packets_received;
  uint8_t *file_ptr;
  uint8_t file_size[FILE_SIZE_LENGTH], tmp;
  COM_StatusTypeDef result = COM_OK;
 800128c:	2300      	movs	r3, #0
 800128e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Initialize flashdestination variable */
  flashdestination = APPLICATION_ADDRESS;
 8001292:	4b86      	ldr	r3, [pc, #536]	; (80014ac <Ymodem_Receive+0x234>)
 8001294:	4a86      	ldr	r2, [pc, #536]	; (80014b0 <Ymodem_Receive+0x238>)
 8001296:	601a      	str	r2, [r3, #0]

  while ((session_done == 0) && (result == COM_OK))
 8001298:	e0fa      	b.n	8001490 <Ymodem_Receive+0x218>
  {
    packets_received = 0;
 800129a:	2300      	movs	r3, #0
 800129c:	633b      	str	r3, [r7, #48]	; 0x30
    file_done = 0;
 800129e:	2300      	movs	r3, #0
 80012a0:	63fb      	str	r3, [r7, #60]	; 0x3c
    while ((file_done == 0) && (result == COM_OK))
 80012a2:	e0ed      	b.n	8001480 <Ymodem_Receive+0x208>
    {
      switch (ReceivePacket(aPacketData, &packet_length, DOWNLOAD_TIMEOUT))
 80012a4:	f107 0320 	add.w	r3, r7, #32
 80012a8:	f241 3288 	movw	r2, #5000	; 0x1388
 80012ac:	4619      	mov	r1, r3
 80012ae:	4881      	ldr	r0, [pc, #516]	; (80014b4 <Ymodem_Receive+0x23c>)
 80012b0:	f7ff fee2 	bl	8001078 <ReceivePacket>
 80012b4:	4603      	mov	r3, r0
 80012b6:	2b00      	cmp	r3, #0
 80012b8:	d003      	beq.n	80012c2 <Ymodem_Receive+0x4a>
 80012ba:	2b02      	cmp	r3, #2
 80012bc:	f000 80c1 	beq.w	8001442 <Ymodem_Receive+0x1ca>
 80012c0:	e0c9      	b.n	8001456 <Ymodem_Receive+0x1de>
      {
        case HAL_OK:
          errors = 0;
 80012c2:	2300      	movs	r3, #0
 80012c4:	63bb      	str	r3, [r7, #56]	; 0x38
          switch (packet_length)
 80012c6:	6a3b      	ldr	r3, [r7, #32]
 80012c8:	2b00      	cmp	r3, #0
 80012ca:	d008      	beq.n	80012de <Ymodem_Receive+0x66>
 80012cc:	2b02      	cmp	r3, #2
 80012ce:	d10c      	bne.n	80012ea <Ymodem_Receive+0x72>
          {
            case 2:
              /* Abort by sender */
              Serial_PutByte(ACK);
 80012d0:	2006      	movs	r0, #6
 80012d2:	f7ff fa61 	bl	8000798 <Serial_PutByte>
              result = COM_ABORT;
 80012d6:	2302      	movs	r3, #2
 80012d8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
              break;
 80012dc:	e0b0      	b.n	8001440 <Ymodem_Receive+0x1c8>
            case 0:
              /* End of transmission */
              Serial_PutByte(ACK);
 80012de:	2006      	movs	r0, #6
 80012e0:	f7ff fa5a 	bl	8000798 <Serial_PutByte>
              file_done = 1;
 80012e4:	2301      	movs	r3, #1
 80012e6:	63fb      	str	r3, [r7, #60]	; 0x3c
              break;
 80012e8:	e0aa      	b.n	8001440 <Ymodem_Receive+0x1c8>
            default:
              /* Normal packet */
              if (aPacketData[PACKET_NUMBER_INDEX] != (uint8_t)packets_received)
 80012ea:	4b72      	ldr	r3, [pc, #456]	; (80014b4 <Ymodem_Receive+0x23c>)
 80012ec:	789a      	ldrb	r2, [r3, #2]
 80012ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80012f0:	b2db      	uxtb	r3, r3
 80012f2:	429a      	cmp	r2, r3
 80012f4:	d003      	beq.n	80012fe <Ymodem_Receive+0x86>
              {
                Serial_PutByte(NAK);
 80012f6:	2015      	movs	r0, #21
 80012f8:	f7ff fa4e 	bl	8000798 <Serial_PutByte>
                  }
                }
                packets_received ++;
                session_begin = 1;
              }
              break;
 80012fc:	e09f      	b.n	800143e <Ymodem_Receive+0x1c6>
                if (packets_received == 0)
 80012fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001300:	2b00      	cmp	r3, #0
 8001302:	d177      	bne.n	80013f4 <Ymodem_Receive+0x17c>
                  if (aPacketData[PACKET_DATA_INDEX] != 0)
 8001304:	4b6b      	ldr	r3, [pc, #428]	; (80014b4 <Ymodem_Receive+0x23c>)
 8001306:	791b      	ldrb	r3, [r3, #4]
 8001308:	2b00      	cmp	r3, #0
 800130a:	d06b      	beq.n	80013e4 <Ymodem_Receive+0x16c>
                    i = 0;
 800130c:	2300      	movs	r3, #0
 800130e:	647b      	str	r3, [r7, #68]	; 0x44
                    file_ptr = aPacketData + PACKET_DATA_INDEX;
 8001310:	4b69      	ldr	r3, [pc, #420]	; (80014b8 <Ymodem_Receive+0x240>)
 8001312:	62fb      	str	r3, [r7, #44]	; 0x2c
                    while ( (*file_ptr != 0) && (i < FILE_NAME_LENGTH))
 8001314:	e008      	b.n	8001328 <Ymodem_Receive+0xb0>
                      aFileName[i++] = *file_ptr++;
 8001316:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001318:	1c53      	adds	r3, r2, #1
 800131a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800131c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800131e:	1c59      	adds	r1, r3, #1
 8001320:	6479      	str	r1, [r7, #68]	; 0x44
 8001322:	7811      	ldrb	r1, [r2, #0]
 8001324:	4a65      	ldr	r2, [pc, #404]	; (80014bc <Ymodem_Receive+0x244>)
 8001326:	54d1      	strb	r1, [r2, r3]
                    while ( (*file_ptr != 0) && (i < FILE_NAME_LENGTH))
 8001328:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800132a:	781b      	ldrb	r3, [r3, #0]
 800132c:	2b00      	cmp	r3, #0
 800132e:	d002      	beq.n	8001336 <Ymodem_Receive+0xbe>
 8001330:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001332:	2b3f      	cmp	r3, #63	; 0x3f
 8001334:	d9ef      	bls.n	8001316 <Ymodem_Receive+0x9e>
                    aFileName[i++] = '\0';
 8001336:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001338:	1c5a      	adds	r2, r3, #1
 800133a:	647a      	str	r2, [r7, #68]	; 0x44
 800133c:	4a5f      	ldr	r2, [pc, #380]	; (80014bc <Ymodem_Receive+0x244>)
 800133e:	2100      	movs	r1, #0
 8001340:	54d1      	strb	r1, [r2, r3]
                    i = 0;
 8001342:	2300      	movs	r3, #0
 8001344:	647b      	str	r3, [r7, #68]	; 0x44
                    file_ptr ++;
 8001346:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001348:	3301      	adds	r3, #1
 800134a:	62fb      	str	r3, [r7, #44]	; 0x2c
                    while ( (*file_ptr != ' ') && (i < FILE_SIZE_LENGTH))
 800134c:	e00b      	b.n	8001366 <Ymodem_Receive+0xee>
                      file_size[i++] = *file_ptr++;
 800134e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001350:	1c53      	adds	r3, r2, #1
 8001352:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001354:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001356:	1c59      	adds	r1, r3, #1
 8001358:	6479      	str	r1, [r7, #68]	; 0x44
 800135a:	7812      	ldrb	r2, [r2, #0]
 800135c:	f107 0148 	add.w	r1, r7, #72	; 0x48
 8001360:	440b      	add	r3, r1
 8001362:	f803 2c3c 	strb.w	r2, [r3, #-60]
                    while ( (*file_ptr != ' ') && (i < FILE_SIZE_LENGTH))
 8001366:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001368:	781b      	ldrb	r3, [r3, #0]
 800136a:	2b20      	cmp	r3, #32
 800136c:	d002      	beq.n	8001374 <Ymodem_Receive+0xfc>
 800136e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001370:	2b0f      	cmp	r3, #15
 8001372:	d9ec      	bls.n	800134e <Ymodem_Receive+0xd6>
                    file_size[i++] = '\0';
 8001374:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001376:	1c5a      	adds	r2, r3, #1
 8001378:	647a      	str	r2, [r7, #68]	; 0x44
 800137a:	f107 0248 	add.w	r2, r7, #72	; 0x48
 800137e:	4413      	add	r3, r2
 8001380:	2200      	movs	r2, #0
 8001382:	f803 2c3c 	strb.w	r2, [r3, #-60]
                    Str2Int(file_size, &filesize);
 8001386:	f107 021c 	add.w	r2, r7, #28
 800138a:	f107 030c 	add.w	r3, r7, #12
 800138e:	4611      	mov	r1, r2
 8001390:	4618      	mov	r0, r3
 8001392:	f7ff f8ed 	bl	8000570 <Str2Int>
                    if (*p_size > (USER_FLASH_SIZE + 1))
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	681b      	ldr	r3, [r3, #0]
 800139a:	4a49      	ldr	r2, [pc, #292]	; (80014c0 <Ymodem_Receive+0x248>)
 800139c:	4293      	cmp	r3, r2
 800139e:	d914      	bls.n	80013ca <Ymodem_Receive+0x152>
                      tmp = CA;
 80013a0:	2318      	movs	r3, #24
 80013a2:	72fb      	strb	r3, [r7, #11]
                      HAL_UART_Transmit(&UartHandle, &tmp, 1, NAK_TIMEOUT);
 80013a4:	f107 010b 	add.w	r1, r7, #11
 80013a8:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80013ac:	2201      	movs	r2, #1
 80013ae:	4845      	ldr	r0, [pc, #276]	; (80014c4 <Ymodem_Receive+0x24c>)
 80013b0:	f001 fc4d 	bl	8002c4e <HAL_UART_Transmit>
                      HAL_UART_Transmit(&UartHandle, &tmp, 1, NAK_TIMEOUT);
 80013b4:	f107 010b 	add.w	r1, r7, #11
 80013b8:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80013bc:	2201      	movs	r2, #1
 80013be:	4841      	ldr	r0, [pc, #260]	; (80014c4 <Ymodem_Receive+0x24c>)
 80013c0:	f001 fc45 	bl	8002c4e <HAL_UART_Transmit>
                      result = COM_LIMIT;
 80013c4:	2305      	movs	r3, #5
 80013c6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
                    FLASH_If_Erase(APPLICATION_ADDRESS);
 80013ca:	4839      	ldr	r0, [pc, #228]	; (80014b0 <Ymodem_Receive+0x238>)
 80013cc:	f7ff fa0c 	bl	80007e8 <FLASH_If_Erase>
                    *p_size = filesize;
 80013d0:	69fa      	ldr	r2, [r7, #28]
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	601a      	str	r2, [r3, #0]
                    Serial_PutByte(ACK);
 80013d6:	2006      	movs	r0, #6
 80013d8:	f7ff f9de 	bl	8000798 <Serial_PutByte>
                    Serial_PutByte(CRC16);
 80013dc:	2043      	movs	r0, #67	; 0x43
 80013de:	f7ff f9db 	bl	8000798 <Serial_PutByte>
 80013e2:	e027      	b.n	8001434 <Ymodem_Receive+0x1bc>
                    Serial_PutByte(ACK);
 80013e4:	2006      	movs	r0, #6
 80013e6:	f7ff f9d7 	bl	8000798 <Serial_PutByte>
                    file_done = 1;
 80013ea:	2301      	movs	r3, #1
 80013ec:	63fb      	str	r3, [r7, #60]	; 0x3c
                    session_done = 1;
 80013ee:	2301      	movs	r3, #1
 80013f0:	643b      	str	r3, [r7, #64]	; 0x40
                    break;
 80013f2:	e025      	b.n	8001440 <Ymodem_Receive+0x1c8>
                  ramsource = (uint32_t) & aPacketData[PACKET_DATA_INDEX];
 80013f4:	4b30      	ldr	r3, [pc, #192]	; (80014b8 <Ymodem_Receive+0x240>)
 80013f6:	627b      	str	r3, [r7, #36]	; 0x24
                  if (FLASH_If_Write(flashdestination, (uint32_t*) ramsource, packet_length/4) == FLASHIF_OK)
 80013f8:	4b2c      	ldr	r3, [pc, #176]	; (80014ac <Ymodem_Receive+0x234>)
 80013fa:	6818      	ldr	r0, [r3, #0]
 80013fc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80013fe:	6a3b      	ldr	r3, [r7, #32]
 8001400:	089b      	lsrs	r3, r3, #2
 8001402:	461a      	mov	r2, r3
 8001404:	f7ff fa16 	bl	8000834 <FLASH_If_Write>
 8001408:	4603      	mov	r3, r0
 800140a:	2b00      	cmp	r3, #0
 800140c:	d109      	bne.n	8001422 <Ymodem_Receive+0x1aa>
                    flashdestination += packet_length;
 800140e:	4b27      	ldr	r3, [pc, #156]	; (80014ac <Ymodem_Receive+0x234>)
 8001410:	681a      	ldr	r2, [r3, #0]
 8001412:	6a3b      	ldr	r3, [r7, #32]
 8001414:	4413      	add	r3, r2
 8001416:	4a25      	ldr	r2, [pc, #148]	; (80014ac <Ymodem_Receive+0x234>)
 8001418:	6013      	str	r3, [r2, #0]
                    Serial_PutByte(ACK);
 800141a:	2006      	movs	r0, #6
 800141c:	f7ff f9bc 	bl	8000798 <Serial_PutByte>
 8001420:	e008      	b.n	8001434 <Ymodem_Receive+0x1bc>
                    Serial_PutByte(CA);
 8001422:	2018      	movs	r0, #24
 8001424:	f7ff f9b8 	bl	8000798 <Serial_PutByte>
                    Serial_PutByte(CA);
 8001428:	2018      	movs	r0, #24
 800142a:	f7ff f9b5 	bl	8000798 <Serial_PutByte>
                    result = COM_DATA;
 800142e:	2304      	movs	r3, #4
 8001430:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
                packets_received ++;
 8001434:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001436:	3301      	adds	r3, #1
 8001438:	633b      	str	r3, [r7, #48]	; 0x30
                session_begin = 1;
 800143a:	2301      	movs	r3, #1
 800143c:	637b      	str	r3, [r7, #52]	; 0x34
              break;
 800143e:	bf00      	nop
          }
          break;
 8001440:	e01e      	b.n	8001480 <Ymodem_Receive+0x208>
        case HAL_BUSY: /* Abort actually */
          Serial_PutByte(CA);
 8001442:	2018      	movs	r0, #24
 8001444:	f7ff f9a8 	bl	8000798 <Serial_PutByte>
          Serial_PutByte(CA);
 8001448:	2018      	movs	r0, #24
 800144a:	f7ff f9a5 	bl	8000798 <Serial_PutByte>
          result = COM_ABORT;
 800144e:	2302      	movs	r3, #2
 8001450:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
          break;
 8001454:	e014      	b.n	8001480 <Ymodem_Receive+0x208>
        default:
          if (session_begin > 0)
 8001456:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001458:	2b00      	cmp	r3, #0
 800145a:	d002      	beq.n	8001462 <Ymodem_Receive+0x1ea>
          {
            errors ++;
 800145c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800145e:	3301      	adds	r3, #1
 8001460:	63bb      	str	r3, [r7, #56]	; 0x38
          }
          if (errors > MAX_ERRORS)
 8001462:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001464:	2b05      	cmp	r3, #5
 8001466:	d907      	bls.n	8001478 <Ymodem_Receive+0x200>
          {
            /* Abort communication */
            Serial_PutByte(CA);
 8001468:	2018      	movs	r0, #24
 800146a:	f7ff f995 	bl	8000798 <Serial_PutByte>
            Serial_PutByte(CA);
 800146e:	2018      	movs	r0, #24
 8001470:	f7ff f992 	bl	8000798 <Serial_PutByte>
            NVIC_SystemReset();
 8001474:	f7ff fdec 	bl	8001050 <__NVIC_SystemReset>
          }
          else
          {
            Serial_PutByte(CRC16); /* Ask for a packet */
 8001478:	2043      	movs	r0, #67	; 0x43
 800147a:	f7ff f98d 	bl	8000798 <Serial_PutByte>
          }
          break;
 800147e:	bf00      	nop
    while ((file_done == 0) && (result == COM_OK))
 8001480:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001482:	2b00      	cmp	r3, #0
 8001484:	d104      	bne.n	8001490 <Ymodem_Receive+0x218>
 8001486:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800148a:	2b00      	cmp	r3, #0
 800148c:	f43f af0a 	beq.w	80012a4 <Ymodem_Receive+0x2c>
  while ((session_done == 0) && (result == COM_OK))
 8001490:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001492:	2b00      	cmp	r3, #0
 8001494:	d104      	bne.n	80014a0 <Ymodem_Receive+0x228>
 8001496:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800149a:	2b00      	cmp	r3, #0
 800149c:	f43f aefd 	beq.w	800129a <Ymodem_Receive+0x22>
      }
    }
  }
  return result;
 80014a0:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 80014a4:	4618      	mov	r0, r3
 80014a6:	3748      	adds	r7, #72	; 0x48
 80014a8:	46bd      	mov	sp, r7
 80014aa:	bd80      	pop	{r7, pc}
 80014ac:	200004c8 	.word	0x200004c8
 80014b0:	08008000 	.word	0x08008000
 80014b4:	200000c0 	.word	0x200000c0
 80014b8:	200000c4 	.word	0x200000c4
 80014bc:	20000080 	.word	0x20000080
 80014c0:	000f8001 	.word	0x000f8001
 80014c4:	20000030 	.word	0x20000030

080014c8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80014c8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001500 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 80014cc:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80014ce:	e003      	b.n	80014d8 <LoopCopyDataInit>

080014d0 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80014d0:	4b0c      	ldr	r3, [pc, #48]	; (8001504 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 80014d2:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80014d4:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80014d6:	3104      	adds	r1, #4

080014d8 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80014d8:	480b      	ldr	r0, [pc, #44]	; (8001508 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 80014da:	4b0c      	ldr	r3, [pc, #48]	; (800150c <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 80014dc:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80014de:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80014e0:	d3f6      	bcc.n	80014d0 <CopyDataInit>
  ldr  r2, =_sbss
 80014e2:	4a0b      	ldr	r2, [pc, #44]	; (8001510 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 80014e4:	e002      	b.n	80014ec <LoopFillZerobss>

080014e6 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 80014e6:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80014e8:	f842 3b04 	str.w	r3, [r2], #4

080014ec <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80014ec:	4b09      	ldr	r3, [pc, #36]	; (8001514 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 80014ee:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80014f0:	d3f9      	bcc.n	80014e6 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80014f2:	f7ff fd97 	bl	8001024 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80014f6:	f002 fb3b 	bl	8003b70 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80014fa:	f7ff fa77 	bl	80009ec <main>
  bx  lr    
 80014fe:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001500:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8001504:	08003e14 	.word	0x08003e14
  ldr  r0, =_sdata
 8001508:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 800150c:	20000010 	.word	0x20000010
  ldr  r2, =_sbss
 8001510:	20000010 	.word	0x20000010
  ldr  r3, = _ebss
 8001514:	200004f0 	.word	0x200004f0

08001518 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001518:	e7fe      	b.n	8001518 <ADC_IRQHandler>
	...

0800151c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800151c:	b580      	push	{r7, lr}
 800151e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001520:	4b0e      	ldr	r3, [pc, #56]	; (800155c <HAL_Init+0x40>)
 8001522:	681b      	ldr	r3, [r3, #0]
 8001524:	4a0d      	ldr	r2, [pc, #52]	; (800155c <HAL_Init+0x40>)
 8001526:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800152a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800152c:	4b0b      	ldr	r3, [pc, #44]	; (800155c <HAL_Init+0x40>)
 800152e:	681b      	ldr	r3, [r3, #0]
 8001530:	4a0a      	ldr	r2, [pc, #40]	; (800155c <HAL_Init+0x40>)
 8001532:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001536:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001538:	4b08      	ldr	r3, [pc, #32]	; (800155c <HAL_Init+0x40>)
 800153a:	681b      	ldr	r3, [r3, #0]
 800153c:	4a07      	ldr	r2, [pc, #28]	; (800155c <HAL_Init+0x40>)
 800153e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001542:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001544:	2003      	movs	r0, #3
 8001546:	f000 f94d 	bl	80017e4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800154a:	2000      	movs	r0, #0
 800154c:	f000 f808 	bl	8001560 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001550:	f7ff fc9c 	bl	8000e8c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001554:	2300      	movs	r3, #0
}
 8001556:	4618      	mov	r0, r3
 8001558:	bd80      	pop	{r7, pc}
 800155a:	bf00      	nop
 800155c:	40023c00 	.word	0x40023c00

08001560 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001560:	b580      	push	{r7, lr}
 8001562:	b082      	sub	sp, #8
 8001564:	af00      	add	r7, sp, #0
 8001566:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001568:	4b12      	ldr	r3, [pc, #72]	; (80015b4 <HAL_InitTick+0x54>)
 800156a:	681a      	ldr	r2, [r3, #0]
 800156c:	4b12      	ldr	r3, [pc, #72]	; (80015b8 <HAL_InitTick+0x58>)
 800156e:	781b      	ldrb	r3, [r3, #0]
 8001570:	4619      	mov	r1, r3
 8001572:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001576:	fbb3 f3f1 	udiv	r3, r3, r1
 800157a:	fbb2 f3f3 	udiv	r3, r2, r3
 800157e:	4618      	mov	r0, r3
 8001580:	f000 f965 	bl	800184e <HAL_SYSTICK_Config>
 8001584:	4603      	mov	r3, r0
 8001586:	2b00      	cmp	r3, #0
 8001588:	d001      	beq.n	800158e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800158a:	2301      	movs	r3, #1
 800158c:	e00e      	b.n	80015ac <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	2b0f      	cmp	r3, #15
 8001592:	d80a      	bhi.n	80015aa <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001594:	2200      	movs	r2, #0
 8001596:	6879      	ldr	r1, [r7, #4]
 8001598:	f04f 30ff 	mov.w	r0, #4294967295
 800159c:	f000 f92d 	bl	80017fa <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80015a0:	4a06      	ldr	r2, [pc, #24]	; (80015bc <HAL_InitTick+0x5c>)
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80015a6:	2300      	movs	r3, #0
 80015a8:	e000      	b.n	80015ac <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80015aa:	2301      	movs	r3, #1
}
 80015ac:	4618      	mov	r0, r3
 80015ae:	3708      	adds	r7, #8
 80015b0:	46bd      	mov	sp, r7
 80015b2:	bd80      	pop	{r7, pc}
 80015b4:	20000004 	.word	0x20000004
 80015b8:	2000000c 	.word	0x2000000c
 80015bc:	20000008 	.word	0x20000008

080015c0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80015c0:	b480      	push	{r7}
 80015c2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80015c4:	4b06      	ldr	r3, [pc, #24]	; (80015e0 <HAL_IncTick+0x20>)
 80015c6:	781b      	ldrb	r3, [r3, #0]
 80015c8:	461a      	mov	r2, r3
 80015ca:	4b06      	ldr	r3, [pc, #24]	; (80015e4 <HAL_IncTick+0x24>)
 80015cc:	681b      	ldr	r3, [r3, #0]
 80015ce:	4413      	add	r3, r2
 80015d0:	4a04      	ldr	r2, [pc, #16]	; (80015e4 <HAL_IncTick+0x24>)
 80015d2:	6013      	str	r3, [r2, #0]
}
 80015d4:	bf00      	nop
 80015d6:	46bd      	mov	sp, r7
 80015d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015dc:	4770      	bx	lr
 80015de:	bf00      	nop
 80015e0:	2000000c 	.word	0x2000000c
 80015e4:	200004cc 	.word	0x200004cc

080015e8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80015e8:	b480      	push	{r7}
 80015ea:	af00      	add	r7, sp, #0
  return uwTick;
 80015ec:	4b03      	ldr	r3, [pc, #12]	; (80015fc <HAL_GetTick+0x14>)
 80015ee:	681b      	ldr	r3, [r3, #0]
}
 80015f0:	4618      	mov	r0, r3
 80015f2:	46bd      	mov	sp, r7
 80015f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015f8:	4770      	bx	lr
 80015fa:	bf00      	nop
 80015fc:	200004cc 	.word	0x200004cc

08001600 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001600:	b580      	push	{r7, lr}
 8001602:	b084      	sub	sp, #16
 8001604:	af00      	add	r7, sp, #0
 8001606:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001608:	f7ff ffee 	bl	80015e8 <HAL_GetTick>
 800160c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001612:	68fb      	ldr	r3, [r7, #12]
 8001614:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001618:	d005      	beq.n	8001626 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800161a:	4b09      	ldr	r3, [pc, #36]	; (8001640 <HAL_Delay+0x40>)
 800161c:	781b      	ldrb	r3, [r3, #0]
 800161e:	461a      	mov	r2, r3
 8001620:	68fb      	ldr	r3, [r7, #12]
 8001622:	4413      	add	r3, r2
 8001624:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001626:	bf00      	nop
 8001628:	f7ff ffde 	bl	80015e8 <HAL_GetTick>
 800162c:	4602      	mov	r2, r0
 800162e:	68bb      	ldr	r3, [r7, #8]
 8001630:	1ad3      	subs	r3, r2, r3
 8001632:	68fa      	ldr	r2, [r7, #12]
 8001634:	429a      	cmp	r2, r3
 8001636:	d8f7      	bhi.n	8001628 <HAL_Delay+0x28>
  {
  }
}
 8001638:	bf00      	nop
 800163a:	3710      	adds	r7, #16
 800163c:	46bd      	mov	sp, r7
 800163e:	bd80      	pop	{r7, pc}
 8001640:	2000000c 	.word	0x2000000c

08001644 <__NVIC_SetPriorityGrouping>:
{
 8001644:	b480      	push	{r7}
 8001646:	b085      	sub	sp, #20
 8001648:	af00      	add	r7, sp, #0
 800164a:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	f003 0307 	and.w	r3, r3, #7
 8001652:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001654:	4b0c      	ldr	r3, [pc, #48]	; (8001688 <__NVIC_SetPriorityGrouping+0x44>)
 8001656:	68db      	ldr	r3, [r3, #12]
 8001658:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800165a:	68ba      	ldr	r2, [r7, #8]
 800165c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001660:	4013      	ands	r3, r2
 8001662:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001664:	68fb      	ldr	r3, [r7, #12]
 8001666:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001668:	68bb      	ldr	r3, [r7, #8]
 800166a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800166c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001670:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001674:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001676:	4a04      	ldr	r2, [pc, #16]	; (8001688 <__NVIC_SetPriorityGrouping+0x44>)
 8001678:	68bb      	ldr	r3, [r7, #8]
 800167a:	60d3      	str	r3, [r2, #12]
}
 800167c:	bf00      	nop
 800167e:	3714      	adds	r7, #20
 8001680:	46bd      	mov	sp, r7
 8001682:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001686:	4770      	bx	lr
 8001688:	e000ed00 	.word	0xe000ed00

0800168c <__NVIC_GetPriorityGrouping>:
{
 800168c:	b480      	push	{r7}
 800168e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001690:	4b04      	ldr	r3, [pc, #16]	; (80016a4 <__NVIC_GetPriorityGrouping+0x18>)
 8001692:	68db      	ldr	r3, [r3, #12]
 8001694:	0a1b      	lsrs	r3, r3, #8
 8001696:	f003 0307 	and.w	r3, r3, #7
}
 800169a:	4618      	mov	r0, r3
 800169c:	46bd      	mov	sp, r7
 800169e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016a2:	4770      	bx	lr
 80016a4:	e000ed00 	.word	0xe000ed00

080016a8 <__NVIC_EnableIRQ>:
{
 80016a8:	b480      	push	{r7}
 80016aa:	b083      	sub	sp, #12
 80016ac:	af00      	add	r7, sp, #0
 80016ae:	4603      	mov	r3, r0
 80016b0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80016b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016b6:	2b00      	cmp	r3, #0
 80016b8:	db0b      	blt.n	80016d2 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80016ba:	79fb      	ldrb	r3, [r7, #7]
 80016bc:	f003 021f 	and.w	r2, r3, #31
 80016c0:	4907      	ldr	r1, [pc, #28]	; (80016e0 <__NVIC_EnableIRQ+0x38>)
 80016c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016c6:	095b      	lsrs	r3, r3, #5
 80016c8:	2001      	movs	r0, #1
 80016ca:	fa00 f202 	lsl.w	r2, r0, r2
 80016ce:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80016d2:	bf00      	nop
 80016d4:	370c      	adds	r7, #12
 80016d6:	46bd      	mov	sp, r7
 80016d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016dc:	4770      	bx	lr
 80016de:	bf00      	nop
 80016e0:	e000e100 	.word	0xe000e100

080016e4 <__NVIC_SetPriority>:
{
 80016e4:	b480      	push	{r7}
 80016e6:	b083      	sub	sp, #12
 80016e8:	af00      	add	r7, sp, #0
 80016ea:	4603      	mov	r3, r0
 80016ec:	6039      	str	r1, [r7, #0]
 80016ee:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80016f0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016f4:	2b00      	cmp	r3, #0
 80016f6:	db0a      	blt.n	800170e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80016f8:	683b      	ldr	r3, [r7, #0]
 80016fa:	b2da      	uxtb	r2, r3
 80016fc:	490c      	ldr	r1, [pc, #48]	; (8001730 <__NVIC_SetPriority+0x4c>)
 80016fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001702:	0112      	lsls	r2, r2, #4
 8001704:	b2d2      	uxtb	r2, r2
 8001706:	440b      	add	r3, r1
 8001708:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 800170c:	e00a      	b.n	8001724 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800170e:	683b      	ldr	r3, [r7, #0]
 8001710:	b2da      	uxtb	r2, r3
 8001712:	4908      	ldr	r1, [pc, #32]	; (8001734 <__NVIC_SetPriority+0x50>)
 8001714:	79fb      	ldrb	r3, [r7, #7]
 8001716:	f003 030f 	and.w	r3, r3, #15
 800171a:	3b04      	subs	r3, #4
 800171c:	0112      	lsls	r2, r2, #4
 800171e:	b2d2      	uxtb	r2, r2
 8001720:	440b      	add	r3, r1
 8001722:	761a      	strb	r2, [r3, #24]
}
 8001724:	bf00      	nop
 8001726:	370c      	adds	r7, #12
 8001728:	46bd      	mov	sp, r7
 800172a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800172e:	4770      	bx	lr
 8001730:	e000e100 	.word	0xe000e100
 8001734:	e000ed00 	.word	0xe000ed00

08001738 <NVIC_EncodePriority>:
{
 8001738:	b480      	push	{r7}
 800173a:	b089      	sub	sp, #36	; 0x24
 800173c:	af00      	add	r7, sp, #0
 800173e:	60f8      	str	r0, [r7, #12]
 8001740:	60b9      	str	r1, [r7, #8]
 8001742:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001744:	68fb      	ldr	r3, [r7, #12]
 8001746:	f003 0307 	and.w	r3, r3, #7
 800174a:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800174c:	69fb      	ldr	r3, [r7, #28]
 800174e:	f1c3 0307 	rsb	r3, r3, #7
 8001752:	2b04      	cmp	r3, #4
 8001754:	bf28      	it	cs
 8001756:	2304      	movcs	r3, #4
 8001758:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800175a:	69fb      	ldr	r3, [r7, #28]
 800175c:	3304      	adds	r3, #4
 800175e:	2b06      	cmp	r3, #6
 8001760:	d902      	bls.n	8001768 <NVIC_EncodePriority+0x30>
 8001762:	69fb      	ldr	r3, [r7, #28]
 8001764:	3b03      	subs	r3, #3
 8001766:	e000      	b.n	800176a <NVIC_EncodePriority+0x32>
 8001768:	2300      	movs	r3, #0
 800176a:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800176c:	f04f 32ff 	mov.w	r2, #4294967295
 8001770:	69bb      	ldr	r3, [r7, #24]
 8001772:	fa02 f303 	lsl.w	r3, r2, r3
 8001776:	43da      	mvns	r2, r3
 8001778:	68bb      	ldr	r3, [r7, #8]
 800177a:	401a      	ands	r2, r3
 800177c:	697b      	ldr	r3, [r7, #20]
 800177e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001780:	f04f 31ff 	mov.w	r1, #4294967295
 8001784:	697b      	ldr	r3, [r7, #20]
 8001786:	fa01 f303 	lsl.w	r3, r1, r3
 800178a:	43d9      	mvns	r1, r3
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001790:	4313      	orrs	r3, r2
}
 8001792:	4618      	mov	r0, r3
 8001794:	3724      	adds	r7, #36	; 0x24
 8001796:	46bd      	mov	sp, r7
 8001798:	f85d 7b04 	ldr.w	r7, [sp], #4
 800179c:	4770      	bx	lr
	...

080017a0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80017a0:	b580      	push	{r7, lr}
 80017a2:	b082      	sub	sp, #8
 80017a4:	af00      	add	r7, sp, #0
 80017a6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	3b01      	subs	r3, #1
 80017ac:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80017b0:	d301      	bcc.n	80017b6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80017b2:	2301      	movs	r3, #1
 80017b4:	e00f      	b.n	80017d6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80017b6:	4a0a      	ldr	r2, [pc, #40]	; (80017e0 <SysTick_Config+0x40>)
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	3b01      	subs	r3, #1
 80017bc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80017be:	210f      	movs	r1, #15
 80017c0:	f04f 30ff 	mov.w	r0, #4294967295
 80017c4:	f7ff ff8e 	bl	80016e4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80017c8:	4b05      	ldr	r3, [pc, #20]	; (80017e0 <SysTick_Config+0x40>)
 80017ca:	2200      	movs	r2, #0
 80017cc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80017ce:	4b04      	ldr	r3, [pc, #16]	; (80017e0 <SysTick_Config+0x40>)
 80017d0:	2207      	movs	r2, #7
 80017d2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80017d4:	2300      	movs	r3, #0
}
 80017d6:	4618      	mov	r0, r3
 80017d8:	3708      	adds	r7, #8
 80017da:	46bd      	mov	sp, r7
 80017dc:	bd80      	pop	{r7, pc}
 80017de:	bf00      	nop
 80017e0:	e000e010 	.word	0xe000e010

080017e4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80017e4:	b580      	push	{r7, lr}
 80017e6:	b082      	sub	sp, #8
 80017e8:	af00      	add	r7, sp, #0
 80017ea:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80017ec:	6878      	ldr	r0, [r7, #4]
 80017ee:	f7ff ff29 	bl	8001644 <__NVIC_SetPriorityGrouping>
}
 80017f2:	bf00      	nop
 80017f4:	3708      	adds	r7, #8
 80017f6:	46bd      	mov	sp, r7
 80017f8:	bd80      	pop	{r7, pc}

080017fa <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80017fa:	b580      	push	{r7, lr}
 80017fc:	b086      	sub	sp, #24
 80017fe:	af00      	add	r7, sp, #0
 8001800:	4603      	mov	r3, r0
 8001802:	60b9      	str	r1, [r7, #8]
 8001804:	607a      	str	r2, [r7, #4]
 8001806:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001808:	2300      	movs	r3, #0
 800180a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800180c:	f7ff ff3e 	bl	800168c <__NVIC_GetPriorityGrouping>
 8001810:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001812:	687a      	ldr	r2, [r7, #4]
 8001814:	68b9      	ldr	r1, [r7, #8]
 8001816:	6978      	ldr	r0, [r7, #20]
 8001818:	f7ff ff8e 	bl	8001738 <NVIC_EncodePriority>
 800181c:	4602      	mov	r2, r0
 800181e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001822:	4611      	mov	r1, r2
 8001824:	4618      	mov	r0, r3
 8001826:	f7ff ff5d 	bl	80016e4 <__NVIC_SetPriority>
}
 800182a:	bf00      	nop
 800182c:	3718      	adds	r7, #24
 800182e:	46bd      	mov	sp, r7
 8001830:	bd80      	pop	{r7, pc}

08001832 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001832:	b580      	push	{r7, lr}
 8001834:	b082      	sub	sp, #8
 8001836:	af00      	add	r7, sp, #0
 8001838:	4603      	mov	r3, r0
 800183a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800183c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001840:	4618      	mov	r0, r3
 8001842:	f7ff ff31 	bl	80016a8 <__NVIC_EnableIRQ>
}
 8001846:	bf00      	nop
 8001848:	3708      	adds	r7, #8
 800184a:	46bd      	mov	sp, r7
 800184c:	bd80      	pop	{r7, pc}

0800184e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800184e:	b580      	push	{r7, lr}
 8001850:	b082      	sub	sp, #8
 8001852:	af00      	add	r7, sp, #0
 8001854:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001856:	6878      	ldr	r0, [r7, #4]
 8001858:	f7ff ffa2 	bl	80017a0 <SysTick_Config>
 800185c:	4603      	mov	r3, r0
}
 800185e:	4618      	mov	r0, r3
 8001860:	3708      	adds	r7, #8
 8001862:	46bd      	mov	sp, r7
 8001864:	bd80      	pop	{r7, pc}

08001866 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001866:	b480      	push	{r7}
 8001868:	b083      	sub	sp, #12
 800186a:	af00      	add	r7, sp, #0
 800186c:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001874:	b2db      	uxtb	r3, r3
 8001876:	2b02      	cmp	r3, #2
 8001878:	d004      	beq.n	8001884 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	2280      	movs	r2, #128	; 0x80
 800187e:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8001880:	2301      	movs	r3, #1
 8001882:	e00c      	b.n	800189e <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	2205      	movs	r2, #5
 8001888:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	681b      	ldr	r3, [r3, #0]
 8001890:	681a      	ldr	r2, [r3, #0]
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	681b      	ldr	r3, [r3, #0]
 8001896:	f022 0201 	bic.w	r2, r2, #1
 800189a:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800189c:	2300      	movs	r3, #0
}
 800189e:	4618      	mov	r0, r3
 80018a0:	370c      	adds	r7, #12
 80018a2:	46bd      	mov	sp, r7
 80018a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018a8:	4770      	bx	lr
	...

080018ac <HAL_FLASH_Program>:
  * @param  Data specifies the data to be programmed
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 80018ac:	b580      	push	{r7, lr}
 80018ae:	b086      	sub	sp, #24
 80018b0:	af00      	add	r7, sp, #0
 80018b2:	60f8      	str	r0, [r7, #12]
 80018b4:	60b9      	str	r1, [r7, #8]
 80018b6:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status = HAL_ERROR;
 80018ba:	2301      	movs	r3, #1
 80018bc:	75fb      	strb	r3, [r7, #23]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 80018be:	4b23      	ldr	r3, [pc, #140]	; (800194c <HAL_FLASH_Program+0xa0>)
 80018c0:	7e1b      	ldrb	r3, [r3, #24]
 80018c2:	2b01      	cmp	r3, #1
 80018c4:	d101      	bne.n	80018ca <HAL_FLASH_Program+0x1e>
 80018c6:	2302      	movs	r3, #2
 80018c8:	e03b      	b.n	8001942 <HAL_FLASH_Program+0x96>
 80018ca:	4b20      	ldr	r3, [pc, #128]	; (800194c <HAL_FLASH_Program+0xa0>)
 80018cc:	2201      	movs	r2, #1
 80018ce:	761a      	strb	r2, [r3, #24]
  
  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));
  
  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80018d0:	f24c 3050 	movw	r0, #50000	; 0xc350
 80018d4:	f000 f914 	bl	8001b00 <FLASH_WaitForLastOperation>
 80018d8:	4603      	mov	r3, r0
 80018da:	75fb      	strb	r3, [r7, #23]
  
  if(status == HAL_OK)
 80018dc:	7dfb      	ldrb	r3, [r7, #23]
 80018de:	2b00      	cmp	r3, #0
 80018e0:	d12b      	bne.n	800193a <HAL_FLASH_Program+0x8e>
  {
    if(TypeProgram == FLASH_TYPEPROGRAM_BYTE)
 80018e2:	68fb      	ldr	r3, [r7, #12]
 80018e4:	2b00      	cmp	r3, #0
 80018e6:	d105      	bne.n	80018f4 <HAL_FLASH_Program+0x48>
    {
      /*Program byte (8-bit) at a specified address.*/
      FLASH_Program_Byte(Address, (uint8_t) Data);
 80018e8:	783b      	ldrb	r3, [r7, #0]
 80018ea:	4619      	mov	r1, r3
 80018ec:	68b8      	ldr	r0, [r7, #8]
 80018ee:	f000 f9bd 	bl	8001c6c <FLASH_Program_Byte>
 80018f2:	e016      	b.n	8001922 <HAL_FLASH_Program+0x76>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 80018f4:	68fb      	ldr	r3, [r7, #12]
 80018f6:	2b01      	cmp	r3, #1
 80018f8:	d105      	bne.n	8001906 <HAL_FLASH_Program+0x5a>
    {
      /*Program halfword (16-bit) at a specified address.*/
      FLASH_Program_HalfWord(Address, (uint16_t) Data);
 80018fa:	883b      	ldrh	r3, [r7, #0]
 80018fc:	4619      	mov	r1, r3
 80018fe:	68b8      	ldr	r0, [r7, #8]
 8001900:	f000 f990 	bl	8001c24 <FLASH_Program_HalfWord>
 8001904:	e00d      	b.n	8001922 <HAL_FLASH_Program+0x76>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
 8001906:	68fb      	ldr	r3, [r7, #12]
 8001908:	2b02      	cmp	r3, #2
 800190a:	d105      	bne.n	8001918 <HAL_FLASH_Program+0x6c>
    {
      /*Program word (32-bit) at a specified address.*/
      FLASH_Program_Word(Address, (uint32_t) Data);
 800190c:	683b      	ldr	r3, [r7, #0]
 800190e:	4619      	mov	r1, r3
 8001910:	68b8      	ldr	r0, [r7, #8]
 8001912:	f000 f965 	bl	8001be0 <FLASH_Program_Word>
 8001916:	e004      	b.n	8001922 <HAL_FLASH_Program+0x76>
    }
    else
    {
      /*Program double word (64-bit) at a specified address.*/
      FLASH_Program_DoubleWord(Address, Data);
 8001918:	e9d7 2300 	ldrd	r2, r3, [r7]
 800191c:	68b8      	ldr	r0, [r7, #8]
 800191e:	f000 f92f 	bl	8001b80 <FLASH_Program_DoubleWord>
    }
    
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8001922:	f24c 3050 	movw	r0, #50000	; 0xc350
 8001926:	f000 f8eb 	bl	8001b00 <FLASH_WaitForLastOperation>
 800192a:	4603      	mov	r3, r0
 800192c:	75fb      	strb	r3, [r7, #23]
    
    /* If the program operation is completed, disable the PG Bit */
    FLASH->CR &= (~FLASH_CR_PG);  
 800192e:	4b08      	ldr	r3, [pc, #32]	; (8001950 <HAL_FLASH_Program+0xa4>)
 8001930:	691b      	ldr	r3, [r3, #16]
 8001932:	4a07      	ldr	r2, [pc, #28]	; (8001950 <HAL_FLASH_Program+0xa4>)
 8001934:	f023 0301 	bic.w	r3, r3, #1
 8001938:	6113      	str	r3, [r2, #16]
  }
  
  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 800193a:	4b04      	ldr	r3, [pc, #16]	; (800194c <HAL_FLASH_Program+0xa0>)
 800193c:	2200      	movs	r2, #0
 800193e:	761a      	strb	r2, [r3, #24]
  
  return status;
 8001940:	7dfb      	ldrb	r3, [r7, #23]
}
 8001942:	4618      	mov	r0, r3
 8001944:	3718      	adds	r7, #24
 8001946:	46bd      	mov	sp, r7
 8001948:	bd80      	pop	{r7, pc}
 800194a:	bf00      	nop
 800194c:	200004d0 	.word	0x200004d0
 8001950:	40023c00 	.word	0x40023c00

08001954 <HAL_FLASH_IRQHandler>:
/**
  * @brief This function handles FLASH interrupt request.
  * @retval None
  */
void HAL_FLASH_IRQHandler(void)
{
 8001954:	b580      	push	{r7, lr}
 8001956:	b082      	sub	sp, #8
 8001958:	af00      	add	r7, sp, #0
  uint32_t addresstmp = 0U;
 800195a:	2300      	movs	r3, #0
 800195c:	607b      	str	r3, [r7, #4]
  /* Check FLASH operation error flags */
#if defined(FLASH_SR_RDERR) 
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
    FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR | FLASH_FLAG_RDERR)) != RESET)
#else
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
 800195e:	4b4b      	ldr	r3, [pc, #300]	; (8001a8c <HAL_FLASH_IRQHandler+0x138>)
 8001960:	68db      	ldr	r3, [r3, #12]
 8001962:	f003 03f2 	and.w	r3, r3, #242	; 0xf2
 8001966:	2b00      	cmp	r3, #0
 8001968:	d020      	beq.n	80019ac <HAL_FLASH_IRQHandler+0x58>
    FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR)) != RESET)
#endif /* FLASH_SR_RDERR */
  {
    if(pFlash.ProcedureOnGoing == FLASH_PROC_SECTERASE)
 800196a:	4b49      	ldr	r3, [pc, #292]	; (8001a90 <HAL_FLASH_IRQHandler+0x13c>)
 800196c:	781b      	ldrb	r3, [r3, #0]
 800196e:	b2db      	uxtb	r3, r3
 8001970:	2b01      	cmp	r3, #1
 8001972:	d107      	bne.n	8001984 <HAL_FLASH_IRQHandler+0x30>
    {
      /*return the faulty sector*/
      addresstmp = pFlash.Sector;
 8001974:	4b46      	ldr	r3, [pc, #280]	; (8001a90 <HAL_FLASH_IRQHandler+0x13c>)
 8001976:	68db      	ldr	r3, [r3, #12]
 8001978:	607b      	str	r3, [r7, #4]
      pFlash.Sector = 0xFFFFFFFFU;
 800197a:	4b45      	ldr	r3, [pc, #276]	; (8001a90 <HAL_FLASH_IRQHandler+0x13c>)
 800197c:	f04f 32ff 	mov.w	r2, #4294967295
 8001980:	60da      	str	r2, [r3, #12]
 8001982:	e00b      	b.n	800199c <HAL_FLASH_IRQHandler+0x48>
    }
    else if(pFlash.ProcedureOnGoing == FLASH_PROC_MASSERASE)
 8001984:	4b42      	ldr	r3, [pc, #264]	; (8001a90 <HAL_FLASH_IRQHandler+0x13c>)
 8001986:	781b      	ldrb	r3, [r3, #0]
 8001988:	b2db      	uxtb	r3, r3
 800198a:	2b02      	cmp	r3, #2
 800198c:	d103      	bne.n	8001996 <HAL_FLASH_IRQHandler+0x42>
    {
      /*return the faulty bank*/
      addresstmp = pFlash.Bank;
 800198e:	4b40      	ldr	r3, [pc, #256]	; (8001a90 <HAL_FLASH_IRQHandler+0x13c>)
 8001990:	691b      	ldr	r3, [r3, #16]
 8001992:	607b      	str	r3, [r7, #4]
 8001994:	e002      	b.n	800199c <HAL_FLASH_IRQHandler+0x48>
    }
    else
    {
      /*return the faulty address*/
      addresstmp = pFlash.Address;
 8001996:	4b3e      	ldr	r3, [pc, #248]	; (8001a90 <HAL_FLASH_IRQHandler+0x13c>)
 8001998:	695b      	ldr	r3, [r3, #20]
 800199a:	607b      	str	r3, [r7, #4]
    }
    
    /*Save the Error code*/
    FLASH_SetErrorCode();
 800199c:	f000 f988 	bl	8001cb0 <FLASH_SetErrorCode>
    
    /* FLASH error interrupt user callback */
    HAL_FLASH_OperationErrorCallback(addresstmp);
 80019a0:	6878      	ldr	r0, [r7, #4]
 80019a2:	f000 f881 	bl	8001aa8 <HAL_FLASH_OperationErrorCallback>
    
    /*Stop the procedure ongoing*/
    pFlash.ProcedureOnGoing = FLASH_PROC_NONE;
 80019a6:	4b3a      	ldr	r3, [pc, #232]	; (8001a90 <HAL_FLASH_IRQHandler+0x13c>)
 80019a8:	2200      	movs	r2, #0
 80019aa:	701a      	strb	r2, [r3, #0]
  }
  
  /* Check FLASH End of Operation flag  */
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP) != RESET)
 80019ac:	4b37      	ldr	r3, [pc, #220]	; (8001a8c <HAL_FLASH_IRQHandler+0x138>)
 80019ae:	68db      	ldr	r3, [r3, #12]
 80019b0:	f003 0301 	and.w	r3, r3, #1
 80019b4:	2b00      	cmp	r3, #0
 80019b6:	d04a      	beq.n	8001a4e <HAL_FLASH_IRQHandler+0xfa>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 80019b8:	4b34      	ldr	r3, [pc, #208]	; (8001a8c <HAL_FLASH_IRQHandler+0x138>)
 80019ba:	2201      	movs	r2, #1
 80019bc:	60da      	str	r2, [r3, #12]
    
    if(pFlash.ProcedureOnGoing == FLASH_PROC_SECTERASE)
 80019be:	4b34      	ldr	r3, [pc, #208]	; (8001a90 <HAL_FLASH_IRQHandler+0x13c>)
 80019c0:	781b      	ldrb	r3, [r3, #0]
 80019c2:	b2db      	uxtb	r3, r3
 80019c4:	2b01      	cmp	r3, #1
 80019c6:	d12d      	bne.n	8001a24 <HAL_FLASH_IRQHandler+0xd0>
    {
      /*Nb of sector to erased can be decreased*/
      pFlash.NbSectorsToErase--;
 80019c8:	4b31      	ldr	r3, [pc, #196]	; (8001a90 <HAL_FLASH_IRQHandler+0x13c>)
 80019ca:	685b      	ldr	r3, [r3, #4]
 80019cc:	3b01      	subs	r3, #1
 80019ce:	4a30      	ldr	r2, [pc, #192]	; (8001a90 <HAL_FLASH_IRQHandler+0x13c>)
 80019d0:	6053      	str	r3, [r2, #4]
      
      /* Check if there are still sectors to erase*/
      if(pFlash.NbSectorsToErase != 0U)
 80019d2:	4b2f      	ldr	r3, [pc, #188]	; (8001a90 <HAL_FLASH_IRQHandler+0x13c>)
 80019d4:	685b      	ldr	r3, [r3, #4]
 80019d6:	2b00      	cmp	r3, #0
 80019d8:	d015      	beq.n	8001a06 <HAL_FLASH_IRQHandler+0xb2>
      {
        addresstmp = pFlash.Sector;
 80019da:	4b2d      	ldr	r3, [pc, #180]	; (8001a90 <HAL_FLASH_IRQHandler+0x13c>)
 80019dc:	68db      	ldr	r3, [r3, #12]
 80019de:	607b      	str	r3, [r7, #4]
        /*Indicate user which sector has been erased*/
        HAL_FLASH_EndOfOperationCallback(addresstmp);
 80019e0:	6878      	ldr	r0, [r7, #4]
 80019e2:	f000 f857 	bl	8001a94 <HAL_FLASH_EndOfOperationCallback>
        
        /*Increment sector number*/
        pFlash.Sector++;
 80019e6:	4b2a      	ldr	r3, [pc, #168]	; (8001a90 <HAL_FLASH_IRQHandler+0x13c>)
 80019e8:	68db      	ldr	r3, [r3, #12]
 80019ea:	3301      	adds	r3, #1
 80019ec:	4a28      	ldr	r2, [pc, #160]	; (8001a90 <HAL_FLASH_IRQHandler+0x13c>)
 80019ee:	60d3      	str	r3, [r2, #12]
        addresstmp = pFlash.Sector;
 80019f0:	4b27      	ldr	r3, [pc, #156]	; (8001a90 <HAL_FLASH_IRQHandler+0x13c>)
 80019f2:	68db      	ldr	r3, [r3, #12]
 80019f4:	607b      	str	r3, [r7, #4]
        FLASH_Erase_Sector(addresstmp, pFlash.VoltageForErase);
 80019f6:	4b26      	ldr	r3, [pc, #152]	; (8001a90 <HAL_FLASH_IRQHandler+0x13c>)
 80019f8:	7a1b      	ldrb	r3, [r3, #8]
 80019fa:	b2db      	uxtb	r3, r3
 80019fc:	4619      	mov	r1, r3
 80019fe:	6878      	ldr	r0, [r7, #4]
 8001a00:	f000 fa40 	bl	8001e84 <FLASH_Erase_Sector>
 8001a04:	e023      	b.n	8001a4e <HAL_FLASH_IRQHandler+0xfa>
      }
      else
      {
        /*No more sectors to Erase, user callback can be called.*/
        /*Reset Sector and stop Erase sectors procedure*/
        pFlash.Sector = addresstmp = 0xFFFFFFFFU;
 8001a06:	f04f 33ff 	mov.w	r3, #4294967295
 8001a0a:	607b      	str	r3, [r7, #4]
 8001a0c:	4a20      	ldr	r2, [pc, #128]	; (8001a90 <HAL_FLASH_IRQHandler+0x13c>)
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	60d3      	str	r3, [r2, #12]
        pFlash.ProcedureOnGoing = FLASH_PROC_NONE;
 8001a12:	4b1f      	ldr	r3, [pc, #124]	; (8001a90 <HAL_FLASH_IRQHandler+0x13c>)
 8001a14:	2200      	movs	r2, #0
 8001a16:	701a      	strb	r2, [r3, #0]
        
        /* Flush the caches to be sure of the data consistency */
        FLASH_FlushCaches() ;
 8001a18:	f000 fa7c 	bl	8001f14 <FLASH_FlushCaches>
                
        /* FLASH EOP interrupt user callback */
        HAL_FLASH_EndOfOperationCallback(addresstmp);
 8001a1c:	6878      	ldr	r0, [r7, #4]
 8001a1e:	f000 f839 	bl	8001a94 <HAL_FLASH_EndOfOperationCallback>
 8001a22:	e014      	b.n	8001a4e <HAL_FLASH_IRQHandler+0xfa>
      }
    }
    else 
    {
      if(pFlash.ProcedureOnGoing == FLASH_PROC_MASSERASE) 
 8001a24:	4b1a      	ldr	r3, [pc, #104]	; (8001a90 <HAL_FLASH_IRQHandler+0x13c>)
 8001a26:	781b      	ldrb	r3, [r3, #0]
 8001a28:	b2db      	uxtb	r3, r3
 8001a2a:	2b02      	cmp	r3, #2
 8001a2c:	d107      	bne.n	8001a3e <HAL_FLASH_IRQHandler+0xea>
      {
        /* MassErase ended. Return the selected bank */
        /* Flush the caches to be sure of the data consistency */
        FLASH_FlushCaches() ;
 8001a2e:	f000 fa71 	bl	8001f14 <FLASH_FlushCaches>

        /* FLASH EOP interrupt user callback */
        HAL_FLASH_EndOfOperationCallback(pFlash.Bank);
 8001a32:	4b17      	ldr	r3, [pc, #92]	; (8001a90 <HAL_FLASH_IRQHandler+0x13c>)
 8001a34:	691b      	ldr	r3, [r3, #16]
 8001a36:	4618      	mov	r0, r3
 8001a38:	f000 f82c 	bl	8001a94 <HAL_FLASH_EndOfOperationCallback>
 8001a3c:	e004      	b.n	8001a48 <HAL_FLASH_IRQHandler+0xf4>
      }
      else
      {
        /*Program ended. Return the selected address*/
        /* FLASH EOP interrupt user callback */
        HAL_FLASH_EndOfOperationCallback(pFlash.Address);
 8001a3e:	4b14      	ldr	r3, [pc, #80]	; (8001a90 <HAL_FLASH_IRQHandler+0x13c>)
 8001a40:	695b      	ldr	r3, [r3, #20]
 8001a42:	4618      	mov	r0, r3
 8001a44:	f000 f826 	bl	8001a94 <HAL_FLASH_EndOfOperationCallback>
      }
      pFlash.ProcedureOnGoing = FLASH_PROC_NONE;
 8001a48:	4b11      	ldr	r3, [pc, #68]	; (8001a90 <HAL_FLASH_IRQHandler+0x13c>)
 8001a4a:	2200      	movs	r2, #0
 8001a4c:	701a      	strb	r2, [r3, #0]
    }
  }
  
  if(pFlash.ProcedureOnGoing == FLASH_PROC_NONE)
 8001a4e:	4b10      	ldr	r3, [pc, #64]	; (8001a90 <HAL_FLASH_IRQHandler+0x13c>)
 8001a50:	781b      	ldrb	r3, [r3, #0]
 8001a52:	b2db      	uxtb	r3, r3
 8001a54:	2b00      	cmp	r3, #0
 8001a56:	d114      	bne.n	8001a82 <HAL_FLASH_IRQHandler+0x12e>
  {
    /* Operation is completed, disable the PG, SER, SNB and MER Bits */
    CLEAR_BIT(FLASH->CR, (FLASH_CR_PG | FLASH_CR_SER | FLASH_CR_SNB | FLASH_MER_BIT));
 8001a58:	4b0c      	ldr	r3, [pc, #48]	; (8001a8c <HAL_FLASH_IRQHandler+0x138>)
 8001a5a:	691b      	ldr	r3, [r3, #16]
 8001a5c:	4a0b      	ldr	r2, [pc, #44]	; (8001a8c <HAL_FLASH_IRQHandler+0x138>)
 8001a5e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8001a62:	6113      	str	r3, [r2, #16]

    /* Disable End of FLASH Operation interrupt */
    __HAL_FLASH_DISABLE_IT(FLASH_IT_EOP);
 8001a64:	4b09      	ldr	r3, [pc, #36]	; (8001a8c <HAL_FLASH_IRQHandler+0x138>)
 8001a66:	691b      	ldr	r3, [r3, #16]
 8001a68:	4a08      	ldr	r2, [pc, #32]	; (8001a8c <HAL_FLASH_IRQHandler+0x138>)
 8001a6a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001a6e:	6113      	str	r3, [r2, #16]
    
    /* Disable Error source interrupt */
    __HAL_FLASH_DISABLE_IT(FLASH_IT_ERR);
 8001a70:	4b06      	ldr	r3, [pc, #24]	; (8001a8c <HAL_FLASH_IRQHandler+0x138>)
 8001a72:	691b      	ldr	r3, [r3, #16]
 8001a74:	4a05      	ldr	r2, [pc, #20]	; (8001a8c <HAL_FLASH_IRQHandler+0x138>)
 8001a76:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 8001a7a:	6113      	str	r3, [r2, #16]
    
    /* Process Unlocked */
    __HAL_UNLOCK(&pFlash);
 8001a7c:	4b04      	ldr	r3, [pc, #16]	; (8001a90 <HAL_FLASH_IRQHandler+0x13c>)
 8001a7e:	2200      	movs	r2, #0
 8001a80:	761a      	strb	r2, [r3, #24]
  }
}
 8001a82:	bf00      	nop
 8001a84:	3708      	adds	r7, #8
 8001a86:	46bd      	mov	sp, r7
 8001a88:	bd80      	pop	{r7, pc}
 8001a8a:	bf00      	nop
 8001a8c:	40023c00 	.word	0x40023c00
 8001a90:	200004d0 	.word	0x200004d0

08001a94 <HAL_FLASH_EndOfOperationCallback>:
  *                    (if 0xFFFFFFFFU, it means that all the selected sectors have been erased)
  *                  Program: Address which was selected for data program
  * @retval None
  */
__weak void HAL_FLASH_EndOfOperationCallback(uint32_t ReturnValue)
{
 8001a94:	b480      	push	{r7}
 8001a96:	b083      	sub	sp, #12
 8001a98:	af00      	add	r7, sp, #0
 8001a9a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(ReturnValue);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FLASH_EndOfOperationCallback could be implemented in the user file
   */ 
}
 8001a9c:	bf00      	nop
 8001a9e:	370c      	adds	r7, #12
 8001aa0:	46bd      	mov	sp, r7
 8001aa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aa6:	4770      	bx	lr

08001aa8 <HAL_FLASH_OperationErrorCallback>:
  *                 Sectors Erase: Sector number which returned an error
  *                 Program: Address which was selected for data program
  * @retval None
  */
__weak void HAL_FLASH_OperationErrorCallback(uint32_t ReturnValue)
{
 8001aa8:	b480      	push	{r7}
 8001aaa:	b083      	sub	sp, #12
 8001aac:	af00      	add	r7, sp, #0
 8001aae:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(ReturnValue);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FLASH_OperationErrorCallback could be implemented in the user file
   */ 
}
 8001ab0:	bf00      	nop
 8001ab2:	370c      	adds	r7, #12
 8001ab4:	46bd      	mov	sp, r7
 8001ab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aba:	4770      	bx	lr

08001abc <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 8001abc:	b480      	push	{r7}
 8001abe:	b083      	sub	sp, #12
 8001ac0:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 8001ac2:	2300      	movs	r3, #0
 8001ac4:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8001ac6:	4b0b      	ldr	r3, [pc, #44]	; (8001af4 <HAL_FLASH_Unlock+0x38>)
 8001ac8:	691b      	ldr	r3, [r3, #16]
 8001aca:	2b00      	cmp	r3, #0
 8001acc:	da0b      	bge.n	8001ae6 <HAL_FLASH_Unlock+0x2a>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 8001ace:	4b09      	ldr	r3, [pc, #36]	; (8001af4 <HAL_FLASH_Unlock+0x38>)
 8001ad0:	4a09      	ldr	r2, [pc, #36]	; (8001af8 <HAL_FLASH_Unlock+0x3c>)
 8001ad2:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8001ad4:	4b07      	ldr	r3, [pc, #28]	; (8001af4 <HAL_FLASH_Unlock+0x38>)
 8001ad6:	4a09      	ldr	r2, [pc, #36]	; (8001afc <HAL_FLASH_Unlock+0x40>)
 8001ad8:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8001ada:	4b06      	ldr	r3, [pc, #24]	; (8001af4 <HAL_FLASH_Unlock+0x38>)
 8001adc:	691b      	ldr	r3, [r3, #16]
 8001ade:	2b00      	cmp	r3, #0
 8001ae0:	da01      	bge.n	8001ae6 <HAL_FLASH_Unlock+0x2a>
    {
      status = HAL_ERROR;
 8001ae2:	2301      	movs	r3, #1
 8001ae4:	71fb      	strb	r3, [r7, #7]
    }
  }

  return status;
 8001ae6:	79fb      	ldrb	r3, [r7, #7]
}
 8001ae8:	4618      	mov	r0, r3
 8001aea:	370c      	adds	r7, #12
 8001aec:	46bd      	mov	sp, r7
 8001aee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001af2:	4770      	bx	lr
 8001af4:	40023c00 	.word	0x40023c00
 8001af8:	45670123 	.word	0x45670123
 8001afc:	cdef89ab 	.word	0xcdef89ab

08001b00 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout maximum flash operationtimeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{ 
 8001b00:	b580      	push	{r7, lr}
 8001b02:	b084      	sub	sp, #16
 8001b04:	af00      	add	r7, sp, #0
 8001b06:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001b08:	2300      	movs	r3, #0
 8001b0a:	60fb      	str	r3, [r7, #12]
  
  /* Clear Error Code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8001b0c:	4b1a      	ldr	r3, [pc, #104]	; (8001b78 <FLASH_WaitForLastOperation+0x78>)
 8001b0e:	2200      	movs	r2, #0
 8001b10:	61da      	str	r2, [r3, #28]
  
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
  /* Get tick */
  tickstart = HAL_GetTick();
 8001b12:	f7ff fd69 	bl	80015e8 <HAL_GetTick>
 8001b16:	60f8      	str	r0, [r7, #12]

  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 8001b18:	e010      	b.n	8001b3c <FLASH_WaitForLastOperation+0x3c>
  { 
    if(Timeout != HAL_MAX_DELAY)
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001b20:	d00c      	beq.n	8001b3c <FLASH_WaitForLastOperation+0x3c>
    {
      if((Timeout == 0U)||((HAL_GetTick() - tickstart ) > Timeout))
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	2b00      	cmp	r3, #0
 8001b26:	d007      	beq.n	8001b38 <FLASH_WaitForLastOperation+0x38>
 8001b28:	f7ff fd5e 	bl	80015e8 <HAL_GetTick>
 8001b2c:	4602      	mov	r2, r0
 8001b2e:	68fb      	ldr	r3, [r7, #12]
 8001b30:	1ad3      	subs	r3, r2, r3
 8001b32:	687a      	ldr	r2, [r7, #4]
 8001b34:	429a      	cmp	r2, r3
 8001b36:	d201      	bcs.n	8001b3c <FLASH_WaitForLastOperation+0x3c>
      {
        return HAL_TIMEOUT;
 8001b38:	2303      	movs	r3, #3
 8001b3a:	e019      	b.n	8001b70 <FLASH_WaitForLastOperation+0x70>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 8001b3c:	4b0f      	ldr	r3, [pc, #60]	; (8001b7c <FLASH_WaitForLastOperation+0x7c>)
 8001b3e:	68db      	ldr	r3, [r3, #12]
 8001b40:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001b44:	2b00      	cmp	r3, #0
 8001b46:	d1e8      	bne.n	8001b1a <FLASH_WaitForLastOperation+0x1a>
      }
    } 
  }

  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP) != RESET)
 8001b48:	4b0c      	ldr	r3, [pc, #48]	; (8001b7c <FLASH_WaitForLastOperation+0x7c>)
 8001b4a:	68db      	ldr	r3, [r3, #12]
 8001b4c:	f003 0301 	and.w	r3, r3, #1
 8001b50:	2b00      	cmp	r3, #0
 8001b52:	d002      	beq.n	8001b5a <FLASH_WaitForLastOperation+0x5a>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8001b54:	4b09      	ldr	r3, [pc, #36]	; (8001b7c <FLASH_WaitForLastOperation+0x7c>)
 8001b56:	2201      	movs	r2, #1
 8001b58:	60da      	str	r2, [r3, #12]
  }
#if defined(FLASH_SR_RDERR)  
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
                           FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR | FLASH_FLAG_RDERR)) != RESET)
#else
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
 8001b5a:	4b08      	ldr	r3, [pc, #32]	; (8001b7c <FLASH_WaitForLastOperation+0x7c>)
 8001b5c:	68db      	ldr	r3, [r3, #12]
 8001b5e:	f003 03f2 	and.w	r3, r3, #242	; 0xf2
 8001b62:	2b00      	cmp	r3, #0
 8001b64:	d003      	beq.n	8001b6e <FLASH_WaitForLastOperation+0x6e>
                           FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR)) != RESET)
#endif /* FLASH_SR_RDERR */
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 8001b66:	f000 f8a3 	bl	8001cb0 <FLASH_SetErrorCode>
    return HAL_ERROR;
 8001b6a:	2301      	movs	r3, #1
 8001b6c:	e000      	b.n	8001b70 <FLASH_WaitForLastOperation+0x70>
  }

  /* If there is no error flag set */
  return HAL_OK;
 8001b6e:	2300      	movs	r3, #0
  
}  
 8001b70:	4618      	mov	r0, r3
 8001b72:	3710      	adds	r7, #16
 8001b74:	46bd      	mov	sp, r7
 8001b76:	bd80      	pop	{r7, pc}
 8001b78:	200004d0 	.word	0x200004d0
 8001b7c:	40023c00 	.word	0x40023c00

08001b80 <FLASH_Program_DoubleWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 8001b80:	b490      	push	{r4, r7}
 8001b82:	b084      	sub	sp, #16
 8001b84:	af00      	add	r7, sp, #0
 8001b86:	60f8      	str	r0, [r7, #12]
 8001b88:	e9c7 2300 	strd	r2, r3, [r7]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8001b8c:	4b13      	ldr	r3, [pc, #76]	; (8001bdc <FLASH_Program_DoubleWord+0x5c>)
 8001b8e:	691b      	ldr	r3, [r3, #16]
 8001b90:	4a12      	ldr	r2, [pc, #72]	; (8001bdc <FLASH_Program_DoubleWord+0x5c>)
 8001b92:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001b96:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_DOUBLE_WORD;
 8001b98:	4b10      	ldr	r3, [pc, #64]	; (8001bdc <FLASH_Program_DoubleWord+0x5c>)
 8001b9a:	691b      	ldr	r3, [r3, #16]
 8001b9c:	4a0f      	ldr	r2, [pc, #60]	; (8001bdc <FLASH_Program_DoubleWord+0x5c>)
 8001b9e:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8001ba2:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8001ba4:	4b0d      	ldr	r3, [pc, #52]	; (8001bdc <FLASH_Program_DoubleWord+0x5c>)
 8001ba6:	691b      	ldr	r3, [r3, #16]
 8001ba8:	4a0c      	ldr	r2, [pc, #48]	; (8001bdc <FLASH_Program_DoubleWord+0x5c>)
 8001baa:	f043 0301 	orr.w	r3, r3, #1
 8001bae:	6113      	str	r3, [r2, #16]

  /* Program first word */
  *(__IO uint32_t*)Address = (uint32_t)Data;
 8001bb0:	68fb      	ldr	r3, [r7, #12]
 8001bb2:	683a      	ldr	r2, [r7, #0]
 8001bb4:	601a      	str	r2, [r3, #0]
  __ASM volatile ("isb 0xF":::"memory");
 8001bb6:	f3bf 8f6f 	isb	sy
  /* Barrier to ensure programming is performed in 2 steps, in right order
    (independently of compiler optimization behavior) */
  __ISB();

  /* Program second word */
  *(__IO uint32_t*)(Address+4) = (uint32_t)(Data >> 32);
 8001bba:	e9d7 1200 	ldrd	r1, r2, [r7]
 8001bbe:	f04f 0300 	mov.w	r3, #0
 8001bc2:	f04f 0400 	mov.w	r4, #0
 8001bc6:	0013      	movs	r3, r2
 8001bc8:	2400      	movs	r4, #0
 8001bca:	68fa      	ldr	r2, [r7, #12]
 8001bcc:	3204      	adds	r2, #4
 8001bce:	6013      	str	r3, [r2, #0]
}
 8001bd0:	bf00      	nop
 8001bd2:	3710      	adds	r7, #16
 8001bd4:	46bd      	mov	sp, r7
 8001bd6:	bc90      	pop	{r4, r7}
 8001bd8:	4770      	bx	lr
 8001bda:	bf00      	nop
 8001bdc:	40023c00 	.word	0x40023c00

08001be0 <FLASH_Program_Word>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Word(uint32_t Address, uint32_t Data)
{
 8001be0:	b480      	push	{r7}
 8001be2:	b083      	sub	sp, #12
 8001be4:	af00      	add	r7, sp, #0
 8001be6:	6078      	str	r0, [r7, #4]
 8001be8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8001bea:	4b0d      	ldr	r3, [pc, #52]	; (8001c20 <FLASH_Program_Word+0x40>)
 8001bec:	691b      	ldr	r3, [r3, #16]
 8001bee:	4a0c      	ldr	r2, [pc, #48]	; (8001c20 <FLASH_Program_Word+0x40>)
 8001bf0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001bf4:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_WORD;
 8001bf6:	4b0a      	ldr	r3, [pc, #40]	; (8001c20 <FLASH_Program_Word+0x40>)
 8001bf8:	691b      	ldr	r3, [r3, #16]
 8001bfa:	4a09      	ldr	r2, [pc, #36]	; (8001c20 <FLASH_Program_Word+0x40>)
 8001bfc:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001c00:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8001c02:	4b07      	ldr	r3, [pc, #28]	; (8001c20 <FLASH_Program_Word+0x40>)
 8001c04:	691b      	ldr	r3, [r3, #16]
 8001c06:	4a06      	ldr	r2, [pc, #24]	; (8001c20 <FLASH_Program_Word+0x40>)
 8001c08:	f043 0301 	orr.w	r3, r3, #1
 8001c0c:	6113      	str	r3, [r2, #16]

  *(__IO uint32_t*)Address = Data;
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	683a      	ldr	r2, [r7, #0]
 8001c12:	601a      	str	r2, [r3, #0]
}
 8001c14:	bf00      	nop
 8001c16:	370c      	adds	r7, #12
 8001c18:	46bd      	mov	sp, r7
 8001c1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c1e:	4770      	bx	lr
 8001c20:	40023c00 	.word	0x40023c00

08001c24 <FLASH_Program_HalfWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 8001c24:	b480      	push	{r7}
 8001c26:	b083      	sub	sp, #12
 8001c28:	af00      	add	r7, sp, #0
 8001c2a:	6078      	str	r0, [r7, #4]
 8001c2c:	460b      	mov	r3, r1
 8001c2e:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8001c30:	4b0d      	ldr	r3, [pc, #52]	; (8001c68 <FLASH_Program_HalfWord+0x44>)
 8001c32:	691b      	ldr	r3, [r3, #16]
 8001c34:	4a0c      	ldr	r2, [pc, #48]	; (8001c68 <FLASH_Program_HalfWord+0x44>)
 8001c36:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001c3a:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_HALF_WORD;
 8001c3c:	4b0a      	ldr	r3, [pc, #40]	; (8001c68 <FLASH_Program_HalfWord+0x44>)
 8001c3e:	691b      	ldr	r3, [r3, #16]
 8001c40:	4a09      	ldr	r2, [pc, #36]	; (8001c68 <FLASH_Program_HalfWord+0x44>)
 8001c42:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001c46:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8001c48:	4b07      	ldr	r3, [pc, #28]	; (8001c68 <FLASH_Program_HalfWord+0x44>)
 8001c4a:	691b      	ldr	r3, [r3, #16]
 8001c4c:	4a06      	ldr	r2, [pc, #24]	; (8001c68 <FLASH_Program_HalfWord+0x44>)
 8001c4e:	f043 0301 	orr.w	r3, r3, #1
 8001c52:	6113      	str	r3, [r2, #16]

  *(__IO uint16_t*)Address = Data;
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	887a      	ldrh	r2, [r7, #2]
 8001c58:	801a      	strh	r2, [r3, #0]
}
 8001c5a:	bf00      	nop
 8001c5c:	370c      	adds	r7, #12
 8001c5e:	46bd      	mov	sp, r7
 8001c60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c64:	4770      	bx	lr
 8001c66:	bf00      	nop
 8001c68:	40023c00 	.word	0x40023c00

08001c6c <FLASH_Program_Byte>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Byte(uint32_t Address, uint8_t Data)
{
 8001c6c:	b480      	push	{r7}
 8001c6e:	b083      	sub	sp, #12
 8001c70:	af00      	add	r7, sp, #0
 8001c72:	6078      	str	r0, [r7, #4]
 8001c74:	460b      	mov	r3, r1
 8001c76:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8001c78:	4b0c      	ldr	r3, [pc, #48]	; (8001cac <FLASH_Program_Byte+0x40>)
 8001c7a:	691b      	ldr	r3, [r3, #16]
 8001c7c:	4a0b      	ldr	r2, [pc, #44]	; (8001cac <FLASH_Program_Byte+0x40>)
 8001c7e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001c82:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_BYTE;
 8001c84:	4b09      	ldr	r3, [pc, #36]	; (8001cac <FLASH_Program_Byte+0x40>)
 8001c86:	4a09      	ldr	r2, [pc, #36]	; (8001cac <FLASH_Program_Byte+0x40>)
 8001c88:	691b      	ldr	r3, [r3, #16]
 8001c8a:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8001c8c:	4b07      	ldr	r3, [pc, #28]	; (8001cac <FLASH_Program_Byte+0x40>)
 8001c8e:	691b      	ldr	r3, [r3, #16]
 8001c90:	4a06      	ldr	r2, [pc, #24]	; (8001cac <FLASH_Program_Byte+0x40>)
 8001c92:	f043 0301 	orr.w	r3, r3, #1
 8001c96:	6113      	str	r3, [r2, #16]

  *(__IO uint8_t*)Address = Data;
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	78fa      	ldrb	r2, [r7, #3]
 8001c9c:	701a      	strb	r2, [r3, #0]
}
 8001c9e:	bf00      	nop
 8001ca0:	370c      	adds	r7, #12
 8001ca2:	46bd      	mov	sp, r7
 8001ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ca8:	4770      	bx	lr
 8001caa:	bf00      	nop
 8001cac:	40023c00 	.word	0x40023c00

08001cb0 <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{ 
 8001cb0:	b480      	push	{r7}
 8001cb2:	af00      	add	r7, sp, #0
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) != RESET)
 8001cb4:	4b27      	ldr	r3, [pc, #156]	; (8001d54 <FLASH_SetErrorCode+0xa4>)
 8001cb6:	68db      	ldr	r3, [r3, #12]
 8001cb8:	f003 0310 	and.w	r3, r3, #16
 8001cbc:	2b00      	cmp	r3, #0
 8001cbe:	d008      	beq.n	8001cd2 <FLASH_SetErrorCode+0x22>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 8001cc0:	4b25      	ldr	r3, [pc, #148]	; (8001d58 <FLASH_SetErrorCode+0xa8>)
 8001cc2:	69db      	ldr	r3, [r3, #28]
 8001cc4:	f043 0310 	orr.w	r3, r3, #16
 8001cc8:	4a23      	ldr	r2, [pc, #140]	; (8001d58 <FLASH_SetErrorCode+0xa8>)
 8001cca:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH write protection error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_WRPERR);
 8001ccc:	4b21      	ldr	r3, [pc, #132]	; (8001d54 <FLASH_SetErrorCode+0xa4>)
 8001cce:	2210      	movs	r2, #16
 8001cd0:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR) != RESET)
 8001cd2:	4b20      	ldr	r3, [pc, #128]	; (8001d54 <FLASH_SetErrorCode+0xa4>)
 8001cd4:	68db      	ldr	r3, [r3, #12]
 8001cd6:	f003 0320 	and.w	r3, r3, #32
 8001cda:	2b00      	cmp	r3, #0
 8001cdc:	d008      	beq.n	8001cf0 <FLASH_SetErrorCode+0x40>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_PGA;
 8001cde:	4b1e      	ldr	r3, [pc, #120]	; (8001d58 <FLASH_SetErrorCode+0xa8>)
 8001ce0:	69db      	ldr	r3, [r3, #28]
 8001ce2:	f043 0308 	orr.w	r3, r3, #8
 8001ce6:	4a1c      	ldr	r2, [pc, #112]	; (8001d58 <FLASH_SetErrorCode+0xa8>)
 8001ce8:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH Programming alignment error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGAERR);
 8001cea:	4b1a      	ldr	r3, [pc, #104]	; (8001d54 <FLASH_SetErrorCode+0xa4>)
 8001cec:	2220      	movs	r2, #32
 8001cee:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGPERR) != RESET)
 8001cf0:	4b18      	ldr	r3, [pc, #96]	; (8001d54 <FLASH_SetErrorCode+0xa4>)
 8001cf2:	68db      	ldr	r3, [r3, #12]
 8001cf4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001cf8:	2b00      	cmp	r3, #0
 8001cfa:	d008      	beq.n	8001d0e <FLASH_SetErrorCode+0x5e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGP;
 8001cfc:	4b16      	ldr	r3, [pc, #88]	; (8001d58 <FLASH_SetErrorCode+0xa8>)
 8001cfe:	69db      	ldr	r3, [r3, #28]
 8001d00:	f043 0304 	orr.w	r3, r3, #4
 8001d04:	4a14      	ldr	r2, [pc, #80]	; (8001d58 <FLASH_SetErrorCode+0xa8>)
 8001d06:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming parallelism error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGPERR);
 8001d08:	4b12      	ldr	r3, [pc, #72]	; (8001d54 <FLASH_SetErrorCode+0xa4>)
 8001d0a:	2240      	movs	r2, #64	; 0x40
 8001d0c:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGSERR) != RESET)
 8001d0e:	4b11      	ldr	r3, [pc, #68]	; (8001d54 <FLASH_SetErrorCode+0xa4>)
 8001d10:	68db      	ldr	r3, [r3, #12]
 8001d12:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001d16:	2b00      	cmp	r3, #0
 8001d18:	d008      	beq.n	8001d2c <FLASH_SetErrorCode+0x7c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGS;
 8001d1a:	4b0f      	ldr	r3, [pc, #60]	; (8001d58 <FLASH_SetErrorCode+0xa8>)
 8001d1c:	69db      	ldr	r3, [r3, #28]
 8001d1e:	f043 0302 	orr.w	r3, r3, #2
 8001d22:	4a0d      	ldr	r2, [pc, #52]	; (8001d58 <FLASH_SetErrorCode+0xa8>)
 8001d24:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming sequence error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGSERR);
 8001d26:	4b0b      	ldr	r3, [pc, #44]	; (8001d54 <FLASH_SetErrorCode+0xa4>)
 8001d28:	2280      	movs	r2, #128	; 0x80
 8001d2a:	60da      	str	r2, [r3, #12]
    
    /* Clear FLASH Proprietary readout protection error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_RDERR);
  }
#endif /* FLASH_SR_RDERR */  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPERR) != RESET)
 8001d2c:	4b09      	ldr	r3, [pc, #36]	; (8001d54 <FLASH_SetErrorCode+0xa4>)
 8001d2e:	68db      	ldr	r3, [r3, #12]
 8001d30:	f003 0302 	and.w	r3, r3, #2
 8001d34:	2b00      	cmp	r3, #0
 8001d36:	d008      	beq.n	8001d4a <FLASH_SetErrorCode+0x9a>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPERATION;
 8001d38:	4b07      	ldr	r3, [pc, #28]	; (8001d58 <FLASH_SetErrorCode+0xa8>)
 8001d3a:	69db      	ldr	r3, [r3, #28]
 8001d3c:	f043 0320 	orr.w	r3, r3, #32
 8001d40:	4a05      	ldr	r2, [pc, #20]	; (8001d58 <FLASH_SetErrorCode+0xa8>)
 8001d42:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Operation error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPERR);
 8001d44:	4b03      	ldr	r3, [pc, #12]	; (8001d54 <FLASH_SetErrorCode+0xa4>)
 8001d46:	2202      	movs	r2, #2
 8001d48:	60da      	str	r2, [r3, #12]
  }
}
 8001d4a:	bf00      	nop
 8001d4c:	46bd      	mov	sp, r7
 8001d4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d52:	4770      	bx	lr
 8001d54:	40023c00 	.word	0x40023c00
 8001d58:	200004d0 	.word	0x200004d0

08001d5c <HAL_FLASHEx_Erase>:
  *         (0xFFFFFFFFU means that all the sectors have been correctly erased)
  * 
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *SectorError)
{
 8001d5c:	b580      	push	{r7, lr}
 8001d5e:	b084      	sub	sp, #16
 8001d60:	af00      	add	r7, sp, #0
 8001d62:	6078      	str	r0, [r7, #4]
 8001d64:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_ERROR;
 8001d66:	2301      	movs	r3, #1
 8001d68:	73fb      	strb	r3, [r7, #15]
  uint32_t index = 0U;
 8001d6a:	2300      	movs	r3, #0
 8001d6c:	60bb      	str	r3, [r7, #8]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8001d6e:	4b31      	ldr	r3, [pc, #196]	; (8001e34 <HAL_FLASHEx_Erase+0xd8>)
 8001d70:	7e1b      	ldrb	r3, [r3, #24]
 8001d72:	2b01      	cmp	r3, #1
 8001d74:	d101      	bne.n	8001d7a <HAL_FLASHEx_Erase+0x1e>
 8001d76:	2302      	movs	r3, #2
 8001d78:	e058      	b.n	8001e2c <HAL_FLASHEx_Erase+0xd0>
 8001d7a:	4b2e      	ldr	r3, [pc, #184]	; (8001e34 <HAL_FLASHEx_Erase+0xd8>)
 8001d7c:	2201      	movs	r2, #1
 8001d7e:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8001d80:	f24c 3050 	movw	r0, #50000	; 0xc350
 8001d84:	f7ff febc 	bl	8001b00 <FLASH_WaitForLastOperation>
 8001d88:	4603      	mov	r3, r0
 8001d8a:	73fb      	strb	r3, [r7, #15]

  if(status == HAL_OK)
 8001d8c:	7bfb      	ldrb	r3, [r7, #15]
 8001d8e:	2b00      	cmp	r3, #0
 8001d90:	d148      	bne.n	8001e24 <HAL_FLASHEx_Erase+0xc8>
  {
    /*Initialization of SectorError variable*/
    *SectorError = 0xFFFFFFFFU;
 8001d92:	683b      	ldr	r3, [r7, #0]
 8001d94:	f04f 32ff 	mov.w	r2, #4294967295
 8001d98:	601a      	str	r2, [r3, #0]
    
    if(pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	2b01      	cmp	r3, #1
 8001da0:	d115      	bne.n	8001dce <HAL_FLASHEx_Erase+0x72>
    {
      /*Mass erase to be done*/
      FLASH_MassErase((uint8_t) pEraseInit->VoltageRange, pEraseInit->Banks);
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	691b      	ldr	r3, [r3, #16]
 8001da6:	b2da      	uxtb	r2, r3
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	685b      	ldr	r3, [r3, #4]
 8001dac:	4619      	mov	r1, r3
 8001dae:	4610      	mov	r0, r2
 8001db0:	f000 f844 	bl	8001e3c <FLASH_MassErase>

      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8001db4:	f24c 3050 	movw	r0, #50000	; 0xc350
 8001db8:	f7ff fea2 	bl	8001b00 <FLASH_WaitForLastOperation>
 8001dbc:	4603      	mov	r3, r0
 8001dbe:	73fb      	strb	r3, [r7, #15]
      
      /* if the erase operation is completed, disable the MER Bit */
      FLASH->CR &= (~FLASH_MER_BIT);
 8001dc0:	4b1d      	ldr	r3, [pc, #116]	; (8001e38 <HAL_FLASHEx_Erase+0xdc>)
 8001dc2:	691b      	ldr	r3, [r3, #16]
 8001dc4:	4a1c      	ldr	r2, [pc, #112]	; (8001e38 <HAL_FLASHEx_Erase+0xdc>)
 8001dc6:	f023 0304 	bic.w	r3, r3, #4
 8001dca:	6113      	str	r3, [r2, #16]
 8001dcc:	e028      	b.n	8001e20 <HAL_FLASHEx_Erase+0xc4>
    {
      /* Check the parameters */
      assert_param(IS_FLASH_NBSECTORS(pEraseInit->NbSectors + pEraseInit->Sector));

      /* Erase by sector by sector to be done*/
      for(index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	689b      	ldr	r3, [r3, #8]
 8001dd2:	60bb      	str	r3, [r7, #8]
 8001dd4:	e01c      	b.n	8001e10 <HAL_FLASHEx_Erase+0xb4>
      {
        FLASH_Erase_Sector(index, (uint8_t) pEraseInit->VoltageRange);
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	691b      	ldr	r3, [r3, #16]
 8001dda:	b2db      	uxtb	r3, r3
 8001ddc:	4619      	mov	r1, r3
 8001dde:	68b8      	ldr	r0, [r7, #8]
 8001de0:	f000 f850 	bl	8001e84 <FLASH_Erase_Sector>

        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8001de4:	f24c 3050 	movw	r0, #50000	; 0xc350
 8001de8:	f7ff fe8a 	bl	8001b00 <FLASH_WaitForLastOperation>
 8001dec:	4603      	mov	r3, r0
 8001dee:	73fb      	strb	r3, [r7, #15]
        
        /* If the erase operation is completed, disable the SER and SNB Bits */
        CLEAR_BIT(FLASH->CR, (FLASH_CR_SER | FLASH_CR_SNB));
 8001df0:	4b11      	ldr	r3, [pc, #68]	; (8001e38 <HAL_FLASHEx_Erase+0xdc>)
 8001df2:	691b      	ldr	r3, [r3, #16]
 8001df4:	4a10      	ldr	r2, [pc, #64]	; (8001e38 <HAL_FLASHEx_Erase+0xdc>)
 8001df6:	f023 03fa 	bic.w	r3, r3, #250	; 0xfa
 8001dfa:	6113      	str	r3, [r2, #16]

        if(status != HAL_OK) 
 8001dfc:	7bfb      	ldrb	r3, [r7, #15]
 8001dfe:	2b00      	cmp	r3, #0
 8001e00:	d003      	beq.n	8001e0a <HAL_FLASHEx_Erase+0xae>
        {
          /* In case of error, stop erase procedure and return the faulty sector*/
          *SectorError = index;
 8001e02:	683b      	ldr	r3, [r7, #0]
 8001e04:	68ba      	ldr	r2, [r7, #8]
 8001e06:	601a      	str	r2, [r3, #0]
          break;
 8001e08:	e00a      	b.n	8001e20 <HAL_FLASHEx_Erase+0xc4>
      for(index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 8001e0a:	68bb      	ldr	r3, [r7, #8]
 8001e0c:	3301      	adds	r3, #1
 8001e0e:	60bb      	str	r3, [r7, #8]
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	68da      	ldr	r2, [r3, #12]
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	689b      	ldr	r3, [r3, #8]
 8001e18:	4413      	add	r3, r2
 8001e1a:	68ba      	ldr	r2, [r7, #8]
 8001e1c:	429a      	cmp	r2, r3
 8001e1e:	d3da      	bcc.n	8001dd6 <HAL_FLASHEx_Erase+0x7a>
        }
      }
    }
    /* Flush the caches to be sure of the data consistency */
    FLASH_FlushCaches();    
 8001e20:	f000 f878 	bl	8001f14 <FLASH_FlushCaches>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8001e24:	4b03      	ldr	r3, [pc, #12]	; (8001e34 <HAL_FLASHEx_Erase+0xd8>)
 8001e26:	2200      	movs	r2, #0
 8001e28:	761a      	strb	r2, [r3, #24]

  return status;
 8001e2a:	7bfb      	ldrb	r3, [r7, #15]
}
 8001e2c:	4618      	mov	r0, r3
 8001e2e:	3710      	adds	r7, #16
 8001e30:	46bd      	mov	sp, r7
 8001e32:	bd80      	pop	{r7, pc}
 8001e34:	200004d0 	.word	0x200004d0
 8001e38:	40023c00 	.word	0x40023c00

08001e3c <FLASH_MassErase>:
  *            @arg FLASH_BANK_1: Bank1 to be erased
  *
  * @retval None
  */
static void FLASH_MassErase(uint8_t VoltageRange, uint32_t Banks)
{
 8001e3c:	b480      	push	{r7}
 8001e3e:	b083      	sub	sp, #12
 8001e40:	af00      	add	r7, sp, #0
 8001e42:	4603      	mov	r3, r0
 8001e44:	6039      	str	r1, [r7, #0]
 8001e46:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_VOLTAGERANGE(VoltageRange));
  assert_param(IS_FLASH_BANK(Banks));
  
  /* If the previous operation is completed, proceed to erase all sectors */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8001e48:	4b0d      	ldr	r3, [pc, #52]	; (8001e80 <FLASH_MassErase+0x44>)
 8001e4a:	691b      	ldr	r3, [r3, #16]
 8001e4c:	4a0c      	ldr	r2, [pc, #48]	; (8001e80 <FLASH_MassErase+0x44>)
 8001e4e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001e52:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_MER;
 8001e54:	4b0a      	ldr	r3, [pc, #40]	; (8001e80 <FLASH_MassErase+0x44>)
 8001e56:	691b      	ldr	r3, [r3, #16]
 8001e58:	4a09      	ldr	r2, [pc, #36]	; (8001e80 <FLASH_MassErase+0x44>)
 8001e5a:	f043 0304 	orr.w	r3, r3, #4
 8001e5e:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT | ((uint32_t)VoltageRange <<8U);
 8001e60:	4b07      	ldr	r3, [pc, #28]	; (8001e80 <FLASH_MassErase+0x44>)
 8001e62:	691a      	ldr	r2, [r3, #16]
 8001e64:	79fb      	ldrb	r3, [r7, #7]
 8001e66:	021b      	lsls	r3, r3, #8
 8001e68:	4313      	orrs	r3, r2
 8001e6a:	4a05      	ldr	r2, [pc, #20]	; (8001e80 <FLASH_MassErase+0x44>)
 8001e6c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001e70:	6113      	str	r3, [r2, #16]
}
 8001e72:	bf00      	nop
 8001e74:	370c      	adds	r7, #12
 8001e76:	46bd      	mov	sp, r7
 8001e78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e7c:	4770      	bx	lr
 8001e7e:	bf00      	nop
 8001e80:	40023c00 	.word	0x40023c00

08001e84 <FLASH_Erase_Sector>:
  *                                  the operation will be done by double word (64-bit)
  * 
  * @retval None
  */
void FLASH_Erase_Sector(uint32_t Sector, uint8_t VoltageRange)
{
 8001e84:	b480      	push	{r7}
 8001e86:	b085      	sub	sp, #20
 8001e88:	af00      	add	r7, sp, #0
 8001e8a:	6078      	str	r0, [r7, #4]
 8001e8c:	460b      	mov	r3, r1
 8001e8e:	70fb      	strb	r3, [r7, #3]
  uint32_t tmp_psize = 0U;
 8001e90:	2300      	movs	r3, #0
 8001e92:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_FLASH_SECTOR(Sector));
  assert_param(IS_VOLTAGERANGE(VoltageRange));
  
  if(VoltageRange == FLASH_VOLTAGE_RANGE_1)
 8001e94:	78fb      	ldrb	r3, [r7, #3]
 8001e96:	2b00      	cmp	r3, #0
 8001e98:	d102      	bne.n	8001ea0 <FLASH_Erase_Sector+0x1c>
  {
     tmp_psize = FLASH_PSIZE_BYTE;
 8001e9a:	2300      	movs	r3, #0
 8001e9c:	60fb      	str	r3, [r7, #12]
 8001e9e:	e010      	b.n	8001ec2 <FLASH_Erase_Sector+0x3e>
  }
  else if(VoltageRange == FLASH_VOLTAGE_RANGE_2)
 8001ea0:	78fb      	ldrb	r3, [r7, #3]
 8001ea2:	2b01      	cmp	r3, #1
 8001ea4:	d103      	bne.n	8001eae <FLASH_Erase_Sector+0x2a>
  {
    tmp_psize = FLASH_PSIZE_HALF_WORD;
 8001ea6:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001eaa:	60fb      	str	r3, [r7, #12]
 8001eac:	e009      	b.n	8001ec2 <FLASH_Erase_Sector+0x3e>
  }
  else if(VoltageRange == FLASH_VOLTAGE_RANGE_3)
 8001eae:	78fb      	ldrb	r3, [r7, #3]
 8001eb0:	2b02      	cmp	r3, #2
 8001eb2:	d103      	bne.n	8001ebc <FLASH_Erase_Sector+0x38>
  {
    tmp_psize = FLASH_PSIZE_WORD;
 8001eb4:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001eb8:	60fb      	str	r3, [r7, #12]
 8001eba:	e002      	b.n	8001ec2 <FLASH_Erase_Sector+0x3e>
  }
  else
  {
    tmp_psize = FLASH_PSIZE_DOUBLE_WORD;
 8001ebc:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001ec0:	60fb      	str	r3, [r7, #12]
  }

  /* If the previous operation is completed, proceed to erase the sector */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8001ec2:	4b13      	ldr	r3, [pc, #76]	; (8001f10 <FLASH_Erase_Sector+0x8c>)
 8001ec4:	691b      	ldr	r3, [r3, #16]
 8001ec6:	4a12      	ldr	r2, [pc, #72]	; (8001f10 <FLASH_Erase_Sector+0x8c>)
 8001ec8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001ecc:	6113      	str	r3, [r2, #16]
  FLASH->CR |= tmp_psize;
 8001ece:	4b10      	ldr	r3, [pc, #64]	; (8001f10 <FLASH_Erase_Sector+0x8c>)
 8001ed0:	691a      	ldr	r2, [r3, #16]
 8001ed2:	490f      	ldr	r1, [pc, #60]	; (8001f10 <FLASH_Erase_Sector+0x8c>)
 8001ed4:	68fb      	ldr	r3, [r7, #12]
 8001ed6:	4313      	orrs	r3, r2
 8001ed8:	610b      	str	r3, [r1, #16]
  CLEAR_BIT(FLASH->CR, FLASH_CR_SNB);
 8001eda:	4b0d      	ldr	r3, [pc, #52]	; (8001f10 <FLASH_Erase_Sector+0x8c>)
 8001edc:	691b      	ldr	r3, [r3, #16]
 8001ede:	4a0c      	ldr	r2, [pc, #48]	; (8001f10 <FLASH_Erase_Sector+0x8c>)
 8001ee0:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8001ee4:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_SER | (Sector << FLASH_CR_SNB_Pos);
 8001ee6:	4b0a      	ldr	r3, [pc, #40]	; (8001f10 <FLASH_Erase_Sector+0x8c>)
 8001ee8:	691a      	ldr	r2, [r3, #16]
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	00db      	lsls	r3, r3, #3
 8001eee:	4313      	orrs	r3, r2
 8001ef0:	4a07      	ldr	r2, [pc, #28]	; (8001f10 <FLASH_Erase_Sector+0x8c>)
 8001ef2:	f043 0302 	orr.w	r3, r3, #2
 8001ef6:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT;
 8001ef8:	4b05      	ldr	r3, [pc, #20]	; (8001f10 <FLASH_Erase_Sector+0x8c>)
 8001efa:	691b      	ldr	r3, [r3, #16]
 8001efc:	4a04      	ldr	r2, [pc, #16]	; (8001f10 <FLASH_Erase_Sector+0x8c>)
 8001efe:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001f02:	6113      	str	r3, [r2, #16]
}
 8001f04:	bf00      	nop
 8001f06:	3714      	adds	r7, #20
 8001f08:	46bd      	mov	sp, r7
 8001f0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f0e:	4770      	bx	lr
 8001f10:	40023c00 	.word	0x40023c00

08001f14 <FLASH_FlushCaches>:
/**
  * @brief  Flush the instruction and data caches
  * @retval None
  */
void FLASH_FlushCaches(void)
{
 8001f14:	b480      	push	{r7}
 8001f16:	af00      	add	r7, sp, #0
  /* Flush instruction cache  */
  if(READ_BIT(FLASH->ACR, FLASH_ACR_ICEN)!= RESET)
 8001f18:	4b20      	ldr	r3, [pc, #128]	; (8001f9c <FLASH_FlushCaches+0x88>)
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001f20:	2b00      	cmp	r3, #0
 8001f22:	d017      	beq.n	8001f54 <FLASH_FlushCaches+0x40>
  {
    /* Disable instruction cache  */
    __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
 8001f24:	4b1d      	ldr	r3, [pc, #116]	; (8001f9c <FLASH_FlushCaches+0x88>)
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	4a1c      	ldr	r2, [pc, #112]	; (8001f9c <FLASH_FlushCaches+0x88>)
 8001f2a:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8001f2e:	6013      	str	r3, [r2, #0]
    /* Reset instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_RESET();
 8001f30:	4b1a      	ldr	r3, [pc, #104]	; (8001f9c <FLASH_FlushCaches+0x88>)
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	4a19      	ldr	r2, [pc, #100]	; (8001f9c <FLASH_FlushCaches+0x88>)
 8001f36:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001f3a:	6013      	str	r3, [r2, #0]
 8001f3c:	4b17      	ldr	r3, [pc, #92]	; (8001f9c <FLASH_FlushCaches+0x88>)
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	4a16      	ldr	r2, [pc, #88]	; (8001f9c <FLASH_FlushCaches+0x88>)
 8001f42:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8001f46:	6013      	str	r3, [r2, #0]
    /* Enable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001f48:	4b14      	ldr	r3, [pc, #80]	; (8001f9c <FLASH_FlushCaches+0x88>)
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	4a13      	ldr	r2, [pc, #76]	; (8001f9c <FLASH_FlushCaches+0x88>)
 8001f4e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001f52:	6013      	str	r3, [r2, #0]
  }
  
  /* Flush data cache */
  if(READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != RESET)
 8001f54:	4b11      	ldr	r3, [pc, #68]	; (8001f9c <FLASH_FlushCaches+0x88>)
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001f5c:	2b00      	cmp	r3, #0
 8001f5e:	d017      	beq.n	8001f90 <FLASH_FlushCaches+0x7c>
  {
    /* Disable data cache  */
    __HAL_FLASH_DATA_CACHE_DISABLE();
 8001f60:	4b0e      	ldr	r3, [pc, #56]	; (8001f9c <FLASH_FlushCaches+0x88>)
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	4a0d      	ldr	r2, [pc, #52]	; (8001f9c <FLASH_FlushCaches+0x88>)
 8001f66:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8001f6a:	6013      	str	r3, [r2, #0]
    /* Reset data cache */
    __HAL_FLASH_DATA_CACHE_RESET();
 8001f6c:	4b0b      	ldr	r3, [pc, #44]	; (8001f9c <FLASH_FlushCaches+0x88>)
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	4a0a      	ldr	r2, [pc, #40]	; (8001f9c <FLASH_FlushCaches+0x88>)
 8001f72:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001f76:	6013      	str	r3, [r2, #0]
 8001f78:	4b08      	ldr	r3, [pc, #32]	; (8001f9c <FLASH_FlushCaches+0x88>)
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	4a07      	ldr	r2, [pc, #28]	; (8001f9c <FLASH_FlushCaches+0x88>)
 8001f7e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8001f82:	6013      	str	r3, [r2, #0]
    /* Enable data cache */
    __HAL_FLASH_DATA_CACHE_ENABLE();
 8001f84:	4b05      	ldr	r3, [pc, #20]	; (8001f9c <FLASH_FlushCaches+0x88>)
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	4a04      	ldr	r2, [pc, #16]	; (8001f9c <FLASH_FlushCaches+0x88>)
 8001f8a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001f8e:	6013      	str	r3, [r2, #0]
  }
}
 8001f90:	bf00      	nop
 8001f92:	46bd      	mov	sp, r7
 8001f94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f98:	4770      	bx	lr
 8001f9a:	bf00      	nop
 8001f9c:	40023c00 	.word	0x40023c00

08001fa0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001fa0:	b480      	push	{r7}
 8001fa2:	b089      	sub	sp, #36	; 0x24
 8001fa4:	af00      	add	r7, sp, #0
 8001fa6:	6078      	str	r0, [r7, #4]
 8001fa8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001faa:	2300      	movs	r3, #0
 8001fac:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001fae:	2300      	movs	r3, #0
 8001fb0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001fb2:	2300      	movs	r3, #0
 8001fb4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001fb6:	2300      	movs	r3, #0
 8001fb8:	61fb      	str	r3, [r7, #28]
 8001fba:	e16b      	b.n	8002294 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001fbc:	2201      	movs	r2, #1
 8001fbe:	69fb      	ldr	r3, [r7, #28]
 8001fc0:	fa02 f303 	lsl.w	r3, r2, r3
 8001fc4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001fc6:	683b      	ldr	r3, [r7, #0]
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	697a      	ldr	r2, [r7, #20]
 8001fcc:	4013      	ands	r3, r2
 8001fce:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001fd0:	693a      	ldr	r2, [r7, #16]
 8001fd2:	697b      	ldr	r3, [r7, #20]
 8001fd4:	429a      	cmp	r2, r3
 8001fd6:	f040 815a 	bne.w	800228e <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001fda:	683b      	ldr	r3, [r7, #0]
 8001fdc:	685b      	ldr	r3, [r3, #4]
 8001fde:	2b01      	cmp	r3, #1
 8001fe0:	d00b      	beq.n	8001ffa <HAL_GPIO_Init+0x5a>
 8001fe2:	683b      	ldr	r3, [r7, #0]
 8001fe4:	685b      	ldr	r3, [r3, #4]
 8001fe6:	2b02      	cmp	r3, #2
 8001fe8:	d007      	beq.n	8001ffa <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001fea:	683b      	ldr	r3, [r7, #0]
 8001fec:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001fee:	2b11      	cmp	r3, #17
 8001ff0:	d003      	beq.n	8001ffa <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001ff2:	683b      	ldr	r3, [r7, #0]
 8001ff4:	685b      	ldr	r3, [r3, #4]
 8001ff6:	2b12      	cmp	r3, #18
 8001ff8:	d130      	bne.n	800205c <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	689b      	ldr	r3, [r3, #8]
 8001ffe:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002000:	69fb      	ldr	r3, [r7, #28]
 8002002:	005b      	lsls	r3, r3, #1
 8002004:	2203      	movs	r2, #3
 8002006:	fa02 f303 	lsl.w	r3, r2, r3
 800200a:	43db      	mvns	r3, r3
 800200c:	69ba      	ldr	r2, [r7, #24]
 800200e:	4013      	ands	r3, r2
 8002010:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002012:	683b      	ldr	r3, [r7, #0]
 8002014:	68da      	ldr	r2, [r3, #12]
 8002016:	69fb      	ldr	r3, [r7, #28]
 8002018:	005b      	lsls	r3, r3, #1
 800201a:	fa02 f303 	lsl.w	r3, r2, r3
 800201e:	69ba      	ldr	r2, [r7, #24]
 8002020:	4313      	orrs	r3, r2
 8002022:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	69ba      	ldr	r2, [r7, #24]
 8002028:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	685b      	ldr	r3, [r3, #4]
 800202e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002030:	2201      	movs	r2, #1
 8002032:	69fb      	ldr	r3, [r7, #28]
 8002034:	fa02 f303 	lsl.w	r3, r2, r3
 8002038:	43db      	mvns	r3, r3
 800203a:	69ba      	ldr	r2, [r7, #24]
 800203c:	4013      	ands	r3, r2
 800203e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8002040:	683b      	ldr	r3, [r7, #0]
 8002042:	685b      	ldr	r3, [r3, #4]
 8002044:	091b      	lsrs	r3, r3, #4
 8002046:	f003 0201 	and.w	r2, r3, #1
 800204a:	69fb      	ldr	r3, [r7, #28]
 800204c:	fa02 f303 	lsl.w	r3, r2, r3
 8002050:	69ba      	ldr	r2, [r7, #24]
 8002052:	4313      	orrs	r3, r2
 8002054:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	69ba      	ldr	r2, [r7, #24]
 800205a:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	68db      	ldr	r3, [r3, #12]
 8002060:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002062:	69fb      	ldr	r3, [r7, #28]
 8002064:	005b      	lsls	r3, r3, #1
 8002066:	2203      	movs	r2, #3
 8002068:	fa02 f303 	lsl.w	r3, r2, r3
 800206c:	43db      	mvns	r3, r3
 800206e:	69ba      	ldr	r2, [r7, #24]
 8002070:	4013      	ands	r3, r2
 8002072:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002074:	683b      	ldr	r3, [r7, #0]
 8002076:	689a      	ldr	r2, [r3, #8]
 8002078:	69fb      	ldr	r3, [r7, #28]
 800207a:	005b      	lsls	r3, r3, #1
 800207c:	fa02 f303 	lsl.w	r3, r2, r3
 8002080:	69ba      	ldr	r2, [r7, #24]
 8002082:	4313      	orrs	r3, r2
 8002084:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	69ba      	ldr	r2, [r7, #24]
 800208a:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800208c:	683b      	ldr	r3, [r7, #0]
 800208e:	685b      	ldr	r3, [r3, #4]
 8002090:	2b02      	cmp	r3, #2
 8002092:	d003      	beq.n	800209c <HAL_GPIO_Init+0xfc>
 8002094:	683b      	ldr	r3, [r7, #0]
 8002096:	685b      	ldr	r3, [r3, #4]
 8002098:	2b12      	cmp	r3, #18
 800209a:	d123      	bne.n	80020e4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800209c:	69fb      	ldr	r3, [r7, #28]
 800209e:	08da      	lsrs	r2, r3, #3
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	3208      	adds	r2, #8
 80020a4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80020a8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80020aa:	69fb      	ldr	r3, [r7, #28]
 80020ac:	f003 0307 	and.w	r3, r3, #7
 80020b0:	009b      	lsls	r3, r3, #2
 80020b2:	220f      	movs	r2, #15
 80020b4:	fa02 f303 	lsl.w	r3, r2, r3
 80020b8:	43db      	mvns	r3, r3
 80020ba:	69ba      	ldr	r2, [r7, #24]
 80020bc:	4013      	ands	r3, r2
 80020be:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80020c0:	683b      	ldr	r3, [r7, #0]
 80020c2:	691a      	ldr	r2, [r3, #16]
 80020c4:	69fb      	ldr	r3, [r7, #28]
 80020c6:	f003 0307 	and.w	r3, r3, #7
 80020ca:	009b      	lsls	r3, r3, #2
 80020cc:	fa02 f303 	lsl.w	r3, r2, r3
 80020d0:	69ba      	ldr	r2, [r7, #24]
 80020d2:	4313      	orrs	r3, r2
 80020d4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80020d6:	69fb      	ldr	r3, [r7, #28]
 80020d8:	08da      	lsrs	r2, r3, #3
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	3208      	adds	r2, #8
 80020de:	69b9      	ldr	r1, [r7, #24]
 80020e0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80020ea:	69fb      	ldr	r3, [r7, #28]
 80020ec:	005b      	lsls	r3, r3, #1
 80020ee:	2203      	movs	r2, #3
 80020f0:	fa02 f303 	lsl.w	r3, r2, r3
 80020f4:	43db      	mvns	r3, r3
 80020f6:	69ba      	ldr	r2, [r7, #24]
 80020f8:	4013      	ands	r3, r2
 80020fa:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80020fc:	683b      	ldr	r3, [r7, #0]
 80020fe:	685b      	ldr	r3, [r3, #4]
 8002100:	f003 0203 	and.w	r2, r3, #3
 8002104:	69fb      	ldr	r3, [r7, #28]
 8002106:	005b      	lsls	r3, r3, #1
 8002108:	fa02 f303 	lsl.w	r3, r2, r3
 800210c:	69ba      	ldr	r2, [r7, #24]
 800210e:	4313      	orrs	r3, r2
 8002110:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	69ba      	ldr	r2, [r7, #24]
 8002116:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002118:	683b      	ldr	r3, [r7, #0]
 800211a:	685b      	ldr	r3, [r3, #4]
 800211c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002120:	2b00      	cmp	r3, #0
 8002122:	f000 80b4 	beq.w	800228e <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002126:	2300      	movs	r3, #0
 8002128:	60fb      	str	r3, [r7, #12]
 800212a:	4b5f      	ldr	r3, [pc, #380]	; (80022a8 <HAL_GPIO_Init+0x308>)
 800212c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800212e:	4a5e      	ldr	r2, [pc, #376]	; (80022a8 <HAL_GPIO_Init+0x308>)
 8002130:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002134:	6453      	str	r3, [r2, #68]	; 0x44
 8002136:	4b5c      	ldr	r3, [pc, #368]	; (80022a8 <HAL_GPIO_Init+0x308>)
 8002138:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800213a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800213e:	60fb      	str	r3, [r7, #12]
 8002140:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002142:	4a5a      	ldr	r2, [pc, #360]	; (80022ac <HAL_GPIO_Init+0x30c>)
 8002144:	69fb      	ldr	r3, [r7, #28]
 8002146:	089b      	lsrs	r3, r3, #2
 8002148:	3302      	adds	r3, #2
 800214a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800214e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002150:	69fb      	ldr	r3, [r7, #28]
 8002152:	f003 0303 	and.w	r3, r3, #3
 8002156:	009b      	lsls	r3, r3, #2
 8002158:	220f      	movs	r2, #15
 800215a:	fa02 f303 	lsl.w	r3, r2, r3
 800215e:	43db      	mvns	r3, r3
 8002160:	69ba      	ldr	r2, [r7, #24]
 8002162:	4013      	ands	r3, r2
 8002164:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	4a51      	ldr	r2, [pc, #324]	; (80022b0 <HAL_GPIO_Init+0x310>)
 800216a:	4293      	cmp	r3, r2
 800216c:	d02b      	beq.n	80021c6 <HAL_GPIO_Init+0x226>
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	4a50      	ldr	r2, [pc, #320]	; (80022b4 <HAL_GPIO_Init+0x314>)
 8002172:	4293      	cmp	r3, r2
 8002174:	d025      	beq.n	80021c2 <HAL_GPIO_Init+0x222>
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	4a4f      	ldr	r2, [pc, #316]	; (80022b8 <HAL_GPIO_Init+0x318>)
 800217a:	4293      	cmp	r3, r2
 800217c:	d01f      	beq.n	80021be <HAL_GPIO_Init+0x21e>
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	4a4e      	ldr	r2, [pc, #312]	; (80022bc <HAL_GPIO_Init+0x31c>)
 8002182:	4293      	cmp	r3, r2
 8002184:	d019      	beq.n	80021ba <HAL_GPIO_Init+0x21a>
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	4a4d      	ldr	r2, [pc, #308]	; (80022c0 <HAL_GPIO_Init+0x320>)
 800218a:	4293      	cmp	r3, r2
 800218c:	d013      	beq.n	80021b6 <HAL_GPIO_Init+0x216>
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	4a4c      	ldr	r2, [pc, #304]	; (80022c4 <HAL_GPIO_Init+0x324>)
 8002192:	4293      	cmp	r3, r2
 8002194:	d00d      	beq.n	80021b2 <HAL_GPIO_Init+0x212>
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	4a4b      	ldr	r2, [pc, #300]	; (80022c8 <HAL_GPIO_Init+0x328>)
 800219a:	4293      	cmp	r3, r2
 800219c:	d007      	beq.n	80021ae <HAL_GPIO_Init+0x20e>
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	4a4a      	ldr	r2, [pc, #296]	; (80022cc <HAL_GPIO_Init+0x32c>)
 80021a2:	4293      	cmp	r3, r2
 80021a4:	d101      	bne.n	80021aa <HAL_GPIO_Init+0x20a>
 80021a6:	2307      	movs	r3, #7
 80021a8:	e00e      	b.n	80021c8 <HAL_GPIO_Init+0x228>
 80021aa:	2308      	movs	r3, #8
 80021ac:	e00c      	b.n	80021c8 <HAL_GPIO_Init+0x228>
 80021ae:	2306      	movs	r3, #6
 80021b0:	e00a      	b.n	80021c8 <HAL_GPIO_Init+0x228>
 80021b2:	2305      	movs	r3, #5
 80021b4:	e008      	b.n	80021c8 <HAL_GPIO_Init+0x228>
 80021b6:	2304      	movs	r3, #4
 80021b8:	e006      	b.n	80021c8 <HAL_GPIO_Init+0x228>
 80021ba:	2303      	movs	r3, #3
 80021bc:	e004      	b.n	80021c8 <HAL_GPIO_Init+0x228>
 80021be:	2302      	movs	r3, #2
 80021c0:	e002      	b.n	80021c8 <HAL_GPIO_Init+0x228>
 80021c2:	2301      	movs	r3, #1
 80021c4:	e000      	b.n	80021c8 <HAL_GPIO_Init+0x228>
 80021c6:	2300      	movs	r3, #0
 80021c8:	69fa      	ldr	r2, [r7, #28]
 80021ca:	f002 0203 	and.w	r2, r2, #3
 80021ce:	0092      	lsls	r2, r2, #2
 80021d0:	4093      	lsls	r3, r2
 80021d2:	69ba      	ldr	r2, [r7, #24]
 80021d4:	4313      	orrs	r3, r2
 80021d6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80021d8:	4934      	ldr	r1, [pc, #208]	; (80022ac <HAL_GPIO_Init+0x30c>)
 80021da:	69fb      	ldr	r3, [r7, #28]
 80021dc:	089b      	lsrs	r3, r3, #2
 80021de:	3302      	adds	r3, #2
 80021e0:	69ba      	ldr	r2, [r7, #24]
 80021e2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80021e6:	4b3a      	ldr	r3, [pc, #232]	; (80022d0 <HAL_GPIO_Init+0x330>)
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80021ec:	693b      	ldr	r3, [r7, #16]
 80021ee:	43db      	mvns	r3, r3
 80021f0:	69ba      	ldr	r2, [r7, #24]
 80021f2:	4013      	ands	r3, r2
 80021f4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80021f6:	683b      	ldr	r3, [r7, #0]
 80021f8:	685b      	ldr	r3, [r3, #4]
 80021fa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80021fe:	2b00      	cmp	r3, #0
 8002200:	d003      	beq.n	800220a <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8002202:	69ba      	ldr	r2, [r7, #24]
 8002204:	693b      	ldr	r3, [r7, #16]
 8002206:	4313      	orrs	r3, r2
 8002208:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800220a:	4a31      	ldr	r2, [pc, #196]	; (80022d0 <HAL_GPIO_Init+0x330>)
 800220c:	69bb      	ldr	r3, [r7, #24]
 800220e:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8002210:	4b2f      	ldr	r3, [pc, #188]	; (80022d0 <HAL_GPIO_Init+0x330>)
 8002212:	685b      	ldr	r3, [r3, #4]
 8002214:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002216:	693b      	ldr	r3, [r7, #16]
 8002218:	43db      	mvns	r3, r3
 800221a:	69ba      	ldr	r2, [r7, #24]
 800221c:	4013      	ands	r3, r2
 800221e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002220:	683b      	ldr	r3, [r7, #0]
 8002222:	685b      	ldr	r3, [r3, #4]
 8002224:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002228:	2b00      	cmp	r3, #0
 800222a:	d003      	beq.n	8002234 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 800222c:	69ba      	ldr	r2, [r7, #24]
 800222e:	693b      	ldr	r3, [r7, #16]
 8002230:	4313      	orrs	r3, r2
 8002232:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002234:	4a26      	ldr	r2, [pc, #152]	; (80022d0 <HAL_GPIO_Init+0x330>)
 8002236:	69bb      	ldr	r3, [r7, #24]
 8002238:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800223a:	4b25      	ldr	r3, [pc, #148]	; (80022d0 <HAL_GPIO_Init+0x330>)
 800223c:	689b      	ldr	r3, [r3, #8]
 800223e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002240:	693b      	ldr	r3, [r7, #16]
 8002242:	43db      	mvns	r3, r3
 8002244:	69ba      	ldr	r2, [r7, #24]
 8002246:	4013      	ands	r3, r2
 8002248:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800224a:	683b      	ldr	r3, [r7, #0]
 800224c:	685b      	ldr	r3, [r3, #4]
 800224e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002252:	2b00      	cmp	r3, #0
 8002254:	d003      	beq.n	800225e <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8002256:	69ba      	ldr	r2, [r7, #24]
 8002258:	693b      	ldr	r3, [r7, #16]
 800225a:	4313      	orrs	r3, r2
 800225c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800225e:	4a1c      	ldr	r2, [pc, #112]	; (80022d0 <HAL_GPIO_Init+0x330>)
 8002260:	69bb      	ldr	r3, [r7, #24]
 8002262:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002264:	4b1a      	ldr	r3, [pc, #104]	; (80022d0 <HAL_GPIO_Init+0x330>)
 8002266:	68db      	ldr	r3, [r3, #12]
 8002268:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800226a:	693b      	ldr	r3, [r7, #16]
 800226c:	43db      	mvns	r3, r3
 800226e:	69ba      	ldr	r2, [r7, #24]
 8002270:	4013      	ands	r3, r2
 8002272:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002274:	683b      	ldr	r3, [r7, #0]
 8002276:	685b      	ldr	r3, [r3, #4]
 8002278:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800227c:	2b00      	cmp	r3, #0
 800227e:	d003      	beq.n	8002288 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8002280:	69ba      	ldr	r2, [r7, #24]
 8002282:	693b      	ldr	r3, [r7, #16]
 8002284:	4313      	orrs	r3, r2
 8002286:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002288:	4a11      	ldr	r2, [pc, #68]	; (80022d0 <HAL_GPIO_Init+0x330>)
 800228a:	69bb      	ldr	r3, [r7, #24]
 800228c:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800228e:	69fb      	ldr	r3, [r7, #28]
 8002290:	3301      	adds	r3, #1
 8002292:	61fb      	str	r3, [r7, #28]
 8002294:	69fb      	ldr	r3, [r7, #28]
 8002296:	2b0f      	cmp	r3, #15
 8002298:	f67f ae90 	bls.w	8001fbc <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800229c:	bf00      	nop
 800229e:	3724      	adds	r7, #36	; 0x24
 80022a0:	46bd      	mov	sp, r7
 80022a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022a6:	4770      	bx	lr
 80022a8:	40023800 	.word	0x40023800
 80022ac:	40013800 	.word	0x40013800
 80022b0:	40020000 	.word	0x40020000
 80022b4:	40020400 	.word	0x40020400
 80022b8:	40020800 	.word	0x40020800
 80022bc:	40020c00 	.word	0x40020c00
 80022c0:	40021000 	.word	0x40021000
 80022c4:	40021400 	.word	0x40021400
 80022c8:	40021800 	.word	0x40021800
 80022cc:	40021c00 	.word	0x40021c00
 80022d0:	40013c00 	.word	0x40013c00

080022d4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80022d4:	b480      	push	{r7}
 80022d6:	b083      	sub	sp, #12
 80022d8:	af00      	add	r7, sp, #0
 80022da:	6078      	str	r0, [r7, #4]
 80022dc:	460b      	mov	r3, r1
 80022de:	807b      	strh	r3, [r7, #2]
 80022e0:	4613      	mov	r3, r2
 80022e2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80022e4:	787b      	ldrb	r3, [r7, #1]
 80022e6:	2b00      	cmp	r3, #0
 80022e8:	d003      	beq.n	80022f2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80022ea:	887a      	ldrh	r2, [r7, #2]
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80022f0:	e003      	b.n	80022fa <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80022f2:	887b      	ldrh	r3, [r7, #2]
 80022f4:	041a      	lsls	r2, r3, #16
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	619a      	str	r2, [r3, #24]
}
 80022fa:	bf00      	nop
 80022fc:	370c      	adds	r7, #12
 80022fe:	46bd      	mov	sp, r7
 8002300:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002304:	4770      	bx	lr

08002306 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002306:	b480      	push	{r7}
 8002308:	b083      	sub	sp, #12
 800230a:	af00      	add	r7, sp, #0
 800230c:	6078      	str	r0, [r7, #4]
 800230e:	460b      	mov	r3, r1
 8002310:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) == GPIO_Pin)
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	695a      	ldr	r2, [r3, #20]
 8002316:	887b      	ldrh	r3, [r7, #2]
 8002318:	401a      	ands	r2, r3
 800231a:	887b      	ldrh	r3, [r7, #2]
 800231c:	429a      	cmp	r2, r3
 800231e:	d104      	bne.n	800232a <HAL_GPIO_TogglePin+0x24>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8002320:	887b      	ldrh	r3, [r7, #2]
 8002322:	041a      	lsls	r2, r3, #16
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = GPIO_Pin;
  }
}
 8002328:	e002      	b.n	8002330 <HAL_GPIO_TogglePin+0x2a>
    GPIOx->BSRR = GPIO_Pin;
 800232a:	887a      	ldrh	r2, [r7, #2]
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	619a      	str	r2, [r3, #24]
}
 8002330:	bf00      	nop
 8002332:	370c      	adds	r7, #12
 8002334:	46bd      	mov	sp, r7
 8002336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800233a:	4770      	bx	lr

0800233c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800233c:	b580      	push	{r7, lr}
 800233e:	b086      	sub	sp, #24
 8002340:	af00      	add	r7, sp, #0
 8002342:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	2b00      	cmp	r3, #0
 8002348:	d101      	bne.n	800234e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800234a:	2301      	movs	r3, #1
 800234c:	e25b      	b.n	8002806 <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	f003 0301 	and.w	r3, r3, #1
 8002356:	2b00      	cmp	r3, #0
 8002358:	d075      	beq.n	8002446 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800235a:	4ba3      	ldr	r3, [pc, #652]	; (80025e8 <HAL_RCC_OscConfig+0x2ac>)
 800235c:	689b      	ldr	r3, [r3, #8]
 800235e:	f003 030c 	and.w	r3, r3, #12
 8002362:	2b04      	cmp	r3, #4
 8002364:	d00c      	beq.n	8002380 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002366:	4ba0      	ldr	r3, [pc, #640]	; (80025e8 <HAL_RCC_OscConfig+0x2ac>)
 8002368:	689b      	ldr	r3, [r3, #8]
 800236a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800236e:	2b08      	cmp	r3, #8
 8002370:	d112      	bne.n	8002398 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002372:	4b9d      	ldr	r3, [pc, #628]	; (80025e8 <HAL_RCC_OscConfig+0x2ac>)
 8002374:	685b      	ldr	r3, [r3, #4]
 8002376:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800237a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800237e:	d10b      	bne.n	8002398 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002380:	4b99      	ldr	r3, [pc, #612]	; (80025e8 <HAL_RCC_OscConfig+0x2ac>)
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002388:	2b00      	cmp	r3, #0
 800238a:	d05b      	beq.n	8002444 <HAL_RCC_OscConfig+0x108>
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	685b      	ldr	r3, [r3, #4]
 8002390:	2b00      	cmp	r3, #0
 8002392:	d157      	bne.n	8002444 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002394:	2301      	movs	r3, #1
 8002396:	e236      	b.n	8002806 <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	685b      	ldr	r3, [r3, #4]
 800239c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80023a0:	d106      	bne.n	80023b0 <HAL_RCC_OscConfig+0x74>
 80023a2:	4b91      	ldr	r3, [pc, #580]	; (80025e8 <HAL_RCC_OscConfig+0x2ac>)
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	4a90      	ldr	r2, [pc, #576]	; (80025e8 <HAL_RCC_OscConfig+0x2ac>)
 80023a8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80023ac:	6013      	str	r3, [r2, #0]
 80023ae:	e01d      	b.n	80023ec <HAL_RCC_OscConfig+0xb0>
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	685b      	ldr	r3, [r3, #4]
 80023b4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80023b8:	d10c      	bne.n	80023d4 <HAL_RCC_OscConfig+0x98>
 80023ba:	4b8b      	ldr	r3, [pc, #556]	; (80025e8 <HAL_RCC_OscConfig+0x2ac>)
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	4a8a      	ldr	r2, [pc, #552]	; (80025e8 <HAL_RCC_OscConfig+0x2ac>)
 80023c0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80023c4:	6013      	str	r3, [r2, #0]
 80023c6:	4b88      	ldr	r3, [pc, #544]	; (80025e8 <HAL_RCC_OscConfig+0x2ac>)
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	4a87      	ldr	r2, [pc, #540]	; (80025e8 <HAL_RCC_OscConfig+0x2ac>)
 80023cc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80023d0:	6013      	str	r3, [r2, #0]
 80023d2:	e00b      	b.n	80023ec <HAL_RCC_OscConfig+0xb0>
 80023d4:	4b84      	ldr	r3, [pc, #528]	; (80025e8 <HAL_RCC_OscConfig+0x2ac>)
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	4a83      	ldr	r2, [pc, #524]	; (80025e8 <HAL_RCC_OscConfig+0x2ac>)
 80023da:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80023de:	6013      	str	r3, [r2, #0]
 80023e0:	4b81      	ldr	r3, [pc, #516]	; (80025e8 <HAL_RCC_OscConfig+0x2ac>)
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	4a80      	ldr	r2, [pc, #512]	; (80025e8 <HAL_RCC_OscConfig+0x2ac>)
 80023e6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80023ea:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	685b      	ldr	r3, [r3, #4]
 80023f0:	2b00      	cmp	r3, #0
 80023f2:	d013      	beq.n	800241c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80023f4:	f7ff f8f8 	bl	80015e8 <HAL_GetTick>
 80023f8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80023fa:	e008      	b.n	800240e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80023fc:	f7ff f8f4 	bl	80015e8 <HAL_GetTick>
 8002400:	4602      	mov	r2, r0
 8002402:	693b      	ldr	r3, [r7, #16]
 8002404:	1ad3      	subs	r3, r2, r3
 8002406:	2b64      	cmp	r3, #100	; 0x64
 8002408:	d901      	bls.n	800240e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800240a:	2303      	movs	r3, #3
 800240c:	e1fb      	b.n	8002806 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800240e:	4b76      	ldr	r3, [pc, #472]	; (80025e8 <HAL_RCC_OscConfig+0x2ac>)
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002416:	2b00      	cmp	r3, #0
 8002418:	d0f0      	beq.n	80023fc <HAL_RCC_OscConfig+0xc0>
 800241a:	e014      	b.n	8002446 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800241c:	f7ff f8e4 	bl	80015e8 <HAL_GetTick>
 8002420:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002422:	e008      	b.n	8002436 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002424:	f7ff f8e0 	bl	80015e8 <HAL_GetTick>
 8002428:	4602      	mov	r2, r0
 800242a:	693b      	ldr	r3, [r7, #16]
 800242c:	1ad3      	subs	r3, r2, r3
 800242e:	2b64      	cmp	r3, #100	; 0x64
 8002430:	d901      	bls.n	8002436 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002432:	2303      	movs	r3, #3
 8002434:	e1e7      	b.n	8002806 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002436:	4b6c      	ldr	r3, [pc, #432]	; (80025e8 <HAL_RCC_OscConfig+0x2ac>)
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800243e:	2b00      	cmp	r3, #0
 8002440:	d1f0      	bne.n	8002424 <HAL_RCC_OscConfig+0xe8>
 8002442:	e000      	b.n	8002446 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002444:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	f003 0302 	and.w	r3, r3, #2
 800244e:	2b00      	cmp	r3, #0
 8002450:	d063      	beq.n	800251a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002452:	4b65      	ldr	r3, [pc, #404]	; (80025e8 <HAL_RCC_OscConfig+0x2ac>)
 8002454:	689b      	ldr	r3, [r3, #8]
 8002456:	f003 030c 	and.w	r3, r3, #12
 800245a:	2b00      	cmp	r3, #0
 800245c:	d00b      	beq.n	8002476 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800245e:	4b62      	ldr	r3, [pc, #392]	; (80025e8 <HAL_RCC_OscConfig+0x2ac>)
 8002460:	689b      	ldr	r3, [r3, #8]
 8002462:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002466:	2b08      	cmp	r3, #8
 8002468:	d11c      	bne.n	80024a4 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800246a:	4b5f      	ldr	r3, [pc, #380]	; (80025e8 <HAL_RCC_OscConfig+0x2ac>)
 800246c:	685b      	ldr	r3, [r3, #4]
 800246e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002472:	2b00      	cmp	r3, #0
 8002474:	d116      	bne.n	80024a4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002476:	4b5c      	ldr	r3, [pc, #368]	; (80025e8 <HAL_RCC_OscConfig+0x2ac>)
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	f003 0302 	and.w	r3, r3, #2
 800247e:	2b00      	cmp	r3, #0
 8002480:	d005      	beq.n	800248e <HAL_RCC_OscConfig+0x152>
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	68db      	ldr	r3, [r3, #12]
 8002486:	2b01      	cmp	r3, #1
 8002488:	d001      	beq.n	800248e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800248a:	2301      	movs	r3, #1
 800248c:	e1bb      	b.n	8002806 <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800248e:	4b56      	ldr	r3, [pc, #344]	; (80025e8 <HAL_RCC_OscConfig+0x2ac>)
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	691b      	ldr	r3, [r3, #16]
 800249a:	00db      	lsls	r3, r3, #3
 800249c:	4952      	ldr	r1, [pc, #328]	; (80025e8 <HAL_RCC_OscConfig+0x2ac>)
 800249e:	4313      	orrs	r3, r2
 80024a0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80024a2:	e03a      	b.n	800251a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	68db      	ldr	r3, [r3, #12]
 80024a8:	2b00      	cmp	r3, #0
 80024aa:	d020      	beq.n	80024ee <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80024ac:	4b4f      	ldr	r3, [pc, #316]	; (80025ec <HAL_RCC_OscConfig+0x2b0>)
 80024ae:	2201      	movs	r2, #1
 80024b0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80024b2:	f7ff f899 	bl	80015e8 <HAL_GetTick>
 80024b6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80024b8:	e008      	b.n	80024cc <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80024ba:	f7ff f895 	bl	80015e8 <HAL_GetTick>
 80024be:	4602      	mov	r2, r0
 80024c0:	693b      	ldr	r3, [r7, #16]
 80024c2:	1ad3      	subs	r3, r2, r3
 80024c4:	2b02      	cmp	r3, #2
 80024c6:	d901      	bls.n	80024cc <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80024c8:	2303      	movs	r3, #3
 80024ca:	e19c      	b.n	8002806 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80024cc:	4b46      	ldr	r3, [pc, #280]	; (80025e8 <HAL_RCC_OscConfig+0x2ac>)
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	f003 0302 	and.w	r3, r3, #2
 80024d4:	2b00      	cmp	r3, #0
 80024d6:	d0f0      	beq.n	80024ba <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80024d8:	4b43      	ldr	r3, [pc, #268]	; (80025e8 <HAL_RCC_OscConfig+0x2ac>)
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	691b      	ldr	r3, [r3, #16]
 80024e4:	00db      	lsls	r3, r3, #3
 80024e6:	4940      	ldr	r1, [pc, #256]	; (80025e8 <HAL_RCC_OscConfig+0x2ac>)
 80024e8:	4313      	orrs	r3, r2
 80024ea:	600b      	str	r3, [r1, #0]
 80024ec:	e015      	b.n	800251a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80024ee:	4b3f      	ldr	r3, [pc, #252]	; (80025ec <HAL_RCC_OscConfig+0x2b0>)
 80024f0:	2200      	movs	r2, #0
 80024f2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80024f4:	f7ff f878 	bl	80015e8 <HAL_GetTick>
 80024f8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80024fa:	e008      	b.n	800250e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80024fc:	f7ff f874 	bl	80015e8 <HAL_GetTick>
 8002500:	4602      	mov	r2, r0
 8002502:	693b      	ldr	r3, [r7, #16]
 8002504:	1ad3      	subs	r3, r2, r3
 8002506:	2b02      	cmp	r3, #2
 8002508:	d901      	bls.n	800250e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800250a:	2303      	movs	r3, #3
 800250c:	e17b      	b.n	8002806 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800250e:	4b36      	ldr	r3, [pc, #216]	; (80025e8 <HAL_RCC_OscConfig+0x2ac>)
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	f003 0302 	and.w	r3, r3, #2
 8002516:	2b00      	cmp	r3, #0
 8002518:	d1f0      	bne.n	80024fc <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	f003 0308 	and.w	r3, r3, #8
 8002522:	2b00      	cmp	r3, #0
 8002524:	d030      	beq.n	8002588 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	695b      	ldr	r3, [r3, #20]
 800252a:	2b00      	cmp	r3, #0
 800252c:	d016      	beq.n	800255c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800252e:	4b30      	ldr	r3, [pc, #192]	; (80025f0 <HAL_RCC_OscConfig+0x2b4>)
 8002530:	2201      	movs	r2, #1
 8002532:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002534:	f7ff f858 	bl	80015e8 <HAL_GetTick>
 8002538:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800253a:	e008      	b.n	800254e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800253c:	f7ff f854 	bl	80015e8 <HAL_GetTick>
 8002540:	4602      	mov	r2, r0
 8002542:	693b      	ldr	r3, [r7, #16]
 8002544:	1ad3      	subs	r3, r2, r3
 8002546:	2b02      	cmp	r3, #2
 8002548:	d901      	bls.n	800254e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800254a:	2303      	movs	r3, #3
 800254c:	e15b      	b.n	8002806 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800254e:	4b26      	ldr	r3, [pc, #152]	; (80025e8 <HAL_RCC_OscConfig+0x2ac>)
 8002550:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002552:	f003 0302 	and.w	r3, r3, #2
 8002556:	2b00      	cmp	r3, #0
 8002558:	d0f0      	beq.n	800253c <HAL_RCC_OscConfig+0x200>
 800255a:	e015      	b.n	8002588 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800255c:	4b24      	ldr	r3, [pc, #144]	; (80025f0 <HAL_RCC_OscConfig+0x2b4>)
 800255e:	2200      	movs	r2, #0
 8002560:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002562:	f7ff f841 	bl	80015e8 <HAL_GetTick>
 8002566:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002568:	e008      	b.n	800257c <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800256a:	f7ff f83d 	bl	80015e8 <HAL_GetTick>
 800256e:	4602      	mov	r2, r0
 8002570:	693b      	ldr	r3, [r7, #16]
 8002572:	1ad3      	subs	r3, r2, r3
 8002574:	2b02      	cmp	r3, #2
 8002576:	d901      	bls.n	800257c <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8002578:	2303      	movs	r3, #3
 800257a:	e144      	b.n	8002806 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800257c:	4b1a      	ldr	r3, [pc, #104]	; (80025e8 <HAL_RCC_OscConfig+0x2ac>)
 800257e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002580:	f003 0302 	and.w	r3, r3, #2
 8002584:	2b00      	cmp	r3, #0
 8002586:	d1f0      	bne.n	800256a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	f003 0304 	and.w	r3, r3, #4
 8002590:	2b00      	cmp	r3, #0
 8002592:	f000 80a0 	beq.w	80026d6 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002596:	2300      	movs	r3, #0
 8002598:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800259a:	4b13      	ldr	r3, [pc, #76]	; (80025e8 <HAL_RCC_OscConfig+0x2ac>)
 800259c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800259e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80025a2:	2b00      	cmp	r3, #0
 80025a4:	d10f      	bne.n	80025c6 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80025a6:	2300      	movs	r3, #0
 80025a8:	60bb      	str	r3, [r7, #8]
 80025aa:	4b0f      	ldr	r3, [pc, #60]	; (80025e8 <HAL_RCC_OscConfig+0x2ac>)
 80025ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025ae:	4a0e      	ldr	r2, [pc, #56]	; (80025e8 <HAL_RCC_OscConfig+0x2ac>)
 80025b0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80025b4:	6413      	str	r3, [r2, #64]	; 0x40
 80025b6:	4b0c      	ldr	r3, [pc, #48]	; (80025e8 <HAL_RCC_OscConfig+0x2ac>)
 80025b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025ba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80025be:	60bb      	str	r3, [r7, #8]
 80025c0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80025c2:	2301      	movs	r3, #1
 80025c4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80025c6:	4b0b      	ldr	r3, [pc, #44]	; (80025f4 <HAL_RCC_OscConfig+0x2b8>)
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80025ce:	2b00      	cmp	r3, #0
 80025d0:	d121      	bne.n	8002616 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80025d2:	4b08      	ldr	r3, [pc, #32]	; (80025f4 <HAL_RCC_OscConfig+0x2b8>)
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	4a07      	ldr	r2, [pc, #28]	; (80025f4 <HAL_RCC_OscConfig+0x2b8>)
 80025d8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80025dc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80025de:	f7ff f803 	bl	80015e8 <HAL_GetTick>
 80025e2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80025e4:	e011      	b.n	800260a <HAL_RCC_OscConfig+0x2ce>
 80025e6:	bf00      	nop
 80025e8:	40023800 	.word	0x40023800
 80025ec:	42470000 	.word	0x42470000
 80025f0:	42470e80 	.word	0x42470e80
 80025f4:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80025f8:	f7fe fff6 	bl	80015e8 <HAL_GetTick>
 80025fc:	4602      	mov	r2, r0
 80025fe:	693b      	ldr	r3, [r7, #16]
 8002600:	1ad3      	subs	r3, r2, r3
 8002602:	2b02      	cmp	r3, #2
 8002604:	d901      	bls.n	800260a <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8002606:	2303      	movs	r3, #3
 8002608:	e0fd      	b.n	8002806 <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800260a:	4b81      	ldr	r3, [pc, #516]	; (8002810 <HAL_RCC_OscConfig+0x4d4>)
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002612:	2b00      	cmp	r3, #0
 8002614:	d0f0      	beq.n	80025f8 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	689b      	ldr	r3, [r3, #8]
 800261a:	2b01      	cmp	r3, #1
 800261c:	d106      	bne.n	800262c <HAL_RCC_OscConfig+0x2f0>
 800261e:	4b7d      	ldr	r3, [pc, #500]	; (8002814 <HAL_RCC_OscConfig+0x4d8>)
 8002620:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002622:	4a7c      	ldr	r2, [pc, #496]	; (8002814 <HAL_RCC_OscConfig+0x4d8>)
 8002624:	f043 0301 	orr.w	r3, r3, #1
 8002628:	6713      	str	r3, [r2, #112]	; 0x70
 800262a:	e01c      	b.n	8002666 <HAL_RCC_OscConfig+0x32a>
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	689b      	ldr	r3, [r3, #8]
 8002630:	2b05      	cmp	r3, #5
 8002632:	d10c      	bne.n	800264e <HAL_RCC_OscConfig+0x312>
 8002634:	4b77      	ldr	r3, [pc, #476]	; (8002814 <HAL_RCC_OscConfig+0x4d8>)
 8002636:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002638:	4a76      	ldr	r2, [pc, #472]	; (8002814 <HAL_RCC_OscConfig+0x4d8>)
 800263a:	f043 0304 	orr.w	r3, r3, #4
 800263e:	6713      	str	r3, [r2, #112]	; 0x70
 8002640:	4b74      	ldr	r3, [pc, #464]	; (8002814 <HAL_RCC_OscConfig+0x4d8>)
 8002642:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002644:	4a73      	ldr	r2, [pc, #460]	; (8002814 <HAL_RCC_OscConfig+0x4d8>)
 8002646:	f043 0301 	orr.w	r3, r3, #1
 800264a:	6713      	str	r3, [r2, #112]	; 0x70
 800264c:	e00b      	b.n	8002666 <HAL_RCC_OscConfig+0x32a>
 800264e:	4b71      	ldr	r3, [pc, #452]	; (8002814 <HAL_RCC_OscConfig+0x4d8>)
 8002650:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002652:	4a70      	ldr	r2, [pc, #448]	; (8002814 <HAL_RCC_OscConfig+0x4d8>)
 8002654:	f023 0301 	bic.w	r3, r3, #1
 8002658:	6713      	str	r3, [r2, #112]	; 0x70
 800265a:	4b6e      	ldr	r3, [pc, #440]	; (8002814 <HAL_RCC_OscConfig+0x4d8>)
 800265c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800265e:	4a6d      	ldr	r2, [pc, #436]	; (8002814 <HAL_RCC_OscConfig+0x4d8>)
 8002660:	f023 0304 	bic.w	r3, r3, #4
 8002664:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	689b      	ldr	r3, [r3, #8]
 800266a:	2b00      	cmp	r3, #0
 800266c:	d015      	beq.n	800269a <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800266e:	f7fe ffbb 	bl	80015e8 <HAL_GetTick>
 8002672:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002674:	e00a      	b.n	800268c <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002676:	f7fe ffb7 	bl	80015e8 <HAL_GetTick>
 800267a:	4602      	mov	r2, r0
 800267c:	693b      	ldr	r3, [r7, #16]
 800267e:	1ad3      	subs	r3, r2, r3
 8002680:	f241 3288 	movw	r2, #5000	; 0x1388
 8002684:	4293      	cmp	r3, r2
 8002686:	d901      	bls.n	800268c <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8002688:	2303      	movs	r3, #3
 800268a:	e0bc      	b.n	8002806 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800268c:	4b61      	ldr	r3, [pc, #388]	; (8002814 <HAL_RCC_OscConfig+0x4d8>)
 800268e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002690:	f003 0302 	and.w	r3, r3, #2
 8002694:	2b00      	cmp	r3, #0
 8002696:	d0ee      	beq.n	8002676 <HAL_RCC_OscConfig+0x33a>
 8002698:	e014      	b.n	80026c4 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800269a:	f7fe ffa5 	bl	80015e8 <HAL_GetTick>
 800269e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80026a0:	e00a      	b.n	80026b8 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80026a2:	f7fe ffa1 	bl	80015e8 <HAL_GetTick>
 80026a6:	4602      	mov	r2, r0
 80026a8:	693b      	ldr	r3, [r7, #16]
 80026aa:	1ad3      	subs	r3, r2, r3
 80026ac:	f241 3288 	movw	r2, #5000	; 0x1388
 80026b0:	4293      	cmp	r3, r2
 80026b2:	d901      	bls.n	80026b8 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 80026b4:	2303      	movs	r3, #3
 80026b6:	e0a6      	b.n	8002806 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80026b8:	4b56      	ldr	r3, [pc, #344]	; (8002814 <HAL_RCC_OscConfig+0x4d8>)
 80026ba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80026bc:	f003 0302 	and.w	r3, r3, #2
 80026c0:	2b00      	cmp	r3, #0
 80026c2:	d1ee      	bne.n	80026a2 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80026c4:	7dfb      	ldrb	r3, [r7, #23]
 80026c6:	2b01      	cmp	r3, #1
 80026c8:	d105      	bne.n	80026d6 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80026ca:	4b52      	ldr	r3, [pc, #328]	; (8002814 <HAL_RCC_OscConfig+0x4d8>)
 80026cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026ce:	4a51      	ldr	r2, [pc, #324]	; (8002814 <HAL_RCC_OscConfig+0x4d8>)
 80026d0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80026d4:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	699b      	ldr	r3, [r3, #24]
 80026da:	2b00      	cmp	r3, #0
 80026dc:	f000 8092 	beq.w	8002804 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80026e0:	4b4c      	ldr	r3, [pc, #304]	; (8002814 <HAL_RCC_OscConfig+0x4d8>)
 80026e2:	689b      	ldr	r3, [r3, #8]
 80026e4:	f003 030c 	and.w	r3, r3, #12
 80026e8:	2b08      	cmp	r3, #8
 80026ea:	d05c      	beq.n	80027a6 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	699b      	ldr	r3, [r3, #24]
 80026f0:	2b02      	cmp	r3, #2
 80026f2:	d141      	bne.n	8002778 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80026f4:	4b48      	ldr	r3, [pc, #288]	; (8002818 <HAL_RCC_OscConfig+0x4dc>)
 80026f6:	2200      	movs	r2, #0
 80026f8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80026fa:	f7fe ff75 	bl	80015e8 <HAL_GetTick>
 80026fe:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002700:	e008      	b.n	8002714 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002702:	f7fe ff71 	bl	80015e8 <HAL_GetTick>
 8002706:	4602      	mov	r2, r0
 8002708:	693b      	ldr	r3, [r7, #16]
 800270a:	1ad3      	subs	r3, r2, r3
 800270c:	2b02      	cmp	r3, #2
 800270e:	d901      	bls.n	8002714 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8002710:	2303      	movs	r3, #3
 8002712:	e078      	b.n	8002806 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002714:	4b3f      	ldr	r3, [pc, #252]	; (8002814 <HAL_RCC_OscConfig+0x4d8>)
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800271c:	2b00      	cmp	r3, #0
 800271e:	d1f0      	bne.n	8002702 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	69da      	ldr	r2, [r3, #28]
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	6a1b      	ldr	r3, [r3, #32]
 8002728:	431a      	orrs	r2, r3
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800272e:	019b      	lsls	r3, r3, #6
 8002730:	431a      	orrs	r2, r3
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002736:	085b      	lsrs	r3, r3, #1
 8002738:	3b01      	subs	r3, #1
 800273a:	041b      	lsls	r3, r3, #16
 800273c:	431a      	orrs	r2, r3
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002742:	061b      	lsls	r3, r3, #24
 8002744:	4933      	ldr	r1, [pc, #204]	; (8002814 <HAL_RCC_OscConfig+0x4d8>)
 8002746:	4313      	orrs	r3, r2
 8002748:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800274a:	4b33      	ldr	r3, [pc, #204]	; (8002818 <HAL_RCC_OscConfig+0x4dc>)
 800274c:	2201      	movs	r2, #1
 800274e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002750:	f7fe ff4a 	bl	80015e8 <HAL_GetTick>
 8002754:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002756:	e008      	b.n	800276a <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002758:	f7fe ff46 	bl	80015e8 <HAL_GetTick>
 800275c:	4602      	mov	r2, r0
 800275e:	693b      	ldr	r3, [r7, #16]
 8002760:	1ad3      	subs	r3, r2, r3
 8002762:	2b02      	cmp	r3, #2
 8002764:	d901      	bls.n	800276a <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8002766:	2303      	movs	r3, #3
 8002768:	e04d      	b.n	8002806 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800276a:	4b2a      	ldr	r3, [pc, #168]	; (8002814 <HAL_RCC_OscConfig+0x4d8>)
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002772:	2b00      	cmp	r3, #0
 8002774:	d0f0      	beq.n	8002758 <HAL_RCC_OscConfig+0x41c>
 8002776:	e045      	b.n	8002804 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002778:	4b27      	ldr	r3, [pc, #156]	; (8002818 <HAL_RCC_OscConfig+0x4dc>)
 800277a:	2200      	movs	r2, #0
 800277c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800277e:	f7fe ff33 	bl	80015e8 <HAL_GetTick>
 8002782:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002784:	e008      	b.n	8002798 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002786:	f7fe ff2f 	bl	80015e8 <HAL_GetTick>
 800278a:	4602      	mov	r2, r0
 800278c:	693b      	ldr	r3, [r7, #16]
 800278e:	1ad3      	subs	r3, r2, r3
 8002790:	2b02      	cmp	r3, #2
 8002792:	d901      	bls.n	8002798 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8002794:	2303      	movs	r3, #3
 8002796:	e036      	b.n	8002806 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002798:	4b1e      	ldr	r3, [pc, #120]	; (8002814 <HAL_RCC_OscConfig+0x4d8>)
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80027a0:	2b00      	cmp	r3, #0
 80027a2:	d1f0      	bne.n	8002786 <HAL_RCC_OscConfig+0x44a>
 80027a4:	e02e      	b.n	8002804 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	699b      	ldr	r3, [r3, #24]
 80027aa:	2b01      	cmp	r3, #1
 80027ac:	d101      	bne.n	80027b2 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 80027ae:	2301      	movs	r3, #1
 80027b0:	e029      	b.n	8002806 <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80027b2:	4b18      	ldr	r3, [pc, #96]	; (8002814 <HAL_RCC_OscConfig+0x4d8>)
 80027b4:	689b      	ldr	r3, [r3, #8]
 80027b6:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80027b8:	68fb      	ldr	r3, [r7, #12]
 80027ba:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	69db      	ldr	r3, [r3, #28]
 80027c2:	429a      	cmp	r2, r3
 80027c4:	d11c      	bne.n	8002800 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80027c6:	68fb      	ldr	r3, [r7, #12]
 80027c8:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80027d0:	429a      	cmp	r2, r3
 80027d2:	d115      	bne.n	8002800 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 80027d4:	68fa      	ldr	r2, [r7, #12]
 80027d6:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80027da:	4013      	ands	r3, r2
 80027dc:	687a      	ldr	r2, [r7, #4]
 80027de:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80027e0:	4293      	cmp	r3, r2
 80027e2:	d10d      	bne.n	8002800 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80027e4:	68fb      	ldr	r3, [r7, #12]
 80027e6:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 80027ee:	429a      	cmp	r2, r3
 80027f0:	d106      	bne.n	8002800 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 80027f2:	68fb      	ldr	r3, [r7, #12]
 80027f4:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80027fc:	429a      	cmp	r2, r3
 80027fe:	d001      	beq.n	8002804 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 8002800:	2301      	movs	r3, #1
 8002802:	e000      	b.n	8002806 <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 8002804:	2300      	movs	r3, #0
}
 8002806:	4618      	mov	r0, r3
 8002808:	3718      	adds	r7, #24
 800280a:	46bd      	mov	sp, r7
 800280c:	bd80      	pop	{r7, pc}
 800280e:	bf00      	nop
 8002810:	40007000 	.word	0x40007000
 8002814:	40023800 	.word	0x40023800
 8002818:	42470060 	.word	0x42470060

0800281c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800281c:	b580      	push	{r7, lr}
 800281e:	b084      	sub	sp, #16
 8002820:	af00      	add	r7, sp, #0
 8002822:	6078      	str	r0, [r7, #4]
 8002824:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	2b00      	cmp	r3, #0
 800282a:	d101      	bne.n	8002830 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800282c:	2301      	movs	r3, #1
 800282e:	e0cc      	b.n	80029ca <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002830:	4b68      	ldr	r3, [pc, #416]	; (80029d4 <HAL_RCC_ClockConfig+0x1b8>)
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	f003 030f 	and.w	r3, r3, #15
 8002838:	683a      	ldr	r2, [r7, #0]
 800283a:	429a      	cmp	r2, r3
 800283c:	d90c      	bls.n	8002858 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800283e:	4b65      	ldr	r3, [pc, #404]	; (80029d4 <HAL_RCC_ClockConfig+0x1b8>)
 8002840:	683a      	ldr	r2, [r7, #0]
 8002842:	b2d2      	uxtb	r2, r2
 8002844:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002846:	4b63      	ldr	r3, [pc, #396]	; (80029d4 <HAL_RCC_ClockConfig+0x1b8>)
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	f003 030f 	and.w	r3, r3, #15
 800284e:	683a      	ldr	r2, [r7, #0]
 8002850:	429a      	cmp	r2, r3
 8002852:	d001      	beq.n	8002858 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002854:	2301      	movs	r3, #1
 8002856:	e0b8      	b.n	80029ca <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	f003 0302 	and.w	r3, r3, #2
 8002860:	2b00      	cmp	r3, #0
 8002862:	d020      	beq.n	80028a6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	f003 0304 	and.w	r3, r3, #4
 800286c:	2b00      	cmp	r3, #0
 800286e:	d005      	beq.n	800287c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002870:	4b59      	ldr	r3, [pc, #356]	; (80029d8 <HAL_RCC_ClockConfig+0x1bc>)
 8002872:	689b      	ldr	r3, [r3, #8]
 8002874:	4a58      	ldr	r2, [pc, #352]	; (80029d8 <HAL_RCC_ClockConfig+0x1bc>)
 8002876:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800287a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	f003 0308 	and.w	r3, r3, #8
 8002884:	2b00      	cmp	r3, #0
 8002886:	d005      	beq.n	8002894 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002888:	4b53      	ldr	r3, [pc, #332]	; (80029d8 <HAL_RCC_ClockConfig+0x1bc>)
 800288a:	689b      	ldr	r3, [r3, #8]
 800288c:	4a52      	ldr	r2, [pc, #328]	; (80029d8 <HAL_RCC_ClockConfig+0x1bc>)
 800288e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002892:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002894:	4b50      	ldr	r3, [pc, #320]	; (80029d8 <HAL_RCC_ClockConfig+0x1bc>)
 8002896:	689b      	ldr	r3, [r3, #8]
 8002898:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	689b      	ldr	r3, [r3, #8]
 80028a0:	494d      	ldr	r1, [pc, #308]	; (80029d8 <HAL_RCC_ClockConfig+0x1bc>)
 80028a2:	4313      	orrs	r3, r2
 80028a4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	f003 0301 	and.w	r3, r3, #1
 80028ae:	2b00      	cmp	r3, #0
 80028b0:	d044      	beq.n	800293c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	685b      	ldr	r3, [r3, #4]
 80028b6:	2b01      	cmp	r3, #1
 80028b8:	d107      	bne.n	80028ca <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80028ba:	4b47      	ldr	r3, [pc, #284]	; (80029d8 <HAL_RCC_ClockConfig+0x1bc>)
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80028c2:	2b00      	cmp	r3, #0
 80028c4:	d119      	bne.n	80028fa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80028c6:	2301      	movs	r3, #1
 80028c8:	e07f      	b.n	80029ca <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	685b      	ldr	r3, [r3, #4]
 80028ce:	2b02      	cmp	r3, #2
 80028d0:	d003      	beq.n	80028da <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80028d6:	2b03      	cmp	r3, #3
 80028d8:	d107      	bne.n	80028ea <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80028da:	4b3f      	ldr	r3, [pc, #252]	; (80029d8 <HAL_RCC_ClockConfig+0x1bc>)
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80028e2:	2b00      	cmp	r3, #0
 80028e4:	d109      	bne.n	80028fa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80028e6:	2301      	movs	r3, #1
 80028e8:	e06f      	b.n	80029ca <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80028ea:	4b3b      	ldr	r3, [pc, #236]	; (80029d8 <HAL_RCC_ClockConfig+0x1bc>)
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	f003 0302 	and.w	r3, r3, #2
 80028f2:	2b00      	cmp	r3, #0
 80028f4:	d101      	bne.n	80028fa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80028f6:	2301      	movs	r3, #1
 80028f8:	e067      	b.n	80029ca <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80028fa:	4b37      	ldr	r3, [pc, #220]	; (80029d8 <HAL_RCC_ClockConfig+0x1bc>)
 80028fc:	689b      	ldr	r3, [r3, #8]
 80028fe:	f023 0203 	bic.w	r2, r3, #3
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	685b      	ldr	r3, [r3, #4]
 8002906:	4934      	ldr	r1, [pc, #208]	; (80029d8 <HAL_RCC_ClockConfig+0x1bc>)
 8002908:	4313      	orrs	r3, r2
 800290a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800290c:	f7fe fe6c 	bl	80015e8 <HAL_GetTick>
 8002910:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002912:	e00a      	b.n	800292a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002914:	f7fe fe68 	bl	80015e8 <HAL_GetTick>
 8002918:	4602      	mov	r2, r0
 800291a:	68fb      	ldr	r3, [r7, #12]
 800291c:	1ad3      	subs	r3, r2, r3
 800291e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002922:	4293      	cmp	r3, r2
 8002924:	d901      	bls.n	800292a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002926:	2303      	movs	r3, #3
 8002928:	e04f      	b.n	80029ca <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800292a:	4b2b      	ldr	r3, [pc, #172]	; (80029d8 <HAL_RCC_ClockConfig+0x1bc>)
 800292c:	689b      	ldr	r3, [r3, #8]
 800292e:	f003 020c 	and.w	r2, r3, #12
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	685b      	ldr	r3, [r3, #4]
 8002936:	009b      	lsls	r3, r3, #2
 8002938:	429a      	cmp	r2, r3
 800293a:	d1eb      	bne.n	8002914 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800293c:	4b25      	ldr	r3, [pc, #148]	; (80029d4 <HAL_RCC_ClockConfig+0x1b8>)
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	f003 030f 	and.w	r3, r3, #15
 8002944:	683a      	ldr	r2, [r7, #0]
 8002946:	429a      	cmp	r2, r3
 8002948:	d20c      	bcs.n	8002964 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800294a:	4b22      	ldr	r3, [pc, #136]	; (80029d4 <HAL_RCC_ClockConfig+0x1b8>)
 800294c:	683a      	ldr	r2, [r7, #0]
 800294e:	b2d2      	uxtb	r2, r2
 8002950:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002952:	4b20      	ldr	r3, [pc, #128]	; (80029d4 <HAL_RCC_ClockConfig+0x1b8>)
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	f003 030f 	and.w	r3, r3, #15
 800295a:	683a      	ldr	r2, [r7, #0]
 800295c:	429a      	cmp	r2, r3
 800295e:	d001      	beq.n	8002964 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002960:	2301      	movs	r3, #1
 8002962:	e032      	b.n	80029ca <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	f003 0304 	and.w	r3, r3, #4
 800296c:	2b00      	cmp	r3, #0
 800296e:	d008      	beq.n	8002982 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002970:	4b19      	ldr	r3, [pc, #100]	; (80029d8 <HAL_RCC_ClockConfig+0x1bc>)
 8002972:	689b      	ldr	r3, [r3, #8]
 8002974:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	68db      	ldr	r3, [r3, #12]
 800297c:	4916      	ldr	r1, [pc, #88]	; (80029d8 <HAL_RCC_ClockConfig+0x1bc>)
 800297e:	4313      	orrs	r3, r2
 8002980:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	f003 0308 	and.w	r3, r3, #8
 800298a:	2b00      	cmp	r3, #0
 800298c:	d009      	beq.n	80029a2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800298e:	4b12      	ldr	r3, [pc, #72]	; (80029d8 <HAL_RCC_ClockConfig+0x1bc>)
 8002990:	689b      	ldr	r3, [r3, #8]
 8002992:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	691b      	ldr	r3, [r3, #16]
 800299a:	00db      	lsls	r3, r3, #3
 800299c:	490e      	ldr	r1, [pc, #56]	; (80029d8 <HAL_RCC_ClockConfig+0x1bc>)
 800299e:	4313      	orrs	r3, r2
 80029a0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80029a2:	f000 f821 	bl	80029e8 <HAL_RCC_GetSysClockFreq>
 80029a6:	4601      	mov	r1, r0
 80029a8:	4b0b      	ldr	r3, [pc, #44]	; (80029d8 <HAL_RCC_ClockConfig+0x1bc>)
 80029aa:	689b      	ldr	r3, [r3, #8]
 80029ac:	091b      	lsrs	r3, r3, #4
 80029ae:	f003 030f 	and.w	r3, r3, #15
 80029b2:	4a0a      	ldr	r2, [pc, #40]	; (80029dc <HAL_RCC_ClockConfig+0x1c0>)
 80029b4:	5cd3      	ldrb	r3, [r2, r3]
 80029b6:	fa21 f303 	lsr.w	r3, r1, r3
 80029ba:	4a09      	ldr	r2, [pc, #36]	; (80029e0 <HAL_RCC_ClockConfig+0x1c4>)
 80029bc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80029be:	4b09      	ldr	r3, [pc, #36]	; (80029e4 <HAL_RCC_ClockConfig+0x1c8>)
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	4618      	mov	r0, r3
 80029c4:	f7fe fdcc 	bl	8001560 <HAL_InitTick>

  return HAL_OK;
 80029c8:	2300      	movs	r3, #0
}
 80029ca:	4618      	mov	r0, r3
 80029cc:	3710      	adds	r7, #16
 80029ce:	46bd      	mov	sp, r7
 80029d0:	bd80      	pop	{r7, pc}
 80029d2:	bf00      	nop
 80029d4:	40023c00 	.word	0x40023c00
 80029d8:	40023800 	.word	0x40023800
 80029dc:	08003dec 	.word	0x08003dec
 80029e0:	20000004 	.word	0x20000004
 80029e4:	20000008 	.word	0x20000008

080029e8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80029e8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80029ea:	b085      	sub	sp, #20
 80029ec:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80029ee:	2300      	movs	r3, #0
 80029f0:	607b      	str	r3, [r7, #4]
 80029f2:	2300      	movs	r3, #0
 80029f4:	60fb      	str	r3, [r7, #12]
 80029f6:	2300      	movs	r3, #0
 80029f8:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 80029fa:	2300      	movs	r3, #0
 80029fc:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80029fe:	4b50      	ldr	r3, [pc, #320]	; (8002b40 <HAL_RCC_GetSysClockFreq+0x158>)
 8002a00:	689b      	ldr	r3, [r3, #8]
 8002a02:	f003 030c 	and.w	r3, r3, #12
 8002a06:	2b04      	cmp	r3, #4
 8002a08:	d007      	beq.n	8002a1a <HAL_RCC_GetSysClockFreq+0x32>
 8002a0a:	2b08      	cmp	r3, #8
 8002a0c:	d008      	beq.n	8002a20 <HAL_RCC_GetSysClockFreq+0x38>
 8002a0e:	2b00      	cmp	r3, #0
 8002a10:	f040 808d 	bne.w	8002b2e <HAL_RCC_GetSysClockFreq+0x146>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002a14:	4b4b      	ldr	r3, [pc, #300]	; (8002b44 <HAL_RCC_GetSysClockFreq+0x15c>)
 8002a16:	60bb      	str	r3, [r7, #8]
       break;
 8002a18:	e08c      	b.n	8002b34 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002a1a:	4b4b      	ldr	r3, [pc, #300]	; (8002b48 <HAL_RCC_GetSysClockFreq+0x160>)
 8002a1c:	60bb      	str	r3, [r7, #8]
      break;
 8002a1e:	e089      	b.n	8002b34 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002a20:	4b47      	ldr	r3, [pc, #284]	; (8002b40 <HAL_RCC_GetSysClockFreq+0x158>)
 8002a22:	685b      	ldr	r3, [r3, #4]
 8002a24:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002a28:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002a2a:	4b45      	ldr	r3, [pc, #276]	; (8002b40 <HAL_RCC_GetSysClockFreq+0x158>)
 8002a2c:	685b      	ldr	r3, [r3, #4]
 8002a2e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002a32:	2b00      	cmp	r3, #0
 8002a34:	d023      	beq.n	8002a7e <HAL_RCC_GetSysClockFreq+0x96>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002a36:	4b42      	ldr	r3, [pc, #264]	; (8002b40 <HAL_RCC_GetSysClockFreq+0x158>)
 8002a38:	685b      	ldr	r3, [r3, #4]
 8002a3a:	099b      	lsrs	r3, r3, #6
 8002a3c:	f04f 0400 	mov.w	r4, #0
 8002a40:	f240 11ff 	movw	r1, #511	; 0x1ff
 8002a44:	f04f 0200 	mov.w	r2, #0
 8002a48:	ea03 0501 	and.w	r5, r3, r1
 8002a4c:	ea04 0602 	and.w	r6, r4, r2
 8002a50:	4a3d      	ldr	r2, [pc, #244]	; (8002b48 <HAL_RCC_GetSysClockFreq+0x160>)
 8002a52:	fb02 f106 	mul.w	r1, r2, r6
 8002a56:	2200      	movs	r2, #0
 8002a58:	fb02 f205 	mul.w	r2, r2, r5
 8002a5c:	440a      	add	r2, r1
 8002a5e:	493a      	ldr	r1, [pc, #232]	; (8002b48 <HAL_RCC_GetSysClockFreq+0x160>)
 8002a60:	fba5 0101 	umull	r0, r1, r5, r1
 8002a64:	1853      	adds	r3, r2, r1
 8002a66:	4619      	mov	r1, r3
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	f04f 0400 	mov.w	r4, #0
 8002a6e:	461a      	mov	r2, r3
 8002a70:	4623      	mov	r3, r4
 8002a72:	f7fd fba9 	bl	80001c8 <__aeabi_uldivmod>
 8002a76:	4603      	mov	r3, r0
 8002a78:	460c      	mov	r4, r1
 8002a7a:	60fb      	str	r3, [r7, #12]
 8002a7c:	e049      	b.n	8002b12 <HAL_RCC_GetSysClockFreq+0x12a>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002a7e:	4b30      	ldr	r3, [pc, #192]	; (8002b40 <HAL_RCC_GetSysClockFreq+0x158>)
 8002a80:	685b      	ldr	r3, [r3, #4]
 8002a82:	099b      	lsrs	r3, r3, #6
 8002a84:	f04f 0400 	mov.w	r4, #0
 8002a88:	f240 11ff 	movw	r1, #511	; 0x1ff
 8002a8c:	f04f 0200 	mov.w	r2, #0
 8002a90:	ea03 0501 	and.w	r5, r3, r1
 8002a94:	ea04 0602 	and.w	r6, r4, r2
 8002a98:	4629      	mov	r1, r5
 8002a9a:	4632      	mov	r2, r6
 8002a9c:	f04f 0300 	mov.w	r3, #0
 8002aa0:	f04f 0400 	mov.w	r4, #0
 8002aa4:	0154      	lsls	r4, r2, #5
 8002aa6:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8002aaa:	014b      	lsls	r3, r1, #5
 8002aac:	4619      	mov	r1, r3
 8002aae:	4622      	mov	r2, r4
 8002ab0:	1b49      	subs	r1, r1, r5
 8002ab2:	eb62 0206 	sbc.w	r2, r2, r6
 8002ab6:	f04f 0300 	mov.w	r3, #0
 8002aba:	f04f 0400 	mov.w	r4, #0
 8002abe:	0194      	lsls	r4, r2, #6
 8002ac0:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8002ac4:	018b      	lsls	r3, r1, #6
 8002ac6:	1a5b      	subs	r3, r3, r1
 8002ac8:	eb64 0402 	sbc.w	r4, r4, r2
 8002acc:	f04f 0100 	mov.w	r1, #0
 8002ad0:	f04f 0200 	mov.w	r2, #0
 8002ad4:	00e2      	lsls	r2, r4, #3
 8002ad6:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8002ada:	00d9      	lsls	r1, r3, #3
 8002adc:	460b      	mov	r3, r1
 8002ade:	4614      	mov	r4, r2
 8002ae0:	195b      	adds	r3, r3, r5
 8002ae2:	eb44 0406 	adc.w	r4, r4, r6
 8002ae6:	f04f 0100 	mov.w	r1, #0
 8002aea:	f04f 0200 	mov.w	r2, #0
 8002aee:	02a2      	lsls	r2, r4, #10
 8002af0:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8002af4:	0299      	lsls	r1, r3, #10
 8002af6:	460b      	mov	r3, r1
 8002af8:	4614      	mov	r4, r2
 8002afa:	4618      	mov	r0, r3
 8002afc:	4621      	mov	r1, r4
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	f04f 0400 	mov.w	r4, #0
 8002b04:	461a      	mov	r2, r3
 8002b06:	4623      	mov	r3, r4
 8002b08:	f7fd fb5e 	bl	80001c8 <__aeabi_uldivmod>
 8002b0c:	4603      	mov	r3, r0
 8002b0e:	460c      	mov	r4, r1
 8002b10:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002b12:	4b0b      	ldr	r3, [pc, #44]	; (8002b40 <HAL_RCC_GetSysClockFreq+0x158>)
 8002b14:	685b      	ldr	r3, [r3, #4]
 8002b16:	0c1b      	lsrs	r3, r3, #16
 8002b18:	f003 0303 	and.w	r3, r3, #3
 8002b1c:	3301      	adds	r3, #1
 8002b1e:	005b      	lsls	r3, r3, #1
 8002b20:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8002b22:	68fa      	ldr	r2, [r7, #12]
 8002b24:	683b      	ldr	r3, [r7, #0]
 8002b26:	fbb2 f3f3 	udiv	r3, r2, r3
 8002b2a:	60bb      	str	r3, [r7, #8]
      break;
 8002b2c:	e002      	b.n	8002b34 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002b2e:	4b05      	ldr	r3, [pc, #20]	; (8002b44 <HAL_RCC_GetSysClockFreq+0x15c>)
 8002b30:	60bb      	str	r3, [r7, #8]
      break;
 8002b32:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002b34:	68bb      	ldr	r3, [r7, #8]
}
 8002b36:	4618      	mov	r0, r3
 8002b38:	3714      	adds	r7, #20
 8002b3a:	46bd      	mov	sp, r7
 8002b3c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002b3e:	bf00      	nop
 8002b40:	40023800 	.word	0x40023800
 8002b44:	00f42400 	.word	0x00f42400
 8002b48:	017d7840 	.word	0x017d7840

08002b4c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002b4c:	b480      	push	{r7}
 8002b4e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002b50:	4b03      	ldr	r3, [pc, #12]	; (8002b60 <HAL_RCC_GetHCLKFreq+0x14>)
 8002b52:	681b      	ldr	r3, [r3, #0]
}
 8002b54:	4618      	mov	r0, r3
 8002b56:	46bd      	mov	sp, r7
 8002b58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b5c:	4770      	bx	lr
 8002b5e:	bf00      	nop
 8002b60:	20000004 	.word	0x20000004

08002b64 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002b64:	b580      	push	{r7, lr}
 8002b66:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002b68:	f7ff fff0 	bl	8002b4c <HAL_RCC_GetHCLKFreq>
 8002b6c:	4601      	mov	r1, r0
 8002b6e:	4b05      	ldr	r3, [pc, #20]	; (8002b84 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002b70:	689b      	ldr	r3, [r3, #8]
 8002b72:	0a9b      	lsrs	r3, r3, #10
 8002b74:	f003 0307 	and.w	r3, r3, #7
 8002b78:	4a03      	ldr	r2, [pc, #12]	; (8002b88 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002b7a:	5cd3      	ldrb	r3, [r2, r3]
 8002b7c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002b80:	4618      	mov	r0, r3
 8002b82:	bd80      	pop	{r7, pc}
 8002b84:	40023800 	.word	0x40023800
 8002b88:	08003dfc 	.word	0x08003dfc

08002b8c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002b8c:	b580      	push	{r7, lr}
 8002b8e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002b90:	f7ff ffdc 	bl	8002b4c <HAL_RCC_GetHCLKFreq>
 8002b94:	4601      	mov	r1, r0
 8002b96:	4b05      	ldr	r3, [pc, #20]	; (8002bac <HAL_RCC_GetPCLK2Freq+0x20>)
 8002b98:	689b      	ldr	r3, [r3, #8]
 8002b9a:	0b5b      	lsrs	r3, r3, #13
 8002b9c:	f003 0307 	and.w	r3, r3, #7
 8002ba0:	4a03      	ldr	r2, [pc, #12]	; (8002bb0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002ba2:	5cd3      	ldrb	r3, [r2, r3]
 8002ba4:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002ba8:	4618      	mov	r0, r3
 8002baa:	bd80      	pop	{r7, pc}
 8002bac:	40023800 	.word	0x40023800
 8002bb0:	08003dfc 	.word	0x08003dfc

08002bb4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002bb4:	b580      	push	{r7, lr}
 8002bb6:	b082      	sub	sp, #8
 8002bb8:	af00      	add	r7, sp, #0
 8002bba:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	2b00      	cmp	r3, #0
 8002bc0:	d101      	bne.n	8002bc6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002bc2:	2301      	movs	r3, #1
 8002bc4:	e03f      	b.n	8002c46 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8002bcc:	b2db      	uxtb	r3, r3
 8002bce:	2b00      	cmp	r3, #0
 8002bd0:	d106      	bne.n	8002be0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	2200      	movs	r2, #0
 8002bd6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002bda:	6878      	ldr	r0, [r7, #4]
 8002bdc:	f7fe f98c 	bl	8000ef8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	2224      	movs	r2, #36	; 0x24
 8002be4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	68da      	ldr	r2, [r3, #12]
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002bf6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002bf8:	6878      	ldr	r0, [r7, #4]
 8002bfa:	f000 fc3d 	bl	8003478 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	691a      	ldr	r2, [r3, #16]
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002c0c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	695a      	ldr	r2, [r3, #20]
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002c1c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	68da      	ldr	r2, [r3, #12]
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002c2c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	2200      	movs	r2, #0
 8002c32:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	2220      	movs	r2, #32
 8002c38:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	2220      	movs	r2, #32
 8002c40:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8002c44:	2300      	movs	r3, #0
}
 8002c46:	4618      	mov	r0, r3
 8002c48:	3708      	adds	r7, #8
 8002c4a:	46bd      	mov	sp, r7
 8002c4c:	bd80      	pop	{r7, pc}

08002c4e <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002c4e:	b580      	push	{r7, lr}
 8002c50:	b088      	sub	sp, #32
 8002c52:	af02      	add	r7, sp, #8
 8002c54:	60f8      	str	r0, [r7, #12]
 8002c56:	60b9      	str	r1, [r7, #8]
 8002c58:	603b      	str	r3, [r7, #0]
 8002c5a:	4613      	mov	r3, r2
 8002c5c:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 8002c5e:	2300      	movs	r3, #0
 8002c60:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002c62:	68fb      	ldr	r3, [r7, #12]
 8002c64:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8002c68:	b2db      	uxtb	r3, r3
 8002c6a:	2b20      	cmp	r3, #32
 8002c6c:	f040 8083 	bne.w	8002d76 <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 8002c70:	68bb      	ldr	r3, [r7, #8]
 8002c72:	2b00      	cmp	r3, #0
 8002c74:	d002      	beq.n	8002c7c <HAL_UART_Transmit+0x2e>
 8002c76:	88fb      	ldrh	r3, [r7, #6]
 8002c78:	2b00      	cmp	r3, #0
 8002c7a:	d101      	bne.n	8002c80 <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 8002c7c:	2301      	movs	r3, #1
 8002c7e:	e07b      	b.n	8002d78 <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002c80:	68fb      	ldr	r3, [r7, #12]
 8002c82:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002c86:	2b01      	cmp	r3, #1
 8002c88:	d101      	bne.n	8002c8e <HAL_UART_Transmit+0x40>
 8002c8a:	2302      	movs	r3, #2
 8002c8c:	e074      	b.n	8002d78 <HAL_UART_Transmit+0x12a>
 8002c8e:	68fb      	ldr	r3, [r7, #12]
 8002c90:	2201      	movs	r2, #1
 8002c92:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002c96:	68fb      	ldr	r3, [r7, #12]
 8002c98:	2200      	movs	r2, #0
 8002c9a:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002c9c:	68fb      	ldr	r3, [r7, #12]
 8002c9e:	2221      	movs	r2, #33	; 0x21
 8002ca0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8002ca4:	f7fe fca0 	bl	80015e8 <HAL_GetTick>
 8002ca8:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002caa:	68fb      	ldr	r3, [r7, #12]
 8002cac:	88fa      	ldrh	r2, [r7, #6]
 8002cae:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8002cb0:	68fb      	ldr	r3, [r7, #12]
 8002cb2:	88fa      	ldrh	r2, [r7, #6]
 8002cb4:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8002cb6:	68fb      	ldr	r3, [r7, #12]
 8002cb8:	2200      	movs	r2, #0
 8002cba:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 8002cbe:	e042      	b.n	8002d46 <HAL_UART_Transmit+0xf8>
    {
      huart->TxXferCount--;
 8002cc0:	68fb      	ldr	r3, [r7, #12]
 8002cc2:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002cc4:	b29b      	uxth	r3, r3
 8002cc6:	3b01      	subs	r3, #1
 8002cc8:	b29a      	uxth	r2, r3
 8002cca:	68fb      	ldr	r3, [r7, #12]
 8002ccc:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8002cce:	68fb      	ldr	r3, [r7, #12]
 8002cd0:	689b      	ldr	r3, [r3, #8]
 8002cd2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002cd6:	d122      	bne.n	8002d1e <HAL_UART_Transmit+0xd0>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002cd8:	683b      	ldr	r3, [r7, #0]
 8002cda:	9300      	str	r3, [sp, #0]
 8002cdc:	697b      	ldr	r3, [r7, #20]
 8002cde:	2200      	movs	r2, #0
 8002ce0:	2180      	movs	r1, #128	; 0x80
 8002ce2:	68f8      	ldr	r0, [r7, #12]
 8002ce4:	f000 fa5c 	bl	80031a0 <UART_WaitOnFlagUntilTimeout>
 8002ce8:	4603      	mov	r3, r0
 8002cea:	2b00      	cmp	r3, #0
 8002cec:	d001      	beq.n	8002cf2 <HAL_UART_Transmit+0xa4>
        {
          return HAL_TIMEOUT;
 8002cee:	2303      	movs	r3, #3
 8002cf0:	e042      	b.n	8002d78 <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 8002cf2:	68bb      	ldr	r3, [r7, #8]
 8002cf4:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 8002cf6:	693b      	ldr	r3, [r7, #16]
 8002cf8:	881b      	ldrh	r3, [r3, #0]
 8002cfa:	461a      	mov	r2, r3
 8002cfc:	68fb      	ldr	r3, [r7, #12]
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002d04:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 8002d06:	68fb      	ldr	r3, [r7, #12]
 8002d08:	691b      	ldr	r3, [r3, #16]
 8002d0a:	2b00      	cmp	r3, #0
 8002d0c:	d103      	bne.n	8002d16 <HAL_UART_Transmit+0xc8>
        {
          pData += 2U;
 8002d0e:	68bb      	ldr	r3, [r7, #8]
 8002d10:	3302      	adds	r3, #2
 8002d12:	60bb      	str	r3, [r7, #8]
 8002d14:	e017      	b.n	8002d46 <HAL_UART_Transmit+0xf8>
        }
        else
        {
          pData += 1U;
 8002d16:	68bb      	ldr	r3, [r7, #8]
 8002d18:	3301      	adds	r3, #1
 8002d1a:	60bb      	str	r3, [r7, #8]
 8002d1c:	e013      	b.n	8002d46 <HAL_UART_Transmit+0xf8>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002d1e:	683b      	ldr	r3, [r7, #0]
 8002d20:	9300      	str	r3, [sp, #0]
 8002d22:	697b      	ldr	r3, [r7, #20]
 8002d24:	2200      	movs	r2, #0
 8002d26:	2180      	movs	r1, #128	; 0x80
 8002d28:	68f8      	ldr	r0, [r7, #12]
 8002d2a:	f000 fa39 	bl	80031a0 <UART_WaitOnFlagUntilTimeout>
 8002d2e:	4603      	mov	r3, r0
 8002d30:	2b00      	cmp	r3, #0
 8002d32:	d001      	beq.n	8002d38 <HAL_UART_Transmit+0xea>
        {
          return HAL_TIMEOUT;
 8002d34:	2303      	movs	r3, #3
 8002d36:	e01f      	b.n	8002d78 <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 8002d38:	68bb      	ldr	r3, [r7, #8]
 8002d3a:	1c5a      	adds	r2, r3, #1
 8002d3c:	60ba      	str	r2, [r7, #8]
 8002d3e:	781a      	ldrb	r2, [r3, #0]
 8002d40:	68fb      	ldr	r3, [r7, #12]
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 8002d46:	68fb      	ldr	r3, [r7, #12]
 8002d48:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002d4a:	b29b      	uxth	r3, r3
 8002d4c:	2b00      	cmp	r3, #0
 8002d4e:	d1b7      	bne.n	8002cc0 <HAL_UART_Transmit+0x72>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002d50:	683b      	ldr	r3, [r7, #0]
 8002d52:	9300      	str	r3, [sp, #0]
 8002d54:	697b      	ldr	r3, [r7, #20]
 8002d56:	2200      	movs	r2, #0
 8002d58:	2140      	movs	r1, #64	; 0x40
 8002d5a:	68f8      	ldr	r0, [r7, #12]
 8002d5c:	f000 fa20 	bl	80031a0 <UART_WaitOnFlagUntilTimeout>
 8002d60:	4603      	mov	r3, r0
 8002d62:	2b00      	cmp	r3, #0
 8002d64:	d001      	beq.n	8002d6a <HAL_UART_Transmit+0x11c>
    {
      return HAL_TIMEOUT;
 8002d66:	2303      	movs	r3, #3
 8002d68:	e006      	b.n	8002d78 <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002d6a:	68fb      	ldr	r3, [r7, #12]
 8002d6c:	2220      	movs	r2, #32
 8002d6e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 8002d72:	2300      	movs	r3, #0
 8002d74:	e000      	b.n	8002d78 <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 8002d76:	2302      	movs	r3, #2
  }
}
 8002d78:	4618      	mov	r0, r3
 8002d7a:	3718      	adds	r7, #24
 8002d7c:	46bd      	mov	sp, r7
 8002d7e:	bd80      	pop	{r7, pc}

08002d80 <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002d80:	b580      	push	{r7, lr}
 8002d82:	b088      	sub	sp, #32
 8002d84:	af02      	add	r7, sp, #8
 8002d86:	60f8      	str	r0, [r7, #12]
 8002d88:	60b9      	str	r1, [r7, #8]
 8002d8a:	603b      	str	r3, [r7, #0]
 8002d8c:	4613      	mov	r3, r2
 8002d8e:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 8002d90:	2300      	movs	r3, #0
 8002d92:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8002d94:	68fb      	ldr	r3, [r7, #12]
 8002d96:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8002d9a:	b2db      	uxtb	r3, r3
 8002d9c:	2b20      	cmp	r3, #32
 8002d9e:	f040 8090 	bne.w	8002ec2 <HAL_UART_Receive+0x142>
  {
    if ((pData == NULL) || (Size == 0U))
 8002da2:	68bb      	ldr	r3, [r7, #8]
 8002da4:	2b00      	cmp	r3, #0
 8002da6:	d002      	beq.n	8002dae <HAL_UART_Receive+0x2e>
 8002da8:	88fb      	ldrh	r3, [r7, #6]
 8002daa:	2b00      	cmp	r3, #0
 8002dac:	d101      	bne.n	8002db2 <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 8002dae:	2301      	movs	r3, #1
 8002db0:	e088      	b.n	8002ec4 <HAL_UART_Receive+0x144>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002db2:	68fb      	ldr	r3, [r7, #12]
 8002db4:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002db8:	2b01      	cmp	r3, #1
 8002dba:	d101      	bne.n	8002dc0 <HAL_UART_Receive+0x40>
 8002dbc:	2302      	movs	r3, #2
 8002dbe:	e081      	b.n	8002ec4 <HAL_UART_Receive+0x144>
 8002dc0:	68fb      	ldr	r3, [r7, #12]
 8002dc2:	2201      	movs	r2, #1
 8002dc4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002dc8:	68fb      	ldr	r3, [r7, #12]
 8002dca:	2200      	movs	r2, #0
 8002dcc:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8002dce:	68fb      	ldr	r3, [r7, #12]
 8002dd0:	2222      	movs	r2, #34	; 0x22
 8002dd2:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8002dd6:	f7fe fc07 	bl	80015e8 <HAL_GetTick>
 8002dda:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 8002ddc:	68fb      	ldr	r3, [r7, #12]
 8002dde:	88fa      	ldrh	r2, [r7, #6]
 8002de0:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 8002de2:	68fb      	ldr	r3, [r7, #12]
 8002de4:	88fa      	ldrh	r2, [r7, #6]
 8002de6:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8002de8:	68fb      	ldr	r3, [r7, #12]
 8002dea:	2200      	movs	r2, #0
 8002dec:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 8002df0:	e05c      	b.n	8002eac <HAL_UART_Receive+0x12c>
    {
      huart->RxXferCount--;
 8002df2:	68fb      	ldr	r3, [r7, #12]
 8002df4:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002df6:	b29b      	uxth	r3, r3
 8002df8:	3b01      	subs	r3, #1
 8002dfa:	b29a      	uxth	r2, r3
 8002dfc:	68fb      	ldr	r3, [r7, #12]
 8002dfe:	85da      	strh	r2, [r3, #46]	; 0x2e
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8002e00:	68fb      	ldr	r3, [r7, #12]
 8002e02:	689b      	ldr	r3, [r3, #8]
 8002e04:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002e08:	d12b      	bne.n	8002e62 <HAL_UART_Receive+0xe2>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8002e0a:	683b      	ldr	r3, [r7, #0]
 8002e0c:	9300      	str	r3, [sp, #0]
 8002e0e:	697b      	ldr	r3, [r7, #20]
 8002e10:	2200      	movs	r2, #0
 8002e12:	2120      	movs	r1, #32
 8002e14:	68f8      	ldr	r0, [r7, #12]
 8002e16:	f000 f9c3 	bl	80031a0 <UART_WaitOnFlagUntilTimeout>
 8002e1a:	4603      	mov	r3, r0
 8002e1c:	2b00      	cmp	r3, #0
 8002e1e:	d001      	beq.n	8002e24 <HAL_UART_Receive+0xa4>
        {
          return HAL_TIMEOUT;
 8002e20:	2303      	movs	r3, #3
 8002e22:	e04f      	b.n	8002ec4 <HAL_UART_Receive+0x144>
        }
        tmp = (uint16_t *) pData;
 8002e24:	68bb      	ldr	r3, [r7, #8]
 8002e26:	613b      	str	r3, [r7, #16]
        if (huart->Init.Parity == UART_PARITY_NONE)
 8002e28:	68fb      	ldr	r3, [r7, #12]
 8002e2a:	691b      	ldr	r3, [r3, #16]
 8002e2c:	2b00      	cmp	r3, #0
 8002e2e:	d10c      	bne.n	8002e4a <HAL_UART_Receive+0xca>
        {
          *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8002e30:	68fb      	ldr	r3, [r7, #12]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	685b      	ldr	r3, [r3, #4]
 8002e36:	b29b      	uxth	r3, r3
 8002e38:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002e3c:	b29a      	uxth	r2, r3
 8002e3e:	693b      	ldr	r3, [r7, #16]
 8002e40:	801a      	strh	r2, [r3, #0]
          pData += 2U;
 8002e42:	68bb      	ldr	r3, [r7, #8]
 8002e44:	3302      	adds	r3, #2
 8002e46:	60bb      	str	r3, [r7, #8]
 8002e48:	e030      	b.n	8002eac <HAL_UART_Receive+0x12c>
        }
        else
        {
          *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 8002e4a:	68fb      	ldr	r3, [r7, #12]
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	685b      	ldr	r3, [r3, #4]
 8002e50:	b29b      	uxth	r3, r3
 8002e52:	b2db      	uxtb	r3, r3
 8002e54:	b29a      	uxth	r2, r3
 8002e56:	693b      	ldr	r3, [r7, #16]
 8002e58:	801a      	strh	r2, [r3, #0]
          pData += 1U;
 8002e5a:	68bb      	ldr	r3, [r7, #8]
 8002e5c:	3301      	adds	r3, #1
 8002e5e:	60bb      	str	r3, [r7, #8]
 8002e60:	e024      	b.n	8002eac <HAL_UART_Receive+0x12c>
        }

      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8002e62:	683b      	ldr	r3, [r7, #0]
 8002e64:	9300      	str	r3, [sp, #0]
 8002e66:	697b      	ldr	r3, [r7, #20]
 8002e68:	2200      	movs	r2, #0
 8002e6a:	2120      	movs	r1, #32
 8002e6c:	68f8      	ldr	r0, [r7, #12]
 8002e6e:	f000 f997 	bl	80031a0 <UART_WaitOnFlagUntilTimeout>
 8002e72:	4603      	mov	r3, r0
 8002e74:	2b00      	cmp	r3, #0
 8002e76:	d001      	beq.n	8002e7c <HAL_UART_Receive+0xfc>
        {
          return HAL_TIMEOUT;
 8002e78:	2303      	movs	r3, #3
 8002e7a:	e023      	b.n	8002ec4 <HAL_UART_Receive+0x144>
        }
        if (huart->Init.Parity == UART_PARITY_NONE)
 8002e7c:	68fb      	ldr	r3, [r7, #12]
 8002e7e:	691b      	ldr	r3, [r3, #16]
 8002e80:	2b00      	cmp	r3, #0
 8002e82:	d108      	bne.n	8002e96 <HAL_UART_Receive+0x116>
        {
          *pData++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8002e84:	68fb      	ldr	r3, [r7, #12]
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	6859      	ldr	r1, [r3, #4]
 8002e8a:	68bb      	ldr	r3, [r7, #8]
 8002e8c:	1c5a      	adds	r2, r3, #1
 8002e8e:	60ba      	str	r2, [r7, #8]
 8002e90:	b2ca      	uxtb	r2, r1
 8002e92:	701a      	strb	r2, [r3, #0]
 8002e94:	e00a      	b.n	8002eac <HAL_UART_Receive+0x12c>
        }
        else
        {
          *pData++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8002e96:	68fb      	ldr	r3, [r7, #12]
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	685b      	ldr	r3, [r3, #4]
 8002e9c:	b2da      	uxtb	r2, r3
 8002e9e:	68bb      	ldr	r3, [r7, #8]
 8002ea0:	1c59      	adds	r1, r3, #1
 8002ea2:	60b9      	str	r1, [r7, #8]
 8002ea4:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8002ea8:	b2d2      	uxtb	r2, r2
 8002eaa:	701a      	strb	r2, [r3, #0]
    while (huart->RxXferCount > 0U)
 8002eac:	68fb      	ldr	r3, [r7, #12]
 8002eae:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002eb0:	b29b      	uxth	r3, r3
 8002eb2:	2b00      	cmp	r3, #0
 8002eb4:	d19d      	bne.n	8002df2 <HAL_UART_Receive+0x72>

      }
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8002eb6:	68fb      	ldr	r3, [r7, #12]
 8002eb8:	2220      	movs	r2, #32
 8002eba:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    return HAL_OK;
 8002ebe:	2300      	movs	r3, #0
 8002ec0:	e000      	b.n	8002ec4 <HAL_UART_Receive+0x144>
  }
  else
  {
    return HAL_BUSY;
 8002ec2:	2302      	movs	r3, #2
  }
}
 8002ec4:	4618      	mov	r0, r3
 8002ec6:	3718      	adds	r7, #24
 8002ec8:	46bd      	mov	sp, r7
 8002eca:	bd80      	pop	{r7, pc}

08002ecc <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002ecc:	b480      	push	{r7}
 8002ece:	b085      	sub	sp, #20
 8002ed0:	af00      	add	r7, sp, #0
 8002ed2:	60f8      	str	r0, [r7, #12]
 8002ed4:	60b9      	str	r1, [r7, #8]
 8002ed6:	4613      	mov	r3, r2
 8002ed8:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8002eda:	68fb      	ldr	r3, [r7, #12]
 8002edc:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8002ee0:	b2db      	uxtb	r3, r3
 8002ee2:	2b20      	cmp	r3, #32
 8002ee4:	d140      	bne.n	8002f68 <HAL_UART_Receive_IT+0x9c>
  {
    if ((pData == NULL) || (Size == 0U))
 8002ee6:	68bb      	ldr	r3, [r7, #8]
 8002ee8:	2b00      	cmp	r3, #0
 8002eea:	d002      	beq.n	8002ef2 <HAL_UART_Receive_IT+0x26>
 8002eec:	88fb      	ldrh	r3, [r7, #6]
 8002eee:	2b00      	cmp	r3, #0
 8002ef0:	d101      	bne.n	8002ef6 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8002ef2:	2301      	movs	r3, #1
 8002ef4:	e039      	b.n	8002f6a <HAL_UART_Receive_IT+0x9e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002ef6:	68fb      	ldr	r3, [r7, #12]
 8002ef8:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002efc:	2b01      	cmp	r3, #1
 8002efe:	d101      	bne.n	8002f04 <HAL_UART_Receive_IT+0x38>
 8002f00:	2302      	movs	r3, #2
 8002f02:	e032      	b.n	8002f6a <HAL_UART_Receive_IT+0x9e>
 8002f04:	68fb      	ldr	r3, [r7, #12]
 8002f06:	2201      	movs	r2, #1
 8002f08:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pRxBuffPtr = pData;
 8002f0c:	68fb      	ldr	r3, [r7, #12]
 8002f0e:	68ba      	ldr	r2, [r7, #8]
 8002f10:	629a      	str	r2, [r3, #40]	; 0x28
    huart->RxXferSize = Size;
 8002f12:	68fb      	ldr	r3, [r7, #12]
 8002f14:	88fa      	ldrh	r2, [r7, #6]
 8002f16:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 8002f18:	68fb      	ldr	r3, [r7, #12]
 8002f1a:	88fa      	ldrh	r2, [r7, #6]
 8002f1c:	85da      	strh	r2, [r3, #46]	; 0x2e

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002f1e:	68fb      	ldr	r3, [r7, #12]
 8002f20:	2200      	movs	r2, #0
 8002f22:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8002f24:	68fb      	ldr	r3, [r7, #12]
 8002f26:	2222      	movs	r2, #34	; 0x22
 8002f28:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8002f2c:	68fb      	ldr	r3, [r7, #12]
 8002f2e:	2200      	movs	r2, #0
 8002f30:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8002f34:	68fb      	ldr	r3, [r7, #12]
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	68da      	ldr	r2, [r3, #12]
 8002f3a:	68fb      	ldr	r3, [r7, #12]
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002f42:	60da      	str	r2, [r3, #12]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8002f44:	68fb      	ldr	r3, [r7, #12]
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	695a      	ldr	r2, [r3, #20]
 8002f4a:	68fb      	ldr	r3, [r7, #12]
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	f042 0201 	orr.w	r2, r2, #1
 8002f52:	615a      	str	r2, [r3, #20]

    /* Enable the UART Data Register not empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8002f54:	68fb      	ldr	r3, [r7, #12]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	68da      	ldr	r2, [r3, #12]
 8002f5a:	68fb      	ldr	r3, [r7, #12]
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	f042 0220 	orr.w	r2, r2, #32
 8002f62:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 8002f64:	2300      	movs	r3, #0
 8002f66:	e000      	b.n	8002f6a <HAL_UART_Receive_IT+0x9e>
  }
  else
  {
    return HAL_BUSY;
 8002f68:	2302      	movs	r3, #2
  }
}
 8002f6a:	4618      	mov	r0, r3
 8002f6c:	3714      	adds	r7, #20
 8002f6e:	46bd      	mov	sp, r7
 8002f70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f74:	4770      	bx	lr
	...

08002f78 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8002f78:	b580      	push	{r7, lr}
 8002f7a:	b088      	sub	sp, #32
 8002f7c:	af00      	add	r7, sp, #0
 8002f7e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	68db      	ldr	r3, [r3, #12]
 8002f8e:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	695b      	ldr	r3, [r3, #20]
 8002f96:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 8002f98:	2300      	movs	r3, #0
 8002f9a:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 8002f9c:	2300      	movs	r3, #0
 8002f9e:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8002fa0:	69fb      	ldr	r3, [r7, #28]
 8002fa2:	f003 030f 	and.w	r3, r3, #15
 8002fa6:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 8002fa8:	693b      	ldr	r3, [r7, #16]
 8002faa:	2b00      	cmp	r3, #0
 8002fac:	d10d      	bne.n	8002fca <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002fae:	69fb      	ldr	r3, [r7, #28]
 8002fb0:	f003 0320 	and.w	r3, r3, #32
 8002fb4:	2b00      	cmp	r3, #0
 8002fb6:	d008      	beq.n	8002fca <HAL_UART_IRQHandler+0x52>
 8002fb8:	69bb      	ldr	r3, [r7, #24]
 8002fba:	f003 0320 	and.w	r3, r3, #32
 8002fbe:	2b00      	cmp	r3, #0
 8002fc0:	d003      	beq.n	8002fca <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8002fc2:	6878      	ldr	r0, [r7, #4]
 8002fc4:	f000 f9d6 	bl	8003374 <UART_Receive_IT>
      return;
 8002fc8:	e0d1      	b.n	800316e <HAL_UART_IRQHandler+0x1f6>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8002fca:	693b      	ldr	r3, [r7, #16]
 8002fcc:	2b00      	cmp	r3, #0
 8002fce:	f000 80b0 	beq.w	8003132 <HAL_UART_IRQHandler+0x1ba>
 8002fd2:	697b      	ldr	r3, [r7, #20]
 8002fd4:	f003 0301 	and.w	r3, r3, #1
 8002fd8:	2b00      	cmp	r3, #0
 8002fda:	d105      	bne.n	8002fe8 <HAL_UART_IRQHandler+0x70>
 8002fdc:	69bb      	ldr	r3, [r7, #24]
 8002fde:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8002fe2:	2b00      	cmp	r3, #0
 8002fe4:	f000 80a5 	beq.w	8003132 <HAL_UART_IRQHandler+0x1ba>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8002fe8:	69fb      	ldr	r3, [r7, #28]
 8002fea:	f003 0301 	and.w	r3, r3, #1
 8002fee:	2b00      	cmp	r3, #0
 8002ff0:	d00a      	beq.n	8003008 <HAL_UART_IRQHandler+0x90>
 8002ff2:	69bb      	ldr	r3, [r7, #24]
 8002ff4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ff8:	2b00      	cmp	r3, #0
 8002ffa:	d005      	beq.n	8003008 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003000:	f043 0201 	orr.w	r2, r3, #1
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003008:	69fb      	ldr	r3, [r7, #28]
 800300a:	f003 0304 	and.w	r3, r3, #4
 800300e:	2b00      	cmp	r3, #0
 8003010:	d00a      	beq.n	8003028 <HAL_UART_IRQHandler+0xb0>
 8003012:	697b      	ldr	r3, [r7, #20]
 8003014:	f003 0301 	and.w	r3, r3, #1
 8003018:	2b00      	cmp	r3, #0
 800301a:	d005      	beq.n	8003028 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003020:	f043 0202 	orr.w	r2, r3, #2
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003028:	69fb      	ldr	r3, [r7, #28]
 800302a:	f003 0302 	and.w	r3, r3, #2
 800302e:	2b00      	cmp	r3, #0
 8003030:	d00a      	beq.n	8003048 <HAL_UART_IRQHandler+0xd0>
 8003032:	697b      	ldr	r3, [r7, #20]
 8003034:	f003 0301 	and.w	r3, r3, #1
 8003038:	2b00      	cmp	r3, #0
 800303a:	d005      	beq.n	8003048 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003040:	f043 0204 	orr.w	r2, r3, #4
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8003048:	69fb      	ldr	r3, [r7, #28]
 800304a:	f003 0308 	and.w	r3, r3, #8
 800304e:	2b00      	cmp	r3, #0
 8003050:	d00f      	beq.n	8003072 <HAL_UART_IRQHandler+0xfa>
 8003052:	69bb      	ldr	r3, [r7, #24]
 8003054:	f003 0320 	and.w	r3, r3, #32
 8003058:	2b00      	cmp	r3, #0
 800305a:	d104      	bne.n	8003066 <HAL_UART_IRQHandler+0xee>
 800305c:	697b      	ldr	r3, [r7, #20]
 800305e:	f003 0301 	and.w	r3, r3, #1
 8003062:	2b00      	cmp	r3, #0
 8003064:	d005      	beq.n	8003072 <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800306a:	f043 0208 	orr.w	r2, r3, #8
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003076:	2b00      	cmp	r3, #0
 8003078:	d078      	beq.n	800316c <HAL_UART_IRQHandler+0x1f4>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800307a:	69fb      	ldr	r3, [r7, #28]
 800307c:	f003 0320 	and.w	r3, r3, #32
 8003080:	2b00      	cmp	r3, #0
 8003082:	d007      	beq.n	8003094 <HAL_UART_IRQHandler+0x11c>
 8003084:	69bb      	ldr	r3, [r7, #24]
 8003086:	f003 0320 	and.w	r3, r3, #32
 800308a:	2b00      	cmp	r3, #0
 800308c:	d002      	beq.n	8003094 <HAL_UART_IRQHandler+0x11c>
      {
        UART_Receive_IT(huart);
 800308e:	6878      	ldr	r0, [r7, #4]
 8003090:	f000 f970 	bl	8003374 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	695b      	ldr	r3, [r3, #20]
 800309a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800309e:	2b40      	cmp	r3, #64	; 0x40
 80030a0:	bf0c      	ite	eq
 80030a2:	2301      	moveq	r3, #1
 80030a4:	2300      	movne	r3, #0
 80030a6:	b2db      	uxtb	r3, r3
 80030a8:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80030ae:	f003 0308 	and.w	r3, r3, #8
 80030b2:	2b00      	cmp	r3, #0
 80030b4:	d102      	bne.n	80030bc <HAL_UART_IRQHandler+0x144>
 80030b6:	68fb      	ldr	r3, [r7, #12]
 80030b8:	2b00      	cmp	r3, #0
 80030ba:	d031      	beq.n	8003120 <HAL_UART_IRQHandler+0x1a8>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80030bc:	6878      	ldr	r0, [r7, #4]
 80030be:	f000 f8b9 	bl	8003234 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	695b      	ldr	r3, [r3, #20]
 80030c8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80030cc:	2b40      	cmp	r3, #64	; 0x40
 80030ce:	d123      	bne.n	8003118 <HAL_UART_IRQHandler+0x1a0>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	695a      	ldr	r2, [r3, #20]
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80030de:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80030e4:	2b00      	cmp	r3, #0
 80030e6:	d013      	beq.n	8003110 <HAL_UART_IRQHandler+0x198>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80030ec:	4a21      	ldr	r2, [pc, #132]	; (8003174 <HAL_UART_IRQHandler+0x1fc>)
 80030ee:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80030f4:	4618      	mov	r0, r3
 80030f6:	f7fe fbb6 	bl	8001866 <HAL_DMA_Abort_IT>
 80030fa:	4603      	mov	r3, r0
 80030fc:	2b00      	cmp	r3, #0
 80030fe:	d016      	beq.n	800312e <HAL_UART_IRQHandler+0x1b6>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003104:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003106:	687a      	ldr	r2, [r7, #4]
 8003108:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800310a:	4610      	mov	r0, r2
 800310c:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800310e:	e00e      	b.n	800312e <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003110:	6878      	ldr	r0, [r7, #4]
 8003112:	f000 f83b 	bl	800318c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003116:	e00a      	b.n	800312e <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003118:	6878      	ldr	r0, [r7, #4]
 800311a:	f000 f837 	bl	800318c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800311e:	e006      	b.n	800312e <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003120:	6878      	ldr	r0, [r7, #4]
 8003122:	f000 f833 	bl	800318c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	2200      	movs	r2, #0
 800312a:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 800312c:	e01e      	b.n	800316c <HAL_UART_IRQHandler+0x1f4>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800312e:	bf00      	nop
    return;
 8003130:	e01c      	b.n	800316c <HAL_UART_IRQHandler+0x1f4>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8003132:	69fb      	ldr	r3, [r7, #28]
 8003134:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003138:	2b00      	cmp	r3, #0
 800313a:	d008      	beq.n	800314e <HAL_UART_IRQHandler+0x1d6>
 800313c:	69bb      	ldr	r3, [r7, #24]
 800313e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003142:	2b00      	cmp	r3, #0
 8003144:	d003      	beq.n	800314e <HAL_UART_IRQHandler+0x1d6>
  {
    UART_Transmit_IT(huart);
 8003146:	6878      	ldr	r0, [r7, #4]
 8003148:	f000 f8a6 	bl	8003298 <UART_Transmit_IT>
    return;
 800314c:	e00f      	b.n	800316e <HAL_UART_IRQHandler+0x1f6>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800314e:	69fb      	ldr	r3, [r7, #28]
 8003150:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003154:	2b00      	cmp	r3, #0
 8003156:	d00a      	beq.n	800316e <HAL_UART_IRQHandler+0x1f6>
 8003158:	69bb      	ldr	r3, [r7, #24]
 800315a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800315e:	2b00      	cmp	r3, #0
 8003160:	d005      	beq.n	800316e <HAL_UART_IRQHandler+0x1f6>
  {
    UART_EndTransmit_IT(huart);
 8003162:	6878      	ldr	r0, [r7, #4]
 8003164:	f000 f8ee 	bl	8003344 <UART_EndTransmit_IT>
    return;
 8003168:	bf00      	nop
 800316a:	e000      	b.n	800316e <HAL_UART_IRQHandler+0x1f6>
    return;
 800316c:	bf00      	nop
  }
}
 800316e:	3720      	adds	r7, #32
 8003170:	46bd      	mov	sp, r7
 8003172:	bd80      	pop	{r7, pc}
 8003174:	08003271 	.word	0x08003271

08003178 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003178:	b480      	push	{r7}
 800317a:	b083      	sub	sp, #12
 800317c:	af00      	add	r7, sp, #0
 800317e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8003180:	bf00      	nop
 8003182:	370c      	adds	r7, #12
 8003184:	46bd      	mov	sp, r7
 8003186:	f85d 7b04 	ldr.w	r7, [sp], #4
 800318a:	4770      	bx	lr

0800318c <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800318c:	b480      	push	{r7}
 800318e:	b083      	sub	sp, #12
 8003190:	af00      	add	r7, sp, #0
 8003192:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8003194:	bf00      	nop
 8003196:	370c      	adds	r7, #12
 8003198:	46bd      	mov	sp, r7
 800319a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800319e:	4770      	bx	lr

080031a0 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 80031a0:	b580      	push	{r7, lr}
 80031a2:	b084      	sub	sp, #16
 80031a4:	af00      	add	r7, sp, #0
 80031a6:	60f8      	str	r0, [r7, #12]
 80031a8:	60b9      	str	r1, [r7, #8]
 80031aa:	603b      	str	r3, [r7, #0]
 80031ac:	4613      	mov	r3, r2
 80031ae:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80031b0:	e02c      	b.n	800320c <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80031b2:	69bb      	ldr	r3, [r7, #24]
 80031b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80031b8:	d028      	beq.n	800320c <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80031ba:	69bb      	ldr	r3, [r7, #24]
 80031bc:	2b00      	cmp	r3, #0
 80031be:	d007      	beq.n	80031d0 <UART_WaitOnFlagUntilTimeout+0x30>
 80031c0:	f7fe fa12 	bl	80015e8 <HAL_GetTick>
 80031c4:	4602      	mov	r2, r0
 80031c6:	683b      	ldr	r3, [r7, #0]
 80031c8:	1ad3      	subs	r3, r2, r3
 80031ca:	69ba      	ldr	r2, [r7, #24]
 80031cc:	429a      	cmp	r2, r3
 80031ce:	d21d      	bcs.n	800320c <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80031d0:	68fb      	ldr	r3, [r7, #12]
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	68da      	ldr	r2, [r3, #12]
 80031d6:	68fb      	ldr	r3, [r7, #12]
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80031de:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80031e0:	68fb      	ldr	r3, [r7, #12]
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	695a      	ldr	r2, [r3, #20]
 80031e6:	68fb      	ldr	r3, [r7, #12]
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	f022 0201 	bic.w	r2, r2, #1
 80031ee:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 80031f0:	68fb      	ldr	r3, [r7, #12]
 80031f2:	2220      	movs	r2, #32
 80031f4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 80031f8:	68fb      	ldr	r3, [r7, #12]
 80031fa:	2220      	movs	r2, #32
 80031fc:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8003200:	68fb      	ldr	r3, [r7, #12]
 8003202:	2200      	movs	r2, #0
 8003204:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 8003208:	2303      	movs	r3, #3
 800320a:	e00f      	b.n	800322c <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800320c:	68fb      	ldr	r3, [r7, #12]
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	681a      	ldr	r2, [r3, #0]
 8003212:	68bb      	ldr	r3, [r7, #8]
 8003214:	4013      	ands	r3, r2
 8003216:	68ba      	ldr	r2, [r7, #8]
 8003218:	429a      	cmp	r2, r3
 800321a:	bf0c      	ite	eq
 800321c:	2301      	moveq	r3, #1
 800321e:	2300      	movne	r3, #0
 8003220:	b2db      	uxtb	r3, r3
 8003222:	461a      	mov	r2, r3
 8003224:	79fb      	ldrb	r3, [r7, #7]
 8003226:	429a      	cmp	r2, r3
 8003228:	d0c3      	beq.n	80031b2 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800322a:	2300      	movs	r3, #0
}
 800322c:	4618      	mov	r0, r3
 800322e:	3710      	adds	r7, #16
 8003230:	46bd      	mov	sp, r7
 8003232:	bd80      	pop	{r7, pc}

08003234 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003234:	b480      	push	{r7}
 8003236:	b083      	sub	sp, #12
 8003238:	af00      	add	r7, sp, #0
 800323a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	68da      	ldr	r2, [r3, #12]
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800324a:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	695a      	ldr	r2, [r3, #20]
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	f022 0201 	bic.w	r2, r2, #1
 800325a:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	2220      	movs	r2, #32
 8003260:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 8003264:	bf00      	nop
 8003266:	370c      	adds	r7, #12
 8003268:	46bd      	mov	sp, r7
 800326a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800326e:	4770      	bx	lr

08003270 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003270:	b580      	push	{r7, lr}
 8003272:	b084      	sub	sp, #16
 8003274:	af00      	add	r7, sp, #0
 8003276:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800327c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800327e:	68fb      	ldr	r3, [r7, #12]
 8003280:	2200      	movs	r2, #0
 8003282:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8003284:	68fb      	ldr	r3, [r7, #12]
 8003286:	2200      	movs	r2, #0
 8003288:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800328a:	68f8      	ldr	r0, [r7, #12]
 800328c:	f7ff ff7e 	bl	800318c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003290:	bf00      	nop
 8003292:	3710      	adds	r7, #16
 8003294:	46bd      	mov	sp, r7
 8003296:	bd80      	pop	{r7, pc}

08003298 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8003298:	b480      	push	{r7}
 800329a:	b085      	sub	sp, #20
 800329c:	af00      	add	r7, sp, #0
 800329e:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80032a6:	b2db      	uxtb	r3, r3
 80032a8:	2b21      	cmp	r3, #33	; 0x21
 80032aa:	d144      	bne.n	8003336 <UART_Transmit_IT+0x9e>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	689b      	ldr	r3, [r3, #8]
 80032b0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80032b4:	d11a      	bne.n	80032ec <UART_Transmit_IT+0x54>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	6a1b      	ldr	r3, [r3, #32]
 80032ba:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80032bc:	68fb      	ldr	r3, [r7, #12]
 80032be:	881b      	ldrh	r3, [r3, #0]
 80032c0:	461a      	mov	r2, r3
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80032ca:	605a      	str	r2, [r3, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	691b      	ldr	r3, [r3, #16]
 80032d0:	2b00      	cmp	r3, #0
 80032d2:	d105      	bne.n	80032e0 <UART_Transmit_IT+0x48>
      {
        huart->pTxBuffPtr += 2U;
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	6a1b      	ldr	r3, [r3, #32]
 80032d8:	1c9a      	adds	r2, r3, #2
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	621a      	str	r2, [r3, #32]
 80032de:	e00e      	b.n	80032fe <UART_Transmit_IT+0x66>
      }
      else
      {
        huart->pTxBuffPtr += 1U;
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	6a1b      	ldr	r3, [r3, #32]
 80032e4:	1c5a      	adds	r2, r3, #1
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	621a      	str	r2, [r3, #32]
 80032ea:	e008      	b.n	80032fe <UART_Transmit_IT+0x66>
      }
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	6a1b      	ldr	r3, [r3, #32]
 80032f0:	1c59      	adds	r1, r3, #1
 80032f2:	687a      	ldr	r2, [r7, #4]
 80032f4:	6211      	str	r1, [r2, #32]
 80032f6:	781a      	ldrb	r2, [r3, #0]
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003302:	b29b      	uxth	r3, r3
 8003304:	3b01      	subs	r3, #1
 8003306:	b29b      	uxth	r3, r3
 8003308:	687a      	ldr	r2, [r7, #4]
 800330a:	4619      	mov	r1, r3
 800330c:	84d1      	strh	r1, [r2, #38]	; 0x26
 800330e:	2b00      	cmp	r3, #0
 8003310:	d10f      	bne.n	8003332 <UART_Transmit_IT+0x9a>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	68da      	ldr	r2, [r3, #12]
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003320:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	68da      	ldr	r2, [r3, #12]
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003330:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8003332:	2300      	movs	r3, #0
 8003334:	e000      	b.n	8003338 <UART_Transmit_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 8003336:	2302      	movs	r3, #2
  }
}
 8003338:	4618      	mov	r0, r3
 800333a:	3714      	adds	r7, #20
 800333c:	46bd      	mov	sp, r7
 800333e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003342:	4770      	bx	lr

08003344 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003344:	b580      	push	{r7, lr}
 8003346:	b082      	sub	sp, #8
 8003348:	af00      	add	r7, sp, #0
 800334a:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	68da      	ldr	r2, [r3, #12]
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800335a:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	2220      	movs	r2, #32
 8003360:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003364:	6878      	ldr	r0, [r7, #4]
 8003366:	f7ff ff07 	bl	8003178 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800336a:	2300      	movs	r3, #0
}
 800336c:	4618      	mov	r0, r3
 800336e:	3708      	adds	r7, #8
 8003370:	46bd      	mov	sp, r7
 8003372:	bd80      	pop	{r7, pc}

08003374 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8003374:	b580      	push	{r7, lr}
 8003376:	b084      	sub	sp, #16
 8003378:	af00      	add	r7, sp, #0
 800337a:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8003382:	b2db      	uxtb	r3, r3
 8003384:	2b22      	cmp	r3, #34	; 0x22
 8003386:	d171      	bne.n	800346c <UART_Receive_IT+0xf8>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	689b      	ldr	r3, [r3, #8]
 800338c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003390:	d123      	bne.n	80033da <UART_Receive_IT+0x66>
    {
      tmp = (uint16_t *) huart->pRxBuffPtr;
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003396:	60fb      	str	r3, [r7, #12]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	691b      	ldr	r3, [r3, #16]
 800339c:	2b00      	cmp	r3, #0
 800339e:	d10e      	bne.n	80033be <UART_Receive_IT+0x4a>
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	685b      	ldr	r3, [r3, #4]
 80033a6:	b29b      	uxth	r3, r3
 80033a8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80033ac:	b29a      	uxth	r2, r3
 80033ae:	68fb      	ldr	r3, [r7, #12]
 80033b0:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 2U;
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80033b6:	1c9a      	adds	r2, r3, #2
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	629a      	str	r2, [r3, #40]	; 0x28
 80033bc:	e029      	b.n	8003412 <UART_Receive_IT+0x9e>
      }
      else
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	685b      	ldr	r3, [r3, #4]
 80033c4:	b29b      	uxth	r3, r3
 80033c6:	b2db      	uxtb	r3, r3
 80033c8:	b29a      	uxth	r2, r3
 80033ca:	68fb      	ldr	r3, [r7, #12]
 80033cc:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 1U;
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80033d2:	1c5a      	adds	r2, r3, #1
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	629a      	str	r2, [r3, #40]	; 0x28
 80033d8:	e01b      	b.n	8003412 <UART_Receive_IT+0x9e>
      }
    }
    else
    {
      if (huart->Init.Parity == UART_PARITY_NONE)
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	691b      	ldr	r3, [r3, #16]
 80033de:	2b00      	cmp	r3, #0
 80033e0:	d10a      	bne.n	80033f8 <UART_Receive_IT+0x84>
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	6858      	ldr	r0, [r3, #4]
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80033ec:	1c59      	adds	r1, r3, #1
 80033ee:	687a      	ldr	r2, [r7, #4]
 80033f0:	6291      	str	r1, [r2, #40]	; 0x28
 80033f2:	b2c2      	uxtb	r2, r0
 80033f4:	701a      	strb	r2, [r3, #0]
 80033f6:	e00c      	b.n	8003412 <UART_Receive_IT+0x9e>
      }
      else
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	685b      	ldr	r3, [r3, #4]
 80033fe:	b2da      	uxtb	r2, r3
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003404:	1c58      	adds	r0, r3, #1
 8003406:	6879      	ldr	r1, [r7, #4]
 8003408:	6288      	str	r0, [r1, #40]	; 0x28
 800340a:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800340e:	b2d2      	uxtb	r2, r2
 8003410:	701a      	strb	r2, [r3, #0]
      }
    }

    if (--huart->RxXferCount == 0U)
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003416:	b29b      	uxth	r3, r3
 8003418:	3b01      	subs	r3, #1
 800341a:	b29b      	uxth	r3, r3
 800341c:	687a      	ldr	r2, [r7, #4]
 800341e:	4619      	mov	r1, r3
 8003420:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8003422:	2b00      	cmp	r3, #0
 8003424:	d120      	bne.n	8003468 <UART_Receive_IT+0xf4>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	68da      	ldr	r2, [r3, #12]
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	f022 0220 	bic.w	r2, r2, #32
 8003434:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	68da      	ldr	r2, [r3, #12]
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003444:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	695a      	ldr	r2, [r3, #20]
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	f022 0201 	bic.w	r2, r2, #1
 8003454:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	2220      	movs	r2, #32
 800345a:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 800345e:	6878      	ldr	r0, [r7, #4]
 8003460:	f7fd fc1a 	bl	8000c98 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 8003464:	2300      	movs	r3, #0
 8003466:	e002      	b.n	800346e <UART_Receive_IT+0xfa>
    }
    return HAL_OK;
 8003468:	2300      	movs	r3, #0
 800346a:	e000      	b.n	800346e <UART_Receive_IT+0xfa>
  }
  else
  {
    return HAL_BUSY;
 800346c:	2302      	movs	r3, #2
  }
}
 800346e:	4618      	mov	r0, r3
 8003470:	3710      	adds	r7, #16
 8003472:	46bd      	mov	sp, r7
 8003474:	bd80      	pop	{r7, pc}
	...

08003478 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003478:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800347c:	b085      	sub	sp, #20
 800347e:	af00      	add	r7, sp, #0
 8003480:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	691b      	ldr	r3, [r3, #16]
 8003488:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	68da      	ldr	r2, [r3, #12]
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	430a      	orrs	r2, r1
 8003496:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	689a      	ldr	r2, [r3, #8]
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	691b      	ldr	r3, [r3, #16]
 80034a0:	431a      	orrs	r2, r3
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	695b      	ldr	r3, [r3, #20]
 80034a6:	431a      	orrs	r2, r3
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	69db      	ldr	r3, [r3, #28]
 80034ac:	4313      	orrs	r3, r2
 80034ae:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	68db      	ldr	r3, [r3, #12]
 80034b6:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 80034ba:	f023 030c 	bic.w	r3, r3, #12
 80034be:	687a      	ldr	r2, [r7, #4]
 80034c0:	6812      	ldr	r2, [r2, #0]
 80034c2:	68f9      	ldr	r1, [r7, #12]
 80034c4:	430b      	orrs	r3, r1
 80034c6:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	695b      	ldr	r3, [r3, #20]
 80034ce:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	699a      	ldr	r2, [r3, #24]
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	430a      	orrs	r2, r1
 80034dc:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	69db      	ldr	r3, [r3, #28]
 80034e2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80034e6:	f040 818b 	bne.w	8003800 <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	4ac1      	ldr	r2, [pc, #772]	; (80037f4 <UART_SetConfig+0x37c>)
 80034f0:	4293      	cmp	r3, r2
 80034f2:	d005      	beq.n	8003500 <UART_SetConfig+0x88>
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	4abf      	ldr	r2, [pc, #764]	; (80037f8 <UART_SetConfig+0x380>)
 80034fa:	4293      	cmp	r3, r2
 80034fc:	f040 80bd 	bne.w	800367a <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003500:	f7ff fb44 	bl	8002b8c <HAL_RCC_GetPCLK2Freq>
 8003504:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003506:	68bb      	ldr	r3, [r7, #8]
 8003508:	461d      	mov	r5, r3
 800350a:	f04f 0600 	mov.w	r6, #0
 800350e:	46a8      	mov	r8, r5
 8003510:	46b1      	mov	r9, r6
 8003512:	eb18 0308 	adds.w	r3, r8, r8
 8003516:	eb49 0409 	adc.w	r4, r9, r9
 800351a:	4698      	mov	r8, r3
 800351c:	46a1      	mov	r9, r4
 800351e:	eb18 0805 	adds.w	r8, r8, r5
 8003522:	eb49 0906 	adc.w	r9, r9, r6
 8003526:	f04f 0100 	mov.w	r1, #0
 800352a:	f04f 0200 	mov.w	r2, #0
 800352e:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8003532:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8003536:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800353a:	4688      	mov	r8, r1
 800353c:	4691      	mov	r9, r2
 800353e:	eb18 0005 	adds.w	r0, r8, r5
 8003542:	eb49 0106 	adc.w	r1, r9, r6
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	685b      	ldr	r3, [r3, #4]
 800354a:	461d      	mov	r5, r3
 800354c:	f04f 0600 	mov.w	r6, #0
 8003550:	196b      	adds	r3, r5, r5
 8003552:	eb46 0406 	adc.w	r4, r6, r6
 8003556:	461a      	mov	r2, r3
 8003558:	4623      	mov	r3, r4
 800355a:	f7fc fe35 	bl	80001c8 <__aeabi_uldivmod>
 800355e:	4603      	mov	r3, r0
 8003560:	460c      	mov	r4, r1
 8003562:	461a      	mov	r2, r3
 8003564:	4ba5      	ldr	r3, [pc, #660]	; (80037fc <UART_SetConfig+0x384>)
 8003566:	fba3 2302 	umull	r2, r3, r3, r2
 800356a:	095b      	lsrs	r3, r3, #5
 800356c:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8003570:	68bb      	ldr	r3, [r7, #8]
 8003572:	461d      	mov	r5, r3
 8003574:	f04f 0600 	mov.w	r6, #0
 8003578:	46a9      	mov	r9, r5
 800357a:	46b2      	mov	sl, r6
 800357c:	eb19 0309 	adds.w	r3, r9, r9
 8003580:	eb4a 040a 	adc.w	r4, sl, sl
 8003584:	4699      	mov	r9, r3
 8003586:	46a2      	mov	sl, r4
 8003588:	eb19 0905 	adds.w	r9, r9, r5
 800358c:	eb4a 0a06 	adc.w	sl, sl, r6
 8003590:	f04f 0100 	mov.w	r1, #0
 8003594:	f04f 0200 	mov.w	r2, #0
 8003598:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800359c:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80035a0:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80035a4:	4689      	mov	r9, r1
 80035a6:	4692      	mov	sl, r2
 80035a8:	eb19 0005 	adds.w	r0, r9, r5
 80035ac:	eb4a 0106 	adc.w	r1, sl, r6
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	685b      	ldr	r3, [r3, #4]
 80035b4:	461d      	mov	r5, r3
 80035b6:	f04f 0600 	mov.w	r6, #0
 80035ba:	196b      	adds	r3, r5, r5
 80035bc:	eb46 0406 	adc.w	r4, r6, r6
 80035c0:	461a      	mov	r2, r3
 80035c2:	4623      	mov	r3, r4
 80035c4:	f7fc fe00 	bl	80001c8 <__aeabi_uldivmod>
 80035c8:	4603      	mov	r3, r0
 80035ca:	460c      	mov	r4, r1
 80035cc:	461a      	mov	r2, r3
 80035ce:	4b8b      	ldr	r3, [pc, #556]	; (80037fc <UART_SetConfig+0x384>)
 80035d0:	fba3 1302 	umull	r1, r3, r3, r2
 80035d4:	095b      	lsrs	r3, r3, #5
 80035d6:	2164      	movs	r1, #100	; 0x64
 80035d8:	fb01 f303 	mul.w	r3, r1, r3
 80035dc:	1ad3      	subs	r3, r2, r3
 80035de:	00db      	lsls	r3, r3, #3
 80035e0:	3332      	adds	r3, #50	; 0x32
 80035e2:	4a86      	ldr	r2, [pc, #536]	; (80037fc <UART_SetConfig+0x384>)
 80035e4:	fba2 2303 	umull	r2, r3, r2, r3
 80035e8:	095b      	lsrs	r3, r3, #5
 80035ea:	005b      	lsls	r3, r3, #1
 80035ec:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80035f0:	4498      	add	r8, r3
 80035f2:	68bb      	ldr	r3, [r7, #8]
 80035f4:	461d      	mov	r5, r3
 80035f6:	f04f 0600 	mov.w	r6, #0
 80035fa:	46a9      	mov	r9, r5
 80035fc:	46b2      	mov	sl, r6
 80035fe:	eb19 0309 	adds.w	r3, r9, r9
 8003602:	eb4a 040a 	adc.w	r4, sl, sl
 8003606:	4699      	mov	r9, r3
 8003608:	46a2      	mov	sl, r4
 800360a:	eb19 0905 	adds.w	r9, r9, r5
 800360e:	eb4a 0a06 	adc.w	sl, sl, r6
 8003612:	f04f 0100 	mov.w	r1, #0
 8003616:	f04f 0200 	mov.w	r2, #0
 800361a:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800361e:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8003622:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8003626:	4689      	mov	r9, r1
 8003628:	4692      	mov	sl, r2
 800362a:	eb19 0005 	adds.w	r0, r9, r5
 800362e:	eb4a 0106 	adc.w	r1, sl, r6
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	685b      	ldr	r3, [r3, #4]
 8003636:	461d      	mov	r5, r3
 8003638:	f04f 0600 	mov.w	r6, #0
 800363c:	196b      	adds	r3, r5, r5
 800363e:	eb46 0406 	adc.w	r4, r6, r6
 8003642:	461a      	mov	r2, r3
 8003644:	4623      	mov	r3, r4
 8003646:	f7fc fdbf 	bl	80001c8 <__aeabi_uldivmod>
 800364a:	4603      	mov	r3, r0
 800364c:	460c      	mov	r4, r1
 800364e:	461a      	mov	r2, r3
 8003650:	4b6a      	ldr	r3, [pc, #424]	; (80037fc <UART_SetConfig+0x384>)
 8003652:	fba3 1302 	umull	r1, r3, r3, r2
 8003656:	095b      	lsrs	r3, r3, #5
 8003658:	2164      	movs	r1, #100	; 0x64
 800365a:	fb01 f303 	mul.w	r3, r1, r3
 800365e:	1ad3      	subs	r3, r2, r3
 8003660:	00db      	lsls	r3, r3, #3
 8003662:	3332      	adds	r3, #50	; 0x32
 8003664:	4a65      	ldr	r2, [pc, #404]	; (80037fc <UART_SetConfig+0x384>)
 8003666:	fba2 2303 	umull	r2, r3, r2, r3
 800366a:	095b      	lsrs	r3, r3, #5
 800366c:	f003 0207 	and.w	r2, r3, #7
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	4442      	add	r2, r8
 8003676:	609a      	str	r2, [r3, #8]
 8003678:	e26f      	b.n	8003b5a <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800367a:	f7ff fa73 	bl	8002b64 <HAL_RCC_GetPCLK1Freq>
 800367e:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003680:	68bb      	ldr	r3, [r7, #8]
 8003682:	461d      	mov	r5, r3
 8003684:	f04f 0600 	mov.w	r6, #0
 8003688:	46a8      	mov	r8, r5
 800368a:	46b1      	mov	r9, r6
 800368c:	eb18 0308 	adds.w	r3, r8, r8
 8003690:	eb49 0409 	adc.w	r4, r9, r9
 8003694:	4698      	mov	r8, r3
 8003696:	46a1      	mov	r9, r4
 8003698:	eb18 0805 	adds.w	r8, r8, r5
 800369c:	eb49 0906 	adc.w	r9, r9, r6
 80036a0:	f04f 0100 	mov.w	r1, #0
 80036a4:	f04f 0200 	mov.w	r2, #0
 80036a8:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 80036ac:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 80036b0:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 80036b4:	4688      	mov	r8, r1
 80036b6:	4691      	mov	r9, r2
 80036b8:	eb18 0005 	adds.w	r0, r8, r5
 80036bc:	eb49 0106 	adc.w	r1, r9, r6
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	685b      	ldr	r3, [r3, #4]
 80036c4:	461d      	mov	r5, r3
 80036c6:	f04f 0600 	mov.w	r6, #0
 80036ca:	196b      	adds	r3, r5, r5
 80036cc:	eb46 0406 	adc.w	r4, r6, r6
 80036d0:	461a      	mov	r2, r3
 80036d2:	4623      	mov	r3, r4
 80036d4:	f7fc fd78 	bl	80001c8 <__aeabi_uldivmod>
 80036d8:	4603      	mov	r3, r0
 80036da:	460c      	mov	r4, r1
 80036dc:	461a      	mov	r2, r3
 80036de:	4b47      	ldr	r3, [pc, #284]	; (80037fc <UART_SetConfig+0x384>)
 80036e0:	fba3 2302 	umull	r2, r3, r3, r2
 80036e4:	095b      	lsrs	r3, r3, #5
 80036e6:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80036ea:	68bb      	ldr	r3, [r7, #8]
 80036ec:	461d      	mov	r5, r3
 80036ee:	f04f 0600 	mov.w	r6, #0
 80036f2:	46a9      	mov	r9, r5
 80036f4:	46b2      	mov	sl, r6
 80036f6:	eb19 0309 	adds.w	r3, r9, r9
 80036fa:	eb4a 040a 	adc.w	r4, sl, sl
 80036fe:	4699      	mov	r9, r3
 8003700:	46a2      	mov	sl, r4
 8003702:	eb19 0905 	adds.w	r9, r9, r5
 8003706:	eb4a 0a06 	adc.w	sl, sl, r6
 800370a:	f04f 0100 	mov.w	r1, #0
 800370e:	f04f 0200 	mov.w	r2, #0
 8003712:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003716:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800371a:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800371e:	4689      	mov	r9, r1
 8003720:	4692      	mov	sl, r2
 8003722:	eb19 0005 	adds.w	r0, r9, r5
 8003726:	eb4a 0106 	adc.w	r1, sl, r6
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	685b      	ldr	r3, [r3, #4]
 800372e:	461d      	mov	r5, r3
 8003730:	f04f 0600 	mov.w	r6, #0
 8003734:	196b      	adds	r3, r5, r5
 8003736:	eb46 0406 	adc.w	r4, r6, r6
 800373a:	461a      	mov	r2, r3
 800373c:	4623      	mov	r3, r4
 800373e:	f7fc fd43 	bl	80001c8 <__aeabi_uldivmod>
 8003742:	4603      	mov	r3, r0
 8003744:	460c      	mov	r4, r1
 8003746:	461a      	mov	r2, r3
 8003748:	4b2c      	ldr	r3, [pc, #176]	; (80037fc <UART_SetConfig+0x384>)
 800374a:	fba3 1302 	umull	r1, r3, r3, r2
 800374e:	095b      	lsrs	r3, r3, #5
 8003750:	2164      	movs	r1, #100	; 0x64
 8003752:	fb01 f303 	mul.w	r3, r1, r3
 8003756:	1ad3      	subs	r3, r2, r3
 8003758:	00db      	lsls	r3, r3, #3
 800375a:	3332      	adds	r3, #50	; 0x32
 800375c:	4a27      	ldr	r2, [pc, #156]	; (80037fc <UART_SetConfig+0x384>)
 800375e:	fba2 2303 	umull	r2, r3, r2, r3
 8003762:	095b      	lsrs	r3, r3, #5
 8003764:	005b      	lsls	r3, r3, #1
 8003766:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800376a:	4498      	add	r8, r3
 800376c:	68bb      	ldr	r3, [r7, #8]
 800376e:	461d      	mov	r5, r3
 8003770:	f04f 0600 	mov.w	r6, #0
 8003774:	46a9      	mov	r9, r5
 8003776:	46b2      	mov	sl, r6
 8003778:	eb19 0309 	adds.w	r3, r9, r9
 800377c:	eb4a 040a 	adc.w	r4, sl, sl
 8003780:	4699      	mov	r9, r3
 8003782:	46a2      	mov	sl, r4
 8003784:	eb19 0905 	adds.w	r9, r9, r5
 8003788:	eb4a 0a06 	adc.w	sl, sl, r6
 800378c:	f04f 0100 	mov.w	r1, #0
 8003790:	f04f 0200 	mov.w	r2, #0
 8003794:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003798:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800379c:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80037a0:	4689      	mov	r9, r1
 80037a2:	4692      	mov	sl, r2
 80037a4:	eb19 0005 	adds.w	r0, r9, r5
 80037a8:	eb4a 0106 	adc.w	r1, sl, r6
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	685b      	ldr	r3, [r3, #4]
 80037b0:	461d      	mov	r5, r3
 80037b2:	f04f 0600 	mov.w	r6, #0
 80037b6:	196b      	adds	r3, r5, r5
 80037b8:	eb46 0406 	adc.w	r4, r6, r6
 80037bc:	461a      	mov	r2, r3
 80037be:	4623      	mov	r3, r4
 80037c0:	f7fc fd02 	bl	80001c8 <__aeabi_uldivmod>
 80037c4:	4603      	mov	r3, r0
 80037c6:	460c      	mov	r4, r1
 80037c8:	461a      	mov	r2, r3
 80037ca:	4b0c      	ldr	r3, [pc, #48]	; (80037fc <UART_SetConfig+0x384>)
 80037cc:	fba3 1302 	umull	r1, r3, r3, r2
 80037d0:	095b      	lsrs	r3, r3, #5
 80037d2:	2164      	movs	r1, #100	; 0x64
 80037d4:	fb01 f303 	mul.w	r3, r1, r3
 80037d8:	1ad3      	subs	r3, r2, r3
 80037da:	00db      	lsls	r3, r3, #3
 80037dc:	3332      	adds	r3, #50	; 0x32
 80037de:	4a07      	ldr	r2, [pc, #28]	; (80037fc <UART_SetConfig+0x384>)
 80037e0:	fba2 2303 	umull	r2, r3, r2, r3
 80037e4:	095b      	lsrs	r3, r3, #5
 80037e6:	f003 0207 	and.w	r2, r3, #7
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	4442      	add	r2, r8
 80037f0:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 80037f2:	e1b2      	b.n	8003b5a <UART_SetConfig+0x6e2>
 80037f4:	40011000 	.word	0x40011000
 80037f8:	40011400 	.word	0x40011400
 80037fc:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	4ad7      	ldr	r2, [pc, #860]	; (8003b64 <UART_SetConfig+0x6ec>)
 8003806:	4293      	cmp	r3, r2
 8003808:	d005      	beq.n	8003816 <UART_SetConfig+0x39e>
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	4ad6      	ldr	r2, [pc, #856]	; (8003b68 <UART_SetConfig+0x6f0>)
 8003810:	4293      	cmp	r3, r2
 8003812:	f040 80d1 	bne.w	80039b8 <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 8003816:	f7ff f9b9 	bl	8002b8c <HAL_RCC_GetPCLK2Freq>
 800381a:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800381c:	68bb      	ldr	r3, [r7, #8]
 800381e:	469a      	mov	sl, r3
 8003820:	f04f 0b00 	mov.w	fp, #0
 8003824:	46d0      	mov	r8, sl
 8003826:	46d9      	mov	r9, fp
 8003828:	eb18 0308 	adds.w	r3, r8, r8
 800382c:	eb49 0409 	adc.w	r4, r9, r9
 8003830:	4698      	mov	r8, r3
 8003832:	46a1      	mov	r9, r4
 8003834:	eb18 080a 	adds.w	r8, r8, sl
 8003838:	eb49 090b 	adc.w	r9, r9, fp
 800383c:	f04f 0100 	mov.w	r1, #0
 8003840:	f04f 0200 	mov.w	r2, #0
 8003844:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8003848:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800384c:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8003850:	4688      	mov	r8, r1
 8003852:	4691      	mov	r9, r2
 8003854:	eb1a 0508 	adds.w	r5, sl, r8
 8003858:	eb4b 0609 	adc.w	r6, fp, r9
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	685b      	ldr	r3, [r3, #4]
 8003860:	4619      	mov	r1, r3
 8003862:	f04f 0200 	mov.w	r2, #0
 8003866:	f04f 0300 	mov.w	r3, #0
 800386a:	f04f 0400 	mov.w	r4, #0
 800386e:	0094      	lsls	r4, r2, #2
 8003870:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8003874:	008b      	lsls	r3, r1, #2
 8003876:	461a      	mov	r2, r3
 8003878:	4623      	mov	r3, r4
 800387a:	4628      	mov	r0, r5
 800387c:	4631      	mov	r1, r6
 800387e:	f7fc fca3 	bl	80001c8 <__aeabi_uldivmod>
 8003882:	4603      	mov	r3, r0
 8003884:	460c      	mov	r4, r1
 8003886:	461a      	mov	r2, r3
 8003888:	4bb8      	ldr	r3, [pc, #736]	; (8003b6c <UART_SetConfig+0x6f4>)
 800388a:	fba3 2302 	umull	r2, r3, r3, r2
 800388e:	095b      	lsrs	r3, r3, #5
 8003890:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8003894:	68bb      	ldr	r3, [r7, #8]
 8003896:	469b      	mov	fp, r3
 8003898:	f04f 0c00 	mov.w	ip, #0
 800389c:	46d9      	mov	r9, fp
 800389e:	46e2      	mov	sl, ip
 80038a0:	eb19 0309 	adds.w	r3, r9, r9
 80038a4:	eb4a 040a 	adc.w	r4, sl, sl
 80038a8:	4699      	mov	r9, r3
 80038aa:	46a2      	mov	sl, r4
 80038ac:	eb19 090b 	adds.w	r9, r9, fp
 80038b0:	eb4a 0a0c 	adc.w	sl, sl, ip
 80038b4:	f04f 0100 	mov.w	r1, #0
 80038b8:	f04f 0200 	mov.w	r2, #0
 80038bc:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80038c0:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80038c4:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80038c8:	4689      	mov	r9, r1
 80038ca:	4692      	mov	sl, r2
 80038cc:	eb1b 0509 	adds.w	r5, fp, r9
 80038d0:	eb4c 060a 	adc.w	r6, ip, sl
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	685b      	ldr	r3, [r3, #4]
 80038d8:	4619      	mov	r1, r3
 80038da:	f04f 0200 	mov.w	r2, #0
 80038de:	f04f 0300 	mov.w	r3, #0
 80038e2:	f04f 0400 	mov.w	r4, #0
 80038e6:	0094      	lsls	r4, r2, #2
 80038e8:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80038ec:	008b      	lsls	r3, r1, #2
 80038ee:	461a      	mov	r2, r3
 80038f0:	4623      	mov	r3, r4
 80038f2:	4628      	mov	r0, r5
 80038f4:	4631      	mov	r1, r6
 80038f6:	f7fc fc67 	bl	80001c8 <__aeabi_uldivmod>
 80038fa:	4603      	mov	r3, r0
 80038fc:	460c      	mov	r4, r1
 80038fe:	461a      	mov	r2, r3
 8003900:	4b9a      	ldr	r3, [pc, #616]	; (8003b6c <UART_SetConfig+0x6f4>)
 8003902:	fba3 1302 	umull	r1, r3, r3, r2
 8003906:	095b      	lsrs	r3, r3, #5
 8003908:	2164      	movs	r1, #100	; 0x64
 800390a:	fb01 f303 	mul.w	r3, r1, r3
 800390e:	1ad3      	subs	r3, r2, r3
 8003910:	011b      	lsls	r3, r3, #4
 8003912:	3332      	adds	r3, #50	; 0x32
 8003914:	4a95      	ldr	r2, [pc, #596]	; (8003b6c <UART_SetConfig+0x6f4>)
 8003916:	fba2 2303 	umull	r2, r3, r2, r3
 800391a:	095b      	lsrs	r3, r3, #5
 800391c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003920:	4498      	add	r8, r3
 8003922:	68bb      	ldr	r3, [r7, #8]
 8003924:	469b      	mov	fp, r3
 8003926:	f04f 0c00 	mov.w	ip, #0
 800392a:	46d9      	mov	r9, fp
 800392c:	46e2      	mov	sl, ip
 800392e:	eb19 0309 	adds.w	r3, r9, r9
 8003932:	eb4a 040a 	adc.w	r4, sl, sl
 8003936:	4699      	mov	r9, r3
 8003938:	46a2      	mov	sl, r4
 800393a:	eb19 090b 	adds.w	r9, r9, fp
 800393e:	eb4a 0a0c 	adc.w	sl, sl, ip
 8003942:	f04f 0100 	mov.w	r1, #0
 8003946:	f04f 0200 	mov.w	r2, #0
 800394a:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800394e:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8003952:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8003956:	4689      	mov	r9, r1
 8003958:	4692      	mov	sl, r2
 800395a:	eb1b 0509 	adds.w	r5, fp, r9
 800395e:	eb4c 060a 	adc.w	r6, ip, sl
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	685b      	ldr	r3, [r3, #4]
 8003966:	4619      	mov	r1, r3
 8003968:	f04f 0200 	mov.w	r2, #0
 800396c:	f04f 0300 	mov.w	r3, #0
 8003970:	f04f 0400 	mov.w	r4, #0
 8003974:	0094      	lsls	r4, r2, #2
 8003976:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800397a:	008b      	lsls	r3, r1, #2
 800397c:	461a      	mov	r2, r3
 800397e:	4623      	mov	r3, r4
 8003980:	4628      	mov	r0, r5
 8003982:	4631      	mov	r1, r6
 8003984:	f7fc fc20 	bl	80001c8 <__aeabi_uldivmod>
 8003988:	4603      	mov	r3, r0
 800398a:	460c      	mov	r4, r1
 800398c:	461a      	mov	r2, r3
 800398e:	4b77      	ldr	r3, [pc, #476]	; (8003b6c <UART_SetConfig+0x6f4>)
 8003990:	fba3 1302 	umull	r1, r3, r3, r2
 8003994:	095b      	lsrs	r3, r3, #5
 8003996:	2164      	movs	r1, #100	; 0x64
 8003998:	fb01 f303 	mul.w	r3, r1, r3
 800399c:	1ad3      	subs	r3, r2, r3
 800399e:	011b      	lsls	r3, r3, #4
 80039a0:	3332      	adds	r3, #50	; 0x32
 80039a2:	4a72      	ldr	r2, [pc, #456]	; (8003b6c <UART_SetConfig+0x6f4>)
 80039a4:	fba2 2303 	umull	r2, r3, r2, r3
 80039a8:	095b      	lsrs	r3, r3, #5
 80039aa:	f003 020f 	and.w	r2, r3, #15
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	4442      	add	r2, r8
 80039b4:	609a      	str	r2, [r3, #8]
 80039b6:	e0d0      	b.n	8003b5a <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 80039b8:	f7ff f8d4 	bl	8002b64 <HAL_RCC_GetPCLK1Freq>
 80039bc:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80039be:	68bb      	ldr	r3, [r7, #8]
 80039c0:	469a      	mov	sl, r3
 80039c2:	f04f 0b00 	mov.w	fp, #0
 80039c6:	46d0      	mov	r8, sl
 80039c8:	46d9      	mov	r9, fp
 80039ca:	eb18 0308 	adds.w	r3, r8, r8
 80039ce:	eb49 0409 	adc.w	r4, r9, r9
 80039d2:	4698      	mov	r8, r3
 80039d4:	46a1      	mov	r9, r4
 80039d6:	eb18 080a 	adds.w	r8, r8, sl
 80039da:	eb49 090b 	adc.w	r9, r9, fp
 80039de:	f04f 0100 	mov.w	r1, #0
 80039e2:	f04f 0200 	mov.w	r2, #0
 80039e6:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 80039ea:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 80039ee:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 80039f2:	4688      	mov	r8, r1
 80039f4:	4691      	mov	r9, r2
 80039f6:	eb1a 0508 	adds.w	r5, sl, r8
 80039fa:	eb4b 0609 	adc.w	r6, fp, r9
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	685b      	ldr	r3, [r3, #4]
 8003a02:	4619      	mov	r1, r3
 8003a04:	f04f 0200 	mov.w	r2, #0
 8003a08:	f04f 0300 	mov.w	r3, #0
 8003a0c:	f04f 0400 	mov.w	r4, #0
 8003a10:	0094      	lsls	r4, r2, #2
 8003a12:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8003a16:	008b      	lsls	r3, r1, #2
 8003a18:	461a      	mov	r2, r3
 8003a1a:	4623      	mov	r3, r4
 8003a1c:	4628      	mov	r0, r5
 8003a1e:	4631      	mov	r1, r6
 8003a20:	f7fc fbd2 	bl	80001c8 <__aeabi_uldivmod>
 8003a24:	4603      	mov	r3, r0
 8003a26:	460c      	mov	r4, r1
 8003a28:	461a      	mov	r2, r3
 8003a2a:	4b50      	ldr	r3, [pc, #320]	; (8003b6c <UART_SetConfig+0x6f4>)
 8003a2c:	fba3 2302 	umull	r2, r3, r3, r2
 8003a30:	095b      	lsrs	r3, r3, #5
 8003a32:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8003a36:	68bb      	ldr	r3, [r7, #8]
 8003a38:	469b      	mov	fp, r3
 8003a3a:	f04f 0c00 	mov.w	ip, #0
 8003a3e:	46d9      	mov	r9, fp
 8003a40:	46e2      	mov	sl, ip
 8003a42:	eb19 0309 	adds.w	r3, r9, r9
 8003a46:	eb4a 040a 	adc.w	r4, sl, sl
 8003a4a:	4699      	mov	r9, r3
 8003a4c:	46a2      	mov	sl, r4
 8003a4e:	eb19 090b 	adds.w	r9, r9, fp
 8003a52:	eb4a 0a0c 	adc.w	sl, sl, ip
 8003a56:	f04f 0100 	mov.w	r1, #0
 8003a5a:	f04f 0200 	mov.w	r2, #0
 8003a5e:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003a62:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8003a66:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8003a6a:	4689      	mov	r9, r1
 8003a6c:	4692      	mov	sl, r2
 8003a6e:	eb1b 0509 	adds.w	r5, fp, r9
 8003a72:	eb4c 060a 	adc.w	r6, ip, sl
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	685b      	ldr	r3, [r3, #4]
 8003a7a:	4619      	mov	r1, r3
 8003a7c:	f04f 0200 	mov.w	r2, #0
 8003a80:	f04f 0300 	mov.w	r3, #0
 8003a84:	f04f 0400 	mov.w	r4, #0
 8003a88:	0094      	lsls	r4, r2, #2
 8003a8a:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8003a8e:	008b      	lsls	r3, r1, #2
 8003a90:	461a      	mov	r2, r3
 8003a92:	4623      	mov	r3, r4
 8003a94:	4628      	mov	r0, r5
 8003a96:	4631      	mov	r1, r6
 8003a98:	f7fc fb96 	bl	80001c8 <__aeabi_uldivmod>
 8003a9c:	4603      	mov	r3, r0
 8003a9e:	460c      	mov	r4, r1
 8003aa0:	461a      	mov	r2, r3
 8003aa2:	4b32      	ldr	r3, [pc, #200]	; (8003b6c <UART_SetConfig+0x6f4>)
 8003aa4:	fba3 1302 	umull	r1, r3, r3, r2
 8003aa8:	095b      	lsrs	r3, r3, #5
 8003aaa:	2164      	movs	r1, #100	; 0x64
 8003aac:	fb01 f303 	mul.w	r3, r1, r3
 8003ab0:	1ad3      	subs	r3, r2, r3
 8003ab2:	011b      	lsls	r3, r3, #4
 8003ab4:	3332      	adds	r3, #50	; 0x32
 8003ab6:	4a2d      	ldr	r2, [pc, #180]	; (8003b6c <UART_SetConfig+0x6f4>)
 8003ab8:	fba2 2303 	umull	r2, r3, r2, r3
 8003abc:	095b      	lsrs	r3, r3, #5
 8003abe:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003ac2:	4498      	add	r8, r3
 8003ac4:	68bb      	ldr	r3, [r7, #8]
 8003ac6:	469b      	mov	fp, r3
 8003ac8:	f04f 0c00 	mov.w	ip, #0
 8003acc:	46d9      	mov	r9, fp
 8003ace:	46e2      	mov	sl, ip
 8003ad0:	eb19 0309 	adds.w	r3, r9, r9
 8003ad4:	eb4a 040a 	adc.w	r4, sl, sl
 8003ad8:	4699      	mov	r9, r3
 8003ada:	46a2      	mov	sl, r4
 8003adc:	eb19 090b 	adds.w	r9, r9, fp
 8003ae0:	eb4a 0a0c 	adc.w	sl, sl, ip
 8003ae4:	f04f 0100 	mov.w	r1, #0
 8003ae8:	f04f 0200 	mov.w	r2, #0
 8003aec:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003af0:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8003af4:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8003af8:	4689      	mov	r9, r1
 8003afa:	4692      	mov	sl, r2
 8003afc:	eb1b 0509 	adds.w	r5, fp, r9
 8003b00:	eb4c 060a 	adc.w	r6, ip, sl
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	685b      	ldr	r3, [r3, #4]
 8003b08:	4619      	mov	r1, r3
 8003b0a:	f04f 0200 	mov.w	r2, #0
 8003b0e:	f04f 0300 	mov.w	r3, #0
 8003b12:	f04f 0400 	mov.w	r4, #0
 8003b16:	0094      	lsls	r4, r2, #2
 8003b18:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8003b1c:	008b      	lsls	r3, r1, #2
 8003b1e:	461a      	mov	r2, r3
 8003b20:	4623      	mov	r3, r4
 8003b22:	4628      	mov	r0, r5
 8003b24:	4631      	mov	r1, r6
 8003b26:	f7fc fb4f 	bl	80001c8 <__aeabi_uldivmod>
 8003b2a:	4603      	mov	r3, r0
 8003b2c:	460c      	mov	r4, r1
 8003b2e:	461a      	mov	r2, r3
 8003b30:	4b0e      	ldr	r3, [pc, #56]	; (8003b6c <UART_SetConfig+0x6f4>)
 8003b32:	fba3 1302 	umull	r1, r3, r3, r2
 8003b36:	095b      	lsrs	r3, r3, #5
 8003b38:	2164      	movs	r1, #100	; 0x64
 8003b3a:	fb01 f303 	mul.w	r3, r1, r3
 8003b3e:	1ad3      	subs	r3, r2, r3
 8003b40:	011b      	lsls	r3, r3, #4
 8003b42:	3332      	adds	r3, #50	; 0x32
 8003b44:	4a09      	ldr	r2, [pc, #36]	; (8003b6c <UART_SetConfig+0x6f4>)
 8003b46:	fba2 2303 	umull	r2, r3, r2, r3
 8003b4a:	095b      	lsrs	r3, r3, #5
 8003b4c:	f003 020f 	and.w	r2, r3, #15
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	4442      	add	r2, r8
 8003b56:	609a      	str	r2, [r3, #8]
}
 8003b58:	e7ff      	b.n	8003b5a <UART_SetConfig+0x6e2>
 8003b5a:	bf00      	nop
 8003b5c:	3714      	adds	r7, #20
 8003b5e:	46bd      	mov	sp, r7
 8003b60:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003b64:	40011000 	.word	0x40011000
 8003b68:	40011400 	.word	0x40011400
 8003b6c:	51eb851f 	.word	0x51eb851f

08003b70 <__libc_init_array>:
 8003b70:	b570      	push	{r4, r5, r6, lr}
 8003b72:	4e0d      	ldr	r6, [pc, #52]	; (8003ba8 <__libc_init_array+0x38>)
 8003b74:	4c0d      	ldr	r4, [pc, #52]	; (8003bac <__libc_init_array+0x3c>)
 8003b76:	1ba4      	subs	r4, r4, r6
 8003b78:	10a4      	asrs	r4, r4, #2
 8003b7a:	2500      	movs	r5, #0
 8003b7c:	42a5      	cmp	r5, r4
 8003b7e:	d109      	bne.n	8003b94 <__libc_init_array+0x24>
 8003b80:	4e0b      	ldr	r6, [pc, #44]	; (8003bb0 <__libc_init_array+0x40>)
 8003b82:	4c0c      	ldr	r4, [pc, #48]	; (8003bb4 <__libc_init_array+0x44>)
 8003b84:	f000 f820 	bl	8003bc8 <_init>
 8003b88:	1ba4      	subs	r4, r4, r6
 8003b8a:	10a4      	asrs	r4, r4, #2
 8003b8c:	2500      	movs	r5, #0
 8003b8e:	42a5      	cmp	r5, r4
 8003b90:	d105      	bne.n	8003b9e <__libc_init_array+0x2e>
 8003b92:	bd70      	pop	{r4, r5, r6, pc}
 8003b94:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003b98:	4798      	blx	r3
 8003b9a:	3501      	adds	r5, #1
 8003b9c:	e7ee      	b.n	8003b7c <__libc_init_array+0xc>
 8003b9e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003ba2:	4798      	blx	r3
 8003ba4:	3501      	adds	r5, #1
 8003ba6:	e7f2      	b.n	8003b8e <__libc_init_array+0x1e>
 8003ba8:	08003e0c 	.word	0x08003e0c
 8003bac:	08003e0c 	.word	0x08003e0c
 8003bb0:	08003e0c 	.word	0x08003e0c
 8003bb4:	08003e10 	.word	0x08003e10

08003bb8 <memset>:
 8003bb8:	4402      	add	r2, r0
 8003bba:	4603      	mov	r3, r0
 8003bbc:	4293      	cmp	r3, r2
 8003bbe:	d100      	bne.n	8003bc2 <memset+0xa>
 8003bc0:	4770      	bx	lr
 8003bc2:	f803 1b01 	strb.w	r1, [r3], #1
 8003bc6:	e7f9      	b.n	8003bbc <memset+0x4>

08003bc8 <_init>:
 8003bc8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003bca:	bf00      	nop
 8003bcc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003bce:	bc08      	pop	{r3}
 8003bd0:	469e      	mov	lr, r3
 8003bd2:	4770      	bx	lr

08003bd4 <_fini>:
 8003bd4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003bd6:	bf00      	nop
 8003bd8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003bda:	bc08      	pop	{r3}
 8003bdc:	469e      	mov	lr, r3
 8003bde:	4770      	bx	lr
